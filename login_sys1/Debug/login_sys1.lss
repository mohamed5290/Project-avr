
login_sys1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003eac  00003f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000f6  008000f6  00003fd6  2**0
                  ALLOC
  3 .stab         000034f8  00000000  00000000  00003fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e65  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a22e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b119  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <main>
      8a:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ed       	ldi	r26, 0xD5	; 213
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ed       	ldi	r24, 0xD5	; 213
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DiO_private.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_U8_DDRA_REG=conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8e e7       	ldi	r24, 0x7E	; 126
     b54:	80 83       	st	Z, r24
	               		 DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION );

    DIO_U8_DDRB_REG=conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 ef       	ldi	r24, 0xF0	; 240
     b5c:	80 83       	st	Z, r24
				         DIO_u8_PB4_DIRECTION,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION );

    DIO_U8_DDRC_REG=conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f e3       	ldi	r24, 0x3F	; 63
     b64:	80 83       	st	Z, r24
				         DIO_u8_PC4_DIRECTION,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION );

    DIO_U8_DDRD_REG=conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
				         DIO_u8_PD4_DIRECTION,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION );



    DIO_U8_PORTA_REG=conc(DIO_u8_PA7_INITTIAL_VALUE,DIO_u8_PA6_INITTIAL_VALUE,DIO_u8_PA5_INITTIAL_VALUE,
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
    		              DIO_u8_PA4_INITTIAL_VALUE,DIO_u8_PA3_INITTIAL_VALUE,DIO_u8_PA2_INITTIAL_VALUE,DIO_u8_PA1_INITTIAL_VALUE,DIO_u8_PA0_INITTIAL_VALUE);

    DIO_U8_PORTB_REG=conc(DIO_u8_PB7_INITTIAL_VALUE,DIO_u8_PB6_INITTIAL_VALUE,DIO_u8_PB5_INITTIAL_VALUE,
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 ef       	ldi	r24, 0xF0	; 240
     b78:	80 83       	st	Z, r24
    		              DIO_u8_PB4_INITTIAL_VALUE,DIO_u8_PB3_INITTIAL_VALUE,DIO_u8_PB2_INITTIAL_VALUE,DIO_u8_PB1_INITTIAL_VALUE,DIO_u8_PB0_INITTIAL_VALUE);

	DIO_U8_PORTC_REG=conc(DIO_u8_PC7_INITTIAL_VALUE,DIO_u8_PC6_INITTIAL_VALUE,DIO_u8_PC5_INITTIAL_VALUE,
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
				          DIO_u8_PC4_INITTIAL_VALUE,DIO_u8_PC3_INITTIAL_VALUE,DIO_u8_PC2_INITTIAL_VALUE,DIO_u8_PC1_INITTIAL_VALUE,DIO_u8_PC0_INITTIAL_VALUE);

    DIO_U8_PORTD_REG=conc(DIO_u8_PD7_INITTIAL_VALUE,DIO_u8_PD6_INITTIAL_VALUE,DIO_u8_PD5_INITTIAL_VALUE,
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	8c e3       	ldi	r24, 0x3C	; 60
     b86:	80 83       	st	Z, r24
    		              DIO_u8_PD4_INITTIAL_VALUE,DIO_u8_PD3_INITTIAL_VALUE,DIO_u8_PD2_INITTIAL_VALUE,DIO_u8_PD1_INITTIAL_VALUE,DIO_u8_PD0_INITTIAL_VALUE);


}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DIO_u8SetPinDirction>:


u8 DIO_u8SetPinDirction(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinDirction )
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <DIO_u8SetPinDirction+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <DIO_u8SetPinDirction+0x8>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <DIO_u8SetPinDirction+0xa>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	8a 83       	std	Y+2, r24	; 0x02
     b9e:	6b 83       	std	Y+3, r22	; 0x03
     ba0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinDirction<=DIO_U8_OUTPUT))
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	08 f0       	brcs	.+2      	; 0xbae <DIO_u8SetPinDirction+0x20>
     bac:	da c0       	rjmp	.+436    	; 0xd62 <DIO_u8SetPinDirction+0x1d4>
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 30       	cpi	r24, 0x08	; 8
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <DIO_u8SetPinDirction+0x28>
     bb4:	d6 c0       	rjmp	.+428    	; 0xd62 <DIO_u8SetPinDirction+0x1d4>
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	08 f0       	brcs	.+2      	; 0xbbe <DIO_u8SetPinDirction+0x30>
     bbc:	d2 c0       	rjmp	.+420    	; 0xd62 <DIO_u8SetPinDirction+0x1d4>
	{
		switch(copy_u8PortId)
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	3e 83       	std	Y+6, r19	; 0x06
     bc6:	2d 83       	std	Y+5, r18	; 0x05
     bc8:	8d 81       	ldd	r24, Y+5	; 0x05
     bca:	9e 81       	ldd	r25, Y+6	; 0x06
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	91 05       	cpc	r25, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <DIO_u8SetPinDirction+0x46>
     bd2:	43 c0       	rjmp	.+134    	; 0xc5a <DIO_u8SetPinDirction+0xcc>
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	22 30       	cpi	r18, 0x02	; 2
     bda:	31 05       	cpc	r19, r1
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <DIO_u8SetPinDirction+0x5a>
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	9e 81       	ldd	r25, Y+6	; 0x06
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	71 f0       	breq	.+28     	; 0xc02 <DIO_u8SetPinDirction+0x74>
     be6:	be c0       	rjmp	.+380    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
     be8:	2d 81       	ldd	r18, Y+5	; 0x05
     bea:	3e 81       	ldd	r19, Y+6	; 0x06
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <DIO_u8SetPinDirction+0x66>
     bf2:	5f c0       	rjmp	.+190    	; 0xcb2 <DIO_u8SetPinDirction+0x124>
     bf4:	8d 81       	ldd	r24, Y+5	; 0x05
     bf6:	9e 81       	ldd	r25, Y+6	; 0x06
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <DIO_u8SetPinDirction+0x72>
     bfe:	85 c0       	rjmp	.+266    	; 0xd0a <DIO_u8SetPinDirction+0x17c>
     c00:	b1 c0       	rjmp	.+354    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
		{
			case DIO_U8_PORTA:
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     c02:	8c 81       	ldd	r24, Y+4	; 0x04
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	a1 f4       	brne	.+40     	; 0xc30 <DIO_u8SetPinDirction+0xa2>
			       {
			            SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     c08:	aa e3       	ldi	r26, 0x3A	; 58
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e3       	ldi	r30, 0x3A	; 58
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 2e       	mov	r0, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_u8SetPinDirction+0x98>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_u8SetPinDirction+0x94>
     c2a:	84 2b       	or	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	9a c0       	rjmp	.+308    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     c30:	aa e3       	ldi	r26, 0x3A	; 58
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ea e3       	ldi	r30, 0x3A	; 58
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_u8SetPinDirction+0xc0>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_u8SetPinDirction+0xbc>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	85 c0       	rjmp	.+266    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTB :
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	a1 f4       	brne	.+40     	; 0xc88 <DIO_u8SetPinDirction+0xfa>
			       {
			            SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     c60:	a7 e3       	ldi	r26, 0x37	; 55
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e7 e3       	ldi	r30, 0x37	; 55
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_u8SetPinDirction+0xf0>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_u8SetPinDirction+0xec>
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	6e c0       	rjmp	.+220    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     c88:	a7 e3       	ldi	r26, 0x37	; 55
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e7 e3       	ldi	r30, 0x37	; 55
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_u8SetPinDirction+0x118>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_u8SetPinDirction+0x114>
     caa:	80 95       	com	r24
     cac:	84 23       	and	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	59 c0       	rjmp	.+178    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTC:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <DIO_u8SetPinDirction+0x152>
			        {
			            SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     cb8:	a4 e3       	ldi	r26, 0x34	; 52
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e4 e3       	ldi	r30, 0x34	; 52
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_u8SetPinDirction+0x148>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_u8SetPinDirction+0x144>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	42 c0       	rjmp	.+132    	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
			        {
						CLE_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     ce0:	a4 e3       	ldi	r26, 0x34	; 52
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e4 e3       	ldi	r30, 0x34	; 52
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_u8SetPinDirction+0x170>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_u8SetPinDirction+0x16c>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	2d c0       	rjmp	.+90     	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
					}
			break;
			case DIO_U8_PORTD:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	a1 f4       	brne	.+40     	; 0xd38 <DIO_u8SetPinDirction+0x1aa>
			        {
			            SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     d10:	a1 e3       	ldi	r26, 0x31	; 49
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e1 e3       	ldi	r30, 0x31	; 49
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_u8SetPinDirction+0x1a0>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_u8SetPinDirction+0x19c>
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	16 c0       	rjmp	.+44     	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
					{
                 		CLE_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     d38:	a1 e3       	ldi	r26, 0x31	; 49
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e1 e3       	ldi	r30, 0x31	; 49
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_u8SetPinDirction+0x1c8>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <DIO_u8SetPinDirction+0x1c4>
     d5a:	80 95       	com	r24
     d5c:	84 23       	and	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <DIO_u8SetPinDirction+0x1d6>
			break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK; 
     d62:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
}
     d66:	26 96       	adiw	r28, 0x06	; 6
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_u8SetPinValue+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_u8SetPinValue+0x8>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <DIO_u8SetPinValue+0xa>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
     d8a:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErorrState = STD_TYPES_OK;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinValue<=DIO_U8_OUTPUT))
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	08 f0       	brcs	.+2      	; 0xd98 <DIO_u8SetPinValue+0x20>
     d96:	da c0       	rjmp	.+436    	; 0xf4c <DIO_u8SetPinValue+0x1d4>
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	88 30       	cpi	r24, 0x08	; 8
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <DIO_u8SetPinValue+0x28>
     d9e:	d6 c0       	rjmp	.+428    	; 0xf4c <DIO_u8SetPinValue+0x1d4>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	08 f0       	brcs	.+2      	; 0xda8 <DIO_u8SetPinValue+0x30>
     da6:	d2 c0       	rjmp	.+420    	; 0xf4c <DIO_u8SetPinValue+0x1d4>
	{
	  switch(copy_u8PortId)
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3e 83       	std	Y+6, r19	; 0x06
     db0:	2d 83       	std	Y+5, r18	; 0x05
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	91 05       	cpc	r25, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <DIO_u8SetPinValue+0x46>
     dbc:	43 c0       	rjmp	.+134    	; 0xe44 <DIO_u8SetPinValue+0xcc>
     dbe:	2d 81       	ldd	r18, Y+5	; 0x05
     dc0:	3e 81       	ldd	r19, Y+6	; 0x06
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <DIO_u8SetPinValue+0x5a>
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	71 f0       	breq	.+28     	; 0xdec <DIO_u8SetPinValue+0x74>
     dd0:	be c0       	rjmp	.+380    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
     dd2:	2d 81       	ldd	r18, Y+5	; 0x05
     dd4:	3e 81       	ldd	r19, Y+6	; 0x06
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <DIO_u8SetPinValue+0x66>
     ddc:	5f c0       	rjmp	.+190    	; 0xe9c <DIO_u8SetPinValue+0x124>
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <DIO_u8SetPinValue+0x72>
     de8:	85 c0       	rjmp	.+266    	; 0xef4 <DIO_u8SetPinValue+0x17c>
     dea:	b1 c0       	rjmp	.+354    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
	  {
		  case DIO_U8_PORTA:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <DIO_u8SetPinValue+0xa2>
	       	   {
			       SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     df2:	ab e3       	ldi	r26, 0x3B	; 59
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	eb e3       	ldi	r30, 0x3B	; 59
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8SetPinValue+0x98>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_u8SetPinValue+0x94>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	9a c0       	rjmp	.+308    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     e1a:	ab e3       	ldi	r26, 0x3B	; 59
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e3       	ldi	r30, 0x3B	; 59
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_u8SetPinValue+0xc0>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_u8SetPinValue+0xbc>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	85 c0       	rjmp	.+266    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTB:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	a1 f4       	brne	.+40     	; 0xe72 <DIO_u8SetPinValue+0xfa>
	       	   {
			       SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     e4a:	a8 e3       	ldi	r26, 0x38	; 56
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e8 e3       	ldi	r30, 0x38	; 56
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_u8SetPinValue+0xf0>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_u8SetPinValue+0xec>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	6e c0       	rjmp	.+220    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     e72:	a8 e3       	ldi	r26, 0x38	; 56
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e8 e3       	ldi	r30, 0x38	; 56
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_u8SetPinValue+0x118>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_u8SetPinValue+0x114>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	59 c0       	rjmp	.+178    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTC:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	a1 f4       	brne	.+40     	; 0xeca <DIO_u8SetPinValue+0x152>
	       	   {
			       SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
     ea2:	a5 e3       	ldi	r26, 0x35	; 53
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e5 e3       	ldi	r30, 0x35	; 53
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_u8SetPinValue+0x148>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_u8SetPinValue+0x144>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	42 c0       	rjmp	.+132    	; 0xf4e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
     eca:	a5 e3       	ldi	r26, 0x35	; 53
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e5 e3       	ldi	r30, 0x35	; 53
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_u8SetPinValue+0x170>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_u8SetPinValue+0x16c>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	2d c0       	rjmp	.+90     	; 0xf4e <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTD:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	a1 f4       	brne	.+40     	; 0xf22 <DIO_u8SetPinValue+0x1aa>
	       	   {
			       SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
     efa:	a2 e3       	ldi	r26, 0x32	; 50
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e2 e3       	ldi	r30, 0x32	; 50
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8SetPinValue+0x1a0>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8SetPinValue+0x19c>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	16 c0       	rjmp	.+44     	; 0xf4e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
     f22:	a2 e3       	ldi	r26, 0x32	; 50
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e2 e3       	ldi	r30, 0x32	; 50
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_u8SetPinValue+0x1c8>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_u8SetPinValue+0x1c4>
     f44:	80 95       	com	r24
     f46:	84 23       	and	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <DIO_u8SetPinValue+0x1d6>
		  
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK; 
     f4c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     f50:	26 96       	adiw	r28, 0x06	; 6
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue )
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	27 97       	sbiw	r28, 0x07	; 7
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	8a 83       	std	Y+2, r24	; 0x02
     f78:	6b 83       	std	Y+3, r22	; 0x03
     f7a:	5d 83       	std	Y+5, r21	; 0x05
     f7c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7))
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	08 f0       	brcs	.+2      	; 0xf8a <DIO_u8GetPinValue+0x28>
     f88:	75 c0       	rjmp	.+234    	; 0x1074 <DIO_u8GetPinValue+0x112>
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	88 30       	cpi	r24, 0x08	; 8
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <DIO_u8GetPinValue+0x30>
     f90:	71 c0       	rjmp	.+226    	; 0x1074 <DIO_u8GetPinValue+0x112>
	{
	 switch(copy_u8PortId)
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	3f 83       	std	Y+7, r19	; 0x07
     f9a:	2e 83       	std	Y+6, r18	; 0x06
     f9c:	4e 81       	ldd	r20, Y+6	; 0x06
     f9e:	5f 81       	ldd	r21, Y+7	; 0x07
     fa0:	41 30       	cpi	r20, 0x01	; 1
     fa2:	51 05       	cpc	r21, r1
     fa4:	59 f1       	breq	.+86     	; 0xffc <DIO_u8GetPinValue+0x9a>
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	34 f4       	brge	.+12     	; 0xfbc <DIO_u8GetPinValue+0x5a>
     fb0:	2e 81       	ldd	r18, Y+6	; 0x06
     fb2:	3f 81       	ldd	r19, Y+7	; 0x07
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	69 f0       	breq	.+26     	; 0xfd4 <DIO_u8GetPinValue+0x72>
     fba:	5d c0       	rjmp	.+186    	; 0x1076 <DIO_u8GetPinValue+0x114>
     fbc:	4e 81       	ldd	r20, Y+6	; 0x06
     fbe:	5f 81       	ldd	r21, Y+7	; 0x07
     fc0:	42 30       	cpi	r20, 0x02	; 2
     fc2:	51 05       	cpc	r21, r1
     fc4:	79 f1       	breq	.+94     	; 0x1024 <DIO_u8GetPinValue+0xc2>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	91 05       	cpc	r25, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <DIO_u8GetPinValue+0x70>
     fd0:	3d c0       	rjmp	.+122    	; 0x104c <DIO_u8GetPinValue+0xea>
     fd2:	51 c0       	rjmp	.+162    	; 0x1076 <DIO_u8GetPinValue+0x114>
	  {
		 case DIO_U8_PORTA:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
     fd4:	e9 e3       	ldi	r30, 0x39	; 57
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8GetPinValue+0x8a>
     fe8:	55 95       	asr	r21
     fea:	47 95       	ror	r20
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8GetPinValue+0x86>
     ff0:	ca 01       	movw	r24, r20
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	ec 81       	ldd	r30, Y+4	; 0x04
     ff6:	fd 81       	ldd	r31, Y+5	; 0x05
     ff8:	80 83       	st	Z, r24
     ffa:	3d c0       	rjmp	.+122    	; 0x1076 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTB:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
     ffc:	e6 e3       	ldi	r30, 0x36	; 54
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8GetPinValue+0xb2>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8GetPinValue+0xae>
    1018:	ca 01       	movw	r24, r20
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	ec 81       	ldd	r30, Y+4	; 0x04
    101e:	fd 81       	ldd	r31, Y+5	; 0x05
    1020:	80 83       	st	Z, r24
    1022:	29 c0       	rjmp	.+82     	; 0x1076 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTC:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
    1024:	e3 e3       	ldi	r30, 0x33	; 51
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_u8GetPinValue+0xda>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_u8GetPinValue+0xd6>
    1040:	ca 01       	movw	r24, r20
    1042:	81 70       	andi	r24, 0x01	; 1
    1044:	ec 81       	ldd	r30, Y+4	; 0x04
    1046:	fd 81       	ldd	r31, Y+5	; 0x05
    1048:	80 83       	st	Z, r24
    104a:	15 c0       	rjmp	.+42     	; 0x1076 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTD:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
    104c:	e0 e3       	ldi	r30, 0x30	; 48
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a9 01       	movw	r20, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_u8GetPinValue+0x102>
    1060:	55 95       	asr	r21
    1062:	47 95       	ror	r20
    1064:	8a 95       	dec	r24
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_u8GetPinValue+0xfe>
    1068:	ca 01       	movw	r24, r20
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	ec 81       	ldd	r30, Y+4	; 0x04
    106e:	fd 81       	ldd	r31, Y+5	; 0x05
    1070:	80 83       	st	Z, r24
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <DIO_u8GetPinValue+0x114>
		 break;
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1074:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	27 96       	adiw	r28, 0x07	; 7
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <DIO_u8SetPortDirction>:

u8 DIO_u8SetPortDirction(u8 copy_u8PortId,u8 copy_u8PortDirction )
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	2d 97       	sbiw	r28, 0x0d	; 13
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortDirction<=DIO_U8_OUTPUT))
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <DIO_u8SetPortDirction+0x24>
    10ac:	6b c0       	rjmp	.+214    	; 0x1184 <DIO_u8SetPortDirction+0xfa>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <DIO_u8SetPortDirction+0x2c>
    10b4:	67 c0       	rjmp	.+206    	; 0x1184 <DIO_u8SetPortDirction+0xfa>
	{
		switch(copy_u8PortId)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3d 87       	std	Y+13, r19	; 0x0d
    10be:	2c 87       	std	Y+12, r18	; 0x0c
    10c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	39 f1       	breq	.+78     	; 0x1118 <DIO_u8SetPortDirction+0x8e>
    10ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    10cc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <DIO_u8SetPortDirction+0x54>
    10d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <DIO_u8SetPortDirction+0x6a>
    10dc:	54 c0       	rjmp	.+168    	; 0x1186 <DIO_u8SetPortDirction+0xfc>
    10de:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	51 f1       	breq	.+84     	; 0x113c <DIO_u8SetPortDirction+0xb2>
    10e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	b9 f1       	breq	.+110    	; 0x1160 <DIO_u8SetPortDirction+0xd6>
    10f2:	49 c0       	rjmp	.+146    	; 0x1186 <DIO_u8SetPortDirction+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	41 f4       	brne	.+16     	; 0x110a <DIO_u8SetPortDirction+0x80>
			     { 
			     SET_PORT(DIO_U8_DDRA_REG);	
    10fa:	ea e3       	ldi	r30, 0x3A	; 58
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	90 81       	ld	r25, Z
    1100:	ea e3       	ldi	r30, 0x3A	; 58
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	80 83       	st	Z, r24
    1108:	3e c0       	rjmp	.+124    	; 0x1186 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRA_REG);
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	20 81       	ld	r18, Z
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	10 82       	st	Z, r1
    1116:	37 c0       	rjmp	.+110    	; 0x1186 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	41 f4       	brne	.+16     	; 0x112e <DIO_u8SetPortDirction+0xa4>
			     { 
			     SET_PORT(DIO_U8_DDRB_REG);	
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	30 81       	ld	r19, Z
    1124:	e7 e3       	ldi	r30, 0x37	; 55
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	80 83       	st	Z, r24
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRB_REG);
    112e:	e7 e3       	ldi	r30, 0x37	; 55
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	10 82       	st	Z, r1
    113a:	25 c0       	rjmp	.+74     	; 0x1186 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	41 f4       	brne	.+16     	; 0x1152 <DIO_u8SetPortDirction+0xc8>
			     { 
			     SET_PORT(DIO_U8_DDRC_REG);	
    1142:	e4 e3       	ldi	r30, 0x34	; 52
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	90 81       	ld	r25, Z
    1148:	e4 e3       	ldi	r30, 0x34	; 52
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	80 83       	st	Z, r24
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRC_REG);
    1152:	e4 e3       	ldi	r30, 0x34	; 52
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	20 81       	ld	r18, Z
    1158:	e4 e3       	ldi	r30, 0x34	; 52
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	10 82       	st	Z, r1
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	41 f4       	brne	.+16     	; 0x1176 <DIO_u8SetPortDirction+0xec>
			     { 
			     SET_PORT(DIO_U8_DDRD_REG);	
    1166:	e1 e3       	ldi	r30, 0x31	; 49
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	30 81       	ld	r19, Z
    116c:	e1 e3       	ldi	r30, 0x31	; 49
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	80 83       	st	Z, r24
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRD_REG);
    1176:	e1 e3       	ldi	r30, 0x31	; 49
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	10 82       	st	Z, r1
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <DIO_u8SetPortDirction+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1184:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;	
    1186:	89 81       	ldd	r24, Y+1	; 0x01
}
    1188:	2d 96       	adiw	r28, 0x0d	; 13
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	2d 97       	sbiw	r28, 0x0d	; 13
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortValue<=DIO_U8_OUTPUT))
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	08 f0       	brcs	.+2      	; 0x11be <DIO_u8SetPortValue+0x24>
    11bc:	6b c0       	rjmp	.+214    	; 0x1294 <DIO_u8SetPortValue+0xfa>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <DIO_u8SetPortValue+0x2c>
    11c4:	67 c0       	rjmp	.+206    	; 0x1294 <DIO_u8SetPortValue+0xfa>
	{
		switch(copy_u8PortId)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 87       	std	Y+13, r19	; 0x0d
    11ce:	2c 87       	std	Y+12, r18	; 0x0c
    11d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	39 f1       	breq	.+78     	; 0x1228 <DIO_u8SetPortValue+0x8e>
    11da:	2c 85       	ldd	r18, Y+12	; 0x0c
    11dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_u8SetPortValue+0x54>
    11e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_u8SetPortValue+0x6a>
    11ec:	54 c0       	rjmp	.+168    	; 0x1296 <DIO_u8SetPortValue+0xfc>
    11ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	51 f1       	breq	.+84     	; 0x124c <DIO_u8SetPortValue+0xb2>
    11f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	b9 f1       	breq	.+110    	; 0x1270 <DIO_u8SetPortValue+0xd6>
    1202:	49 c0       	rjmp	.+146    	; 0x1296 <DIO_u8SetPortValue+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	41 f4       	brne	.+16     	; 0x121a <DIO_u8SetPortValue+0x80>
			     {
			     SET_PORT(DIO_U8_PORTA_REG);
    120a:	eb e3       	ldi	r30, 0x3B	; 59
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	90 81       	ld	r25, Z
    1210:	eb e3       	ldi	r30, 0x3B	; 59
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	80 83       	st	Z, r24
    1218:	3e c0       	rjmp	.+124    	; 0x1296 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTA_REG);
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	20 81       	ld	r18, Z
    1220:	eb e3       	ldi	r30, 0x3B	; 59
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
    1226:	37 c0       	rjmp	.+110    	; 0x1296 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	41 f4       	brne	.+16     	; 0x123e <DIO_u8SetPortValue+0xa4>
			     { 
			     SET_PORT(DIO_U8_PORTB_REG);
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	30 81       	ld	r19, Z
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	80 83       	st	Z, r24
    123c:	2c c0       	rjmp	.+88     	; 0x1296 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTB_REG);
    123e:	e8 e3       	ldi	r30, 0x38	; 56
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	e8 e3       	ldi	r30, 0x38	; 56
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
    124a:	25 c0       	rjmp	.+74     	; 0x1296 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	41 f4       	brne	.+16     	; 0x1262 <DIO_u8SetPortValue+0xc8>
			     { 
			     SET_PORT(DIO_U8_PORTC_REG);
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	90 81       	ld	r25, Z
    1258:	e5 e3       	ldi	r30, 0x35	; 53
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	80 83       	st	Z, r24
    1260:	1a c0       	rjmp	.+52     	; 0x1296 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTC_REG);
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	20 81       	ld	r18, Z
    1268:	e5 e3       	ldi	r30, 0x35	; 53
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	41 f4       	brne	.+16     	; 0x1286 <DIO_u8SetPortValue+0xec>
			     { 
			     SET_PORT(DIO_U8_PORTD_REG);
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	30 81       	ld	r19, Z
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	80 83       	st	Z, r24
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTD_REG);
    1286:	e2 e3       	ldi	r30, 0x32	; 50
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	10 82       	st	Z, r1
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <DIO_u8SetPortValue+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1294:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
}
    1298:	2d 96       	adiw	r28, 0x0d	; 13
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8PortId, u8 *copy_pu8PortValue)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <DIO_u8GetPortValue+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_u8GetPortValue+0x8>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_u8GetPortValue+0xa>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	7c 83       	std	Y+4, r23	; 0x04
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_U8_PORTD)
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	d8 f5       	brcc	.+118    	; 0x133e <DIO_u8GetPortValue+0x94>
	{
		switch(copy_u8PortId)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3e 83       	std	Y+6, r19	; 0x06
    12d0:	2d 83       	std	Y+5, r18	; 0x05
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	e1 f0       	breq	.+56     	; 0x1314 <DIO_u8GetPortValue+0x6a>
    12dc:	2d 81       	ldd	r18, Y+5	; 0x05
    12de:	3e 81       	ldd	r19, Y+6	; 0x06
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <DIO_u8GetPortValue+0x46>
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	61 f0       	breq	.+24     	; 0x1306 <DIO_u8GetPortValue+0x5c>
    12ee:	28 c0       	rjmp	.+80     	; 0x1340 <DIO_u8GetPortValue+0x96>
    12f0:	2d 81       	ldd	r18, Y+5	; 0x05
    12f2:	3e 81       	ldd	r19, Y+6	; 0x06
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	a1 f0       	breq	.+40     	; 0x1322 <DIO_u8GetPortValue+0x78>
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	b1 f0       	breq	.+44     	; 0x1330 <DIO_u8GetPortValue+0x86>
    1304:	1d c0       	rjmp	.+58     	; 0x1340 <DIO_u8GetPortValue+0x96>
		{
			case DIO_U8_PORTA:
			   
			   *copy_pu8PortValue = GET_PORT(DIO_U8_PORTA_REG);
    1306:	eb e3       	ldi	r30, 0x3B	; 59
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	eb 81       	ldd	r30, Y+3	; 0x03
    130e:	fc 81       	ldd	r31, Y+4	; 0x04
    1310:	80 83       	st	Z, r24
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <DIO_u8GetPortValue+0x96>
			    
     		break;
			case DIO_U8_PORTB:
			    
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTB_REG);
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	eb 81       	ldd	r30, Y+3	; 0x03
    131c:	fc 81       	ldd	r31, Y+4	; 0x04
    131e:	80 83       	st	Z, r24
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <DIO_u8GetPortValue+0x96>
			
     		break;
			case DIO_U8_PORTC:
			     
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTC_REG);
    1322:	e5 e3       	ldi	r30, 0x35	; 53
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	80 83       	st	Z, r24
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <DIO_u8GetPortValue+0x96>
			   
     		break;
			case DIO_U8_PORTD:
			 
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTD_REG);
    1330:	e2 e3       	ldi	r30, 0x32	; 50
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	eb 81       	ldd	r30, Y+3	; 0x03
    1338:	fc 81       	ldd	r31, Y+4	; 0x04
    133a:	80 83       	st	Z, r24
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <DIO_u8GetPortValue+0x96>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    133e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1342:	26 96       	adiw	r28, 0x06	; 6
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <DIO_u8AnalogPort>:
u8 DIO_u8AnalogPort(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <DIO_u8AnalogPort+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_u8AnalogPort+0x8>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	8a 83       	std	Y+2, r24	; 0x02
    1364:	6b 83       	std	Y+3, r22	; 0x03
    u8	Local_u8ErorrState =STD_TYPES_OK;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD)  &&  (copy_u8PortValue<= 0xff))
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	98 f5       	brcc	.+102    	; 0x13d6 <DIO_u8AnalogPort+0x82>
	{
		switch(copy_u8PortId)
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	2c 83       	std	Y+4, r18	; 0x04
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	d1 f0       	breq	.+52     	; 0x13b8 <DIO_u8AnalogPort+0x64>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <DIO_u8AnalogPort+0x44>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	61 f0       	breq	.+24     	; 0x13ae <DIO_u8AnalogPort+0x5a>
    1396:	20 c0       	rjmp	.+64     	; 0x13d8 <DIO_u8AnalogPort+0x84>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <DIO_u8AnalogPort+0x6e>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	81 f0       	breq	.+32     	; 0x13cc <DIO_u8AnalogPort+0x78>
    13ac:	15 c0       	rjmp	.+42     	; 0x13d8 <DIO_u8AnalogPort+0x84>
		{
		case DIO_U8_PORTA:

			DIO_U8_PORTA_REG = copy_u8PortValue;
    13ae:	eb e3       	ldi	r30, 0x3B	; 59
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	80 83       	st	Z, r24
    13b6:	10 c0       	rjmp	.+32     	; 0x13d8 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTB:

			 DIO_U8_PORTB_REG = copy_u8PortValue;
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	80 83       	st	Z, r24
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTC:

			DIO_U8_PORTC_REG = copy_u8PortValue;
    13c2:	e5 e3       	ldi	r30, 0x35	; 53
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	80 83       	st	Z, r24
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTD:

			 DIO_U8_PORTD_REG = copy_u8PortValue;
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	80 83       	st	Z, r24
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <DIO_u8AnalogPort+0x84>
		break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK;
    13d6:	19 82       	std	Y+1, r1	; 0x01
	}
		return Local_u8ErorrState;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <KPD_u8getswitch>:
#include "KPD_config.h" 



u8 KPD_u8getswitch(u8 * copy_pu8returnsw)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	27 97       	sbiw	r28, 0x07	; 7
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	9f 83       	std	Y+7, r25	; 0x07
    1400:	8e 83       	std	Y+6, r24	; 0x06
static u8 local_au8rowspinarr[KPD_U8ROWS_NB]=KPD_ROWS_PINS;
static u8 local_au8colmspinarr[KPD_U8COLM_NB]=KPD_COLM_PINS;
static u8 local_au8keypadvalus[KPD_U8ROWS_NB][KPD_U8COLM_NB]=KPD_KEYS; 
  u8 local_u8pinvalue,local_u8flg=0;
    1402:	1c 82       	std	Y+4, r1	; 0x04
  u8 local_u8returnstate = STD_TYPES_OK;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	8b 83       	std	Y+3, r24	; 0x03
  if(copy_pu8returnsw!=NULL)
    1408:	8e 81       	ldd	r24, Y+6	; 0x06
    140a:	9f 81       	ldd	r25, Y+7	; 0x07
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	09 f4       	brne	.+2      	; 0x1412 <KPD_u8getswitch+0x28>
    1410:	6e c0       	rjmp	.+220    	; 0x14ee <KPD_u8getswitch+0x104>
  {
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
    1412:	ee 81       	ldd	r30, Y+6	; 0x06
    1414:	ff 81       	ldd	r31, Y+7	; 0x07
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	80 83       	st	Z, r24
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
    141a:	1a 82       	std	Y+2, r1	; 0x02
    141c:	63 c0       	rjmp	.+198    	; 0x14e4 <KPD_u8getswitch+0xfa>
	  {
		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_LOW); 
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	fc 01       	movw	r30, r24
    1426:	ef 50       	subi	r30, 0x0F	; 15
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	90 81       	ld	r25, Z
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	69 2f       	mov	r22, r25
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	  /*loop*/
	  for(u8 local_u8colcounter=0;local_u8colcounter<4;local_u8colcounter++)
    1436:	19 82       	std	Y+1, r1	; 0x01
    1438:	3f c0       	rjmp	.+126    	; 0x14b8 <KPD_u8getswitch+0xce>
	  {
		DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	fc 01       	movw	r30, r24
    1442:	e3 51       	subi	r30, 0x13	; 19
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	90 81       	ld	r25, Z
    1448:	9e 01       	movw	r18, r28
    144a:	2b 5f       	subi	r18, 0xFB	; 251
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	69 2f       	mov	r22, r25
    1452:	a9 01       	movw	r20, r18
    1454:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8GetPinValue>
        if(local_u8pinvalue==DIO_U8_LOW)       
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	88 23       	and	r24, r24
    145c:	51 f5       	brne	.+84     	; 0x14b2 <KPD_u8getswitch+0xc8>
		{
			* copy_pu8returnsw =local_au8keypadvalus[local_u8rowcounter][local_u8colcounter];
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	48 2f       	mov	r20, r24
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	ca 01       	movw	r24, r20
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	fc 01       	movw	r30, r24
    147a:	e3 52       	subi	r30, 0x23	; 35
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	ee 81       	ldd	r30, Y+6	; 0x06
    1482:	ff 81       	ldd	r31, Y+7	; 0x07
    1484:	80 83       	st	Z, r24
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <KPD_u8getswitch+0xbc>

	   while(local_u8pinvalue==DIO_U8_LOW)
	   {
	   DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	fc 01       	movw	r30, r24
    1490:	e3 51       	subi	r30, 0x13	; 19
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	90 81       	ld	r25, Z
    1496:	9e 01       	movw	r18, r28
    1498:	2b 5f       	subi	r18, 0xFB	; 251
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	69 2f       	mov	r22, r25
    14a0:	a9 01       	movw	r20, r18
    14a2:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
        if(local_u8pinvalue==DIO_U8_LOW)       
		{
			* copy_pu8returnsw =local_au8keypadvalus[local_u8rowcounter][local_u8colcounter];

	   while(local_u8pinvalue==DIO_U8_LOW)
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	88 23       	and	r24, r24
    14aa:	71 f3       	breq	.-36     	; 0x1488 <KPD_u8getswitch+0x9e>
	   {
	   DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
	   }
	   local_u8flg=1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	8c 83       	std	Y+4, r24	; 0x04
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <KPD_u8getswitch+0xd6>
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
	  {
		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_LOW); 
	  /*loop*/
	  for(u8 local_u8colcounter=0;local_u8colcounter<4;local_u8colcounter++)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	08 f4       	brcc	.+2      	; 0x14c0 <KPD_u8getswitch+0xd6>
    14be:	bd cf       	rjmp	.-134    	; 0x143a <KPD_u8getswitch+0x50>
	   local_u8flg=1;
        break;	   
	}
	   
	  }
	  		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_HIGH);
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	fc 01       	movw	r30, r24
    14c8:	ef 50       	subi	r30, 0x0F	; 15
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	90 81       	ld	r25, Z
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	69 2f       	mov	r22, r25
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
             if(local_u8flg==1)
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	49 f0       	breq	.+18     	; 0x14f0 <KPD_u8getswitch+0x106>
  u8 local_u8pinvalue,local_u8flg=0;
  u8 local_u8returnstate = STD_TYPES_OK;
  if(copy_pu8returnsw!=NULL)
  {
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <KPD_u8getswitch+0x102>
    14ea:	99 cf       	rjmp	.-206    	; 0x141e <KPD_u8getswitch+0x34>
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <KPD_u8getswitch+0x106>
	   }
	  
  }	  
  else
  {
	   local_u8returnstate = STD_TYPES_NOK;
    14ee:	1b 82       	std	Y+3, r1	; 0x03
  
  }
  return local_u8returnstate;
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
}
    14f2:	27 96       	adiw	r28, 0x07	; 7
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <LCD_voidInit>:
#include "LCD_config.h" 



void LCD_voidInit(void)
{
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	c6 54       	subi	r28, 0x46	; 70
    1512:	d0 40       	sbci	r29, 0x00	; 0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	fe 01       	movw	r30, r28
    1520:	ed 5b       	subi	r30, 0xBD	; 189
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	ac e0       	ldi	r26, 0x0C	; 12
    152a:	b2 e4       	ldi	r27, 0x42	; 66
    152c:	80 83       	st	Z, r24
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	a2 83       	std	Z+2, r26	; 0x02
    1532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	8e 01       	movw	r16, r28
    1536:	01 5c       	subi	r16, 0xC1	; 193
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	ed 5b       	subi	r30, 0xBD	; 189
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a ef       	ldi	r20, 0xFA	; 250
    154e:	54 e4       	ldi	r21, 0x44	; 68
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	f8 01       	movw	r30, r16
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1562:	fe 01       	movw	r30, r28
    1564:	ff 96       	adiw	r30, 0x3f	; 63
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <LCD_voidInit+0x84>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9e af       	std	Y+62, r25	; 0x3e
    1584:	8d af       	std	Y+61, r24	; 0x3d
    1586:	46 c0       	rjmp	.+140    	; 0x1614 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    1588:	fe 01       	movw	r30, r28
    158a:	ff 96       	adiw	r30, 0x3f	; 63
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	64 f5       	brge	.+88     	; 0x15fc <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	fe 01       	movw	r30, r28
    15a6:	ed 5b       	subi	r30, 0xBD	; 189
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e af       	std	Y+62, r25	; 0x3e
    15d0:	8d af       	std	Y+61, r24	; 0x3d
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <LCD_voidInit+0xee>
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c af       	std	Y+60, r25	; 0x3c
    15da:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    15de:	9c ad       	ldd	r25, Y+60	; 0x3c
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_voidInit+0xdc>
    15e4:	9c af       	std	Y+60, r25	; 0x3c
    15e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	9e af       	std	Y+62, r25	; 0x3e
    15f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    15f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <LCD_voidInit+0xd0>
    15fa:	16 c0       	rjmp	.+44     	; 0x1628 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	fe 01       	movw	r30, r28
    15fe:	ff 96       	adiw	r30, 0x3f	; 63
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9e af       	std	Y+62, r25	; 0x3e
    1612:	8d af       	std	Y+61, r24	; 0x3d
    1614:	8d ad       	ldd	r24, Y+61	; 0x3d
    1616:	9e ad       	ldd	r25, Y+62	; 0x3e
    1618:	9a af       	std	Y+58, r25	; 0x3a
    161a:	89 af       	std	Y+57, r24	; 0x39
    161c:	89 ad       	ldd	r24, Y+57	; 0x39
    161e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCD_voidInit+0x11c>
    1624:	9a af       	std	Y+58, r25	; 0x3a
    1626:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
#if LCD_U8_MOODE == LCD_U8_8_BIT_MOODE
	LCD_voidSendCmd(0x38);
	_delay_ms(1);
#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(0b0010);
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	0e 94 b5 10 	call	0x216a	; 0x216a <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e8       	ldi	r26, 0x80	; 128
    1652:	bf e3       	ldi	r27, 0x3F	; 63
    1654:	8d ab       	std	Y+53, r24	; 0x35
    1656:	9e ab       	std	Y+54, r25	; 0x36
    1658:	af ab       	std	Y+55, r26	; 0x37
    165a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165c:	6d a9       	ldd	r22, Y+53	; 0x35
    165e:	7e a9       	ldd	r23, Y+54	; 0x36
    1660:	8f a9       	ldd	r24, Y+55	; 0x37
    1662:	98 ad       	ldd	r25, Y+56	; 0x38
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	4a ef       	ldi	r20, 0xFA	; 250
    166a:	54 e4       	ldi	r21, 0x44	; 68
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	89 ab       	std	Y+49, r24	; 0x31
    1676:	9a ab       	std	Y+50, r25	; 0x32
    1678:	ab ab       	std	Y+51, r26	; 0x33
    167a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    167c:	69 a9       	ldd	r22, Y+49	; 0x31
    167e:	7a a9       	ldd	r23, Y+50	; 0x32
    1680:	8b a9       	ldd	r24, Y+51	; 0x33
    1682:	9c a9       	ldd	r25, Y+52	; 0x34
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1690:	88 23       	and	r24, r24
    1692:	2c f4       	brge	.+10     	; 0x169e <LCD_voidInit+0x19a>
		__ticks = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	98 ab       	std	Y+48, r25	; 0x30
    169a:	8f a7       	std	Y+47, r24	; 0x2f
    169c:	3f c0       	rjmp	.+126    	; 0x171c <LCD_voidInit+0x218>
	else if (__tmp > 65535)
    169e:	69 a9       	ldd	r22, Y+49	; 0x31
    16a0:	7a a9       	ldd	r23, Y+50	; 0x32
    16a2:	8b a9       	ldd	r24, Y+51	; 0x33
    16a4:	9c a9       	ldd	r25, Y+52	; 0x34
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	4f e7       	ldi	r20, 0x7F	; 127
    16ac:	57 e4       	ldi	r21, 0x47	; 71
    16ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b2:	18 16       	cp	r1, r24
    16b4:	4c f5       	brge	.+82     	; 0x1708 <LCD_voidInit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b6:	6d a9       	ldd	r22, Y+53	; 0x35
    16b8:	7e a9       	ldd	r23, Y+54	; 0x36
    16ba:	8f a9       	ldd	r24, Y+55	; 0x37
    16bc:	98 ad       	ldd	r25, Y+56	; 0x38
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e2       	ldi	r20, 0x20	; 32
    16c4:	51 e4       	ldi	r21, 0x41	; 65
    16c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	98 ab       	std	Y+48, r25	; 0x30
    16dc:	8f a7       	std	Y+47, r24	; 0x2f
    16de:	0f c0       	rjmp	.+30     	; 0x16fe <LCD_voidInit+0x1fa>
    16e0:	88 ec       	ldi	r24, 0xC8	; 200
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9e a7       	std	Y+46, r25	; 0x2e
    16e6:	8d a7       	std	Y+45, r24	; 0x2d
    16e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    16ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_voidInit+0x1e8>
    16f0:	9e a7       	std	Y+46, r25	; 0x2e
    16f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f6:	98 a9       	ldd	r25, Y+48	; 0x30
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	98 ab       	std	Y+48, r25	; 0x30
    16fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1700:	98 a9       	ldd	r25, Y+48	; 0x30
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	69 f7       	brne	.-38     	; 0x16e0 <LCD_voidInit+0x1dc>
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <LCD_voidInit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1708:	69 a9       	ldd	r22, Y+49	; 0x31
    170a:	7a a9       	ldd	r23, Y+50	; 0x32
    170c:	8b a9       	ldd	r24, Y+51	; 0x33
    170e:	9c a9       	ldd	r25, Y+52	; 0x34
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	98 ab       	std	Y+48, r25	; 0x30
    171a:	8f a7       	std	Y+47, r24	; 0x2f
    171c:	8f a5       	ldd	r24, Y+47	; 0x2f
    171e:	98 a9       	ldd	r25, Y+48	; 0x30
    1720:	9c a7       	std	Y+44, r25	; 0x2c
    1722:	8b a7       	std	Y+43, r24	; 0x2b
    1724:	8b a5       	ldd	r24, Y+43	; 0x2b
    1726:	9c a5       	ldd	r25, Y+44	; 0x2c
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <LCD_voidInit+0x224>
    172c:	9c a7       	std	Y+44, r25	; 0x2c
    172e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	62 e0       	ldi	r22, 0x02	; 2
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	LCD_voidSendCmd(0b00101000);
    173a:	88 e2       	ldi	r24, 0x28	; 40
    173c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
#endif
	LCD_voidSendCmd(LCD_CURSOR_OFF);
    1740:	8c e0       	ldi	r24, 0x0C	; 12
    1742:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 e8       	ldi	r26, 0x80	; 128
    174c:	bf e3       	ldi	r27, 0x3F	; 63
    174e:	8f a3       	std	Y+39, r24	; 0x27
    1750:	98 a7       	std	Y+40, r25	; 0x28
    1752:	a9 a7       	std	Y+41, r26	; 0x29
    1754:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	6f a1       	ldd	r22, Y+39	; 0x27
    1758:	78 a5       	ldd	r23, Y+40	; 0x28
    175a:	89 a5       	ldd	r24, Y+41	; 0x29
    175c:	9a a5       	ldd	r25, Y+42	; 0x2a
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a ef       	ldi	r20, 0xFA	; 250
    1764:	54 e4       	ldi	r21, 0x44	; 68
    1766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8b a3       	std	Y+35, r24	; 0x23
    1770:	9c a3       	std	Y+36, r25	; 0x24
    1772:	ad a3       	std	Y+37, r26	; 0x25
    1774:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1776:	6b a1       	ldd	r22, Y+35	; 0x23
    1778:	7c a1       	ldd	r23, Y+36	; 0x24
    177a:	8d a1       	ldd	r24, Y+37	; 0x25
    177c:	9e a1       	ldd	r25, Y+38	; 0x26
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <LCD_voidInit+0x294>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9a a3       	std	Y+34, r25	; 0x22
    1794:	89 a3       	std	Y+33, r24	; 0x21
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <LCD_voidInit+0x312>
	else if (__tmp > 65535)
    1798:	6b a1       	ldd	r22, Y+35	; 0x23
    179a:	7c a1       	ldd	r23, Y+36	; 0x24
    179c:	8d a1       	ldd	r24, Y+37	; 0x25
    179e:	9e a1       	ldd	r25, Y+38	; 0x26
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <LCD_voidInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	6f a1       	ldd	r22, Y+39	; 0x27
    17b2:	78 a5       	ldd	r23, Y+40	; 0x28
    17b4:	89 a5       	ldd	r24, Y+41	; 0x29
    17b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9a a3       	std	Y+34, r25	; 0x22
    17d6:	89 a3       	std	Y+33, r24	; 0x21
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <LCD_voidInit+0x2f4>
    17da:	88 ec       	ldi	r24, 0xC8	; 200
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	98 a3       	std	Y+32, r25	; 0x20
    17e0:	8f 8f       	std	Y+31, r24	; 0x1f
    17e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e4:	98 a1       	ldd	r25, Y+32	; 0x20
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_voidInit+0x2e2>
    17ea:	98 a3       	std	Y+32, r25	; 0x20
    17ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	89 a1       	ldd	r24, Y+33	; 0x21
    17fa:	9a a1       	ldd	r25, Y+34	; 0x22
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <LCD_voidInit+0x2d6>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <LCD_voidInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	6b a1       	ldd	r22, Y+35	; 0x23
    1804:	7c a1       	ldd	r23, Y+36	; 0x24
    1806:	8d a1       	ldd	r24, Y+37	; 0x25
    1808:	9e a1       	ldd	r25, Y+38	; 0x26
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9a a3       	std	Y+34, r25	; 0x22
    1814:	89 a3       	std	Y+33, r24	; 0x21
    1816:	89 a1       	ldd	r24, Y+33	; 0x21
    1818:	9a a1       	ldd	r25, Y+34	; 0x22
    181a:	9e 8f       	std	Y+30, r25	; 0x1e
    181c:	8d 8f       	std	Y+29, r24	; 0x1d
    181e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1820:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_voidInit+0x31e>
    1826:	9e 8f       	std	Y+30, r25	; 0x1e
    1828:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCmd(LCD_CLEAR);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e4       	ldi	r27, 0x40	; 64
    1838:	89 8f       	std	Y+25, r24	; 0x19
    183a:	9a 8f       	std	Y+26, r25	; 0x1a
    183c:	ab 8f       	std	Y+27, r26	; 0x1b
    183e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1840:	69 8d       	ldd	r22, Y+25	; 0x19
    1842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	4a ef       	ldi	r20, 0xFA	; 250
    184e:	54 e4       	ldi	r21, 0x44	; 68
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	8d 8b       	std	Y+21, r24	; 0x15
    185a:	9e 8b       	std	Y+22, r25	; 0x16
    185c:	af 8b       	std	Y+23, r26	; 0x17
    185e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1860:	6d 89       	ldd	r22, Y+21	; 0x15
    1862:	7e 89       	ldd	r23, Y+22	; 0x16
    1864:	8f 89       	ldd	r24, Y+23	; 0x17
    1866:	98 8d       	ldd	r25, Y+24	; 0x18
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e8       	ldi	r20, 0x80	; 128
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <LCD_voidInit+0x37e>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9c 8b       	std	Y+20, r25	; 0x14
    187e:	8b 8b       	std	Y+19, r24	; 0x13
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <LCD_voidInit+0x3fc>
	else if (__tmp > 65535)
    1882:	6d 89       	ldd	r22, Y+21	; 0x15
    1884:	7e 89       	ldd	r23, Y+22	; 0x16
    1886:	8f 89       	ldd	r24, Y+23	; 0x17
    1888:	98 8d       	ldd	r25, Y+24	; 0x18
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	4c f5       	brge	.+82     	; 0x18ec <LCD_voidInit+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	69 8d       	ldd	r22, Y+25	; 0x19
    189c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e2       	ldi	r20, 0x20	; 32
    18a8:	51 e4       	ldi	r21, 0x41	; 65
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <LCD_voidInit+0x3de>
    18c4:	88 ec       	ldi	r24, 0xC8	; 200
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9a 8b       	std	Y+18, r25	; 0x12
    18ca:	89 8b       	std	Y+17, r24	; 0x11
    18cc:	89 89       	ldd	r24, Y+17	; 0x11
    18ce:	9a 89       	ldd	r25, Y+18	; 0x12
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <LCD_voidInit+0x3cc>
    18d4:	9a 8b       	std	Y+18, r25	; 0x12
    18d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8b 89       	ldd	r24, Y+19	; 0x13
    18da:	9c 89       	ldd	r25, Y+20	; 0x14
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9c 8b       	std	Y+20, r25	; 0x14
    18e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8b 89       	ldd	r24, Y+19	; 0x13
    18e4:	9c 89       	ldd	r25, Y+20	; 0x14
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <LCD_voidInit+0x3c0>
    18ea:	14 c0       	rjmp	.+40     	; 0x1914 <LCD_voidInit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	6d 89       	ldd	r22, Y+21	; 0x15
    18ee:	7e 89       	ldd	r23, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9c 8b       	std	Y+20, r25	; 0x14
    18fe:	8b 8b       	std	Y+19, r24	; 0x13
    1900:	8b 89       	ldd	r24, Y+19	; 0x13
    1902:	9c 89       	ldd	r25, Y+20	; 0x14
    1904:	98 8b       	std	Y+16, r25	; 0x10
    1906:	8f 87       	std	Y+15, r24	; 0x0f
    1908:	8f 85       	ldd	r24, Y+15	; 0x0f
    190a:	98 89       	ldd	r25, Y+16	; 0x10
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <LCD_voidInit+0x408>
    1910:	98 8b       	std	Y+16, r25	; 0x10
    1912:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCmd(0x06);
    1914:	86 e0       	ldi	r24, 0x06	; 6
    1916:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e8       	ldi	r26, 0x80	; 128
    1920:	bf e3       	ldi	r27, 0x3F	; 63
    1922:	8b 87       	std	Y+11, r24	; 0x0b
    1924:	9c 87       	std	Y+12, r25	; 0x0c
    1926:	ad 87       	std	Y+13, r26	; 0x0d
    1928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	6b 85       	ldd	r22, Y+11	; 0x0b
    192c:	7c 85       	ldd	r23, Y+12	; 0x0c
    192e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1930:	9e 85       	ldd	r25, Y+14	; 0x0e
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a ef       	ldi	r20, 0xFA	; 250
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8f 83       	std	Y+7, r24	; 0x07
    1944:	98 87       	std	Y+8, r25	; 0x08
    1946:	a9 87       	std	Y+9, r26	; 0x09
    1948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <LCD_voidInit+0x468>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <LCD_voidInit+0x4e6>
	else if (__tmp > 65535)
    196c:	6f 81       	ldd	r22, Y+7	; 0x07
    196e:	78 85       	ldd	r23, Y+8	; 0x08
    1970:	89 85       	ldd	r24, Y+9	; 0x09
    1972:	9a 85       	ldd	r25, Y+10	; 0x0a
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <LCD_voidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	6b 85       	ldd	r22, Y+11	; 0x0b
    1986:	7c 85       	ldd	r23, Y+12	; 0x0c
    1988:	8d 85       	ldd	r24, Y+13	; 0x0d
    198a:	9e 85       	ldd	r25, Y+14	; 0x0e
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <LCD_voidInit+0x4c8>
    19ae:	88 ec       	ldi	r24, 0xC8	; 200
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_voidInit+0x4b6>
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <LCD_voidInit+0x4aa>
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <LCD_voidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	6f 81       	ldd	r22, Y+7	; 0x07
    19d8:	78 85       	ldd	r23, Y+8	; 0x08
    19da:	89 85       	ldd	r24, Y+9	; 0x09
    19dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_voidInit+0x4f2>
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	

}
    19fe:	ca 5b       	subi	r28, 0xBA	; 186
    1a00:	df 4f       	sbci	r29, 0xFF	; 255
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8cmnd)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	6d 97       	sbiw	r28, 0x1d	; 29
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd>>4);
    1a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a42:	82 95       	swap	r24
    1a44:	8f 70       	andi	r24, 0x0F	; 15
    1a46:	0e 94 b5 10 	call	0x216a	; 0x216a <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a0 e8       	ldi	r26, 0x80	; 128
    1a5a:	bf e3       	ldi	r27, 0x3F	; 63
    1a5c:	89 8f       	std	Y+25, r24	; 0x19
    1a5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a60:	ab 8f       	std	Y+27, r26	; 0x1b
    1a62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	69 8d       	ldd	r22, Y+25	; 0x19
    1a66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	4a ef       	ldi	r20, 0xFA	; 250
    1a72:	54 e4       	ldi	r21, 0x44	; 68
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8d 8b       	std	Y+21, r24	; 0x15
    1a7e:	9e 8b       	std	Y+22, r25	; 0x16
    1a80:	af 8b       	std	Y+23, r26	; 0x17
    1a82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a84:	6d 89       	ldd	r22, Y+21	; 0x15
    1a86:	7e 89       	ldd	r23, Y+22	; 0x16
    1a88:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <LCD_voidSendCmd+0x90>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <LCD_voidSendCmd+0x10e>
	else if (__tmp > 65535)
    1aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	57 e4       	ldi	r21, 0x47	; 71
    1ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aba:	18 16       	cp	r1, r24
    1abc:	4c f5       	brge	.+82     	; 0x1b10 <LCD_voidSendCmd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9c 8b       	std	Y+20, r25	; 0x14
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <LCD_voidSendCmd+0xf0>
    1ae8:	88 ec       	ldi	r24, 0xC8	; 200
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9a 8b       	std	Y+18, r25	; 0x12
    1aee:	89 8b       	std	Y+17, r24	; 0x11
    1af0:	89 89       	ldd	r24, Y+17	; 0x11
    1af2:	9a 89       	ldd	r25, Y+18	; 0x12
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <LCD_voidSendCmd+0xde>
    1af8:	9a 8b       	std	Y+18, r25	; 0x12
    1afa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	8b 89       	ldd	r24, Y+19	; 0x13
    1afe:	9c 89       	ldd	r25, Y+20	; 0x14
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	9c 8b       	std	Y+20, r25	; 0x14
    1b04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	8b 89       	ldd	r24, Y+19	; 0x13
    1b08:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <LCD_voidSendCmd+0xd2>
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <LCD_voidSendCmd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	6d 89       	ldd	r22, Y+21	; 0x15
    1b12:	7e 89       	ldd	r23, Y+22	; 0x16
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
    1b24:	8b 89       	ldd	r24, Y+19	; 0x13
    1b26:	9c 89       	ldd	r25, Y+20	; 0x14
    1b28:	98 8b       	std	Y+16, r25	; 0x10
    1b2a:	8f 87       	std	Y+15, r24	; 0x0f
    1b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2e:	98 89       	ldd	r25, Y+16	; 0x10
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_voidSendCmd+0x11a>
    1b34:	98 8b       	std	Y+16, r25	; 0x10
    1b36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd);
    1b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b44:	0e 94 b5 10 	call	0x216a	; 0x216a <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e8       	ldi	r26, 0x80	; 128
    1b58:	bf e3       	ldi	r27, 0x3F	; 63
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <LCD_voidSendCmd+0x18e>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <LCD_voidSendCmd+0x20c>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <LCD_voidSendCmd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <LCD_voidSendCmd+0x1ee>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_voidSendCmd+0x1dc>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <LCD_voidSendCmd+0x1d0>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <LCD_voidSendCmd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_voidSendCmd+0x218>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>


#endif

}
    1c40:	6d 96       	adiw	r28, 0x1d	; 29
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LCD_voidSendChar>:
void LCD_voidSendChar(u8 copy_u8data)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	6d 97       	sbiw	r28, 0x1d	; 29
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_HIGH);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data>>4);
    1c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c7e:	82 95       	swap	r24
    1c80:	8f 70       	andi	r24, 0x0F	; 15
    1c82:	0e 94 b5 10 	call	0x216a	; 0x216a <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e8       	ldi	r26, 0x80	; 128
    1c96:	bf e3       	ldi	r27, 0x3F	; 63
    1c98:	89 8f       	std	Y+25, r24	; 0x19
    1c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a ef       	ldi	r20, 0xFA	; 250
    1cae:	54 e4       	ldi	r21, 0x44	; 68
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8d 8b       	std	Y+21, r24	; 0x15
    1cba:	9e 8b       	std	Y+22, r25	; 0x16
    1cbc:	af 8b       	std	Y+23, r26	; 0x17
    1cbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <LCD_voidSendChar+0x90>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <LCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <LCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <LCD_voidSendChar+0xf0>
    1d24:	88 ec       	ldi	r24, 0xC8	; 200
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	89 89       	ldd	r24, Y+17	; 0x11
    1d2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_voidSendChar+0xde>
    1d34:	9a 8b       	std	Y+18, r25	; 0x12
    1d36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <LCD_voidSendChar+0xd2>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <LCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	98 89       	ldd	r25, Y+16	; 0x10
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_voidSendChar+0x11a>
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	62 e0       	ldi	r22, 0x02	; 2
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data);
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	0e 94 b5 10 	call	0x216a	; 0x216a <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	62 e0       	ldi	r22, 0x02	; 2
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	8b 87       	std	Y+11, r24	; 0x0b
    1d98:	9c 87       	std	Y+12, r25	; 0x0c
    1d9a:	ad 87       	std	Y+13, r26	; 0x0d
    1d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a ef       	ldi	r20, 0xFA	; 250
    1dac:	54 e4       	ldi	r21, 0x44	; 68
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8f 83       	std	Y+7, r24	; 0x07
    1db8:	98 87       	std	Y+8, r25	; 0x08
    1dba:	a9 87       	std	Y+9, r26	; 0x09
    1dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <LCD_voidSendChar+0x18e>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <LCD_voidSendChar+0x20c>
	else if (__tmp > 65535)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <LCD_voidSendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <LCD_voidSendChar+0x1ee>
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_voidSendChar+0x1dc>
    1e32:	9c 83       	std	Y+4, r25	; 0x04
    1e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <LCD_voidSendChar+0x1d0>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <LCD_voidSendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_voidSendChar+0x218>
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
#endif
}
    1e7c:	6d 96       	adiw	r28, 0x1d	; 29
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <LCD_VoidSendStr>:


void LCD_VoidSendStr(u8 * pu8_copystr)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <LCD_VoidSendStr+0x6>
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	9b 83       	std	Y+3, r25	; 0x03
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    1e9e:	19 82       	std	Y+1, r1	; 0x01
    1ea0:	0e c0       	rjmp	.+28     	; 0x1ebe <LCD_VoidSendStr+0x30>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	80 81       	ld	r24, Z
    1eb4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
void LCD_VoidSendStr(u8 * pu8_copystr)
{
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 23       	and	r24, r24
    1ed2:	39 f7       	brne	.-50     	; 0x1ea2 <LCD_VoidSendStr+0x14>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
		}
   }
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <LCD_voidSendNumber>:


void LCD_voidSendNumber(u32 copy_u32data)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	2f 97       	sbiw	r28, 0x0f	; 15
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	9f 87       	std	Y+15, r25	; 0x0f
    1ef6:	8e 87       	std	Y+14, r24	; 0x0e
	u8	Local_reminder,Localarr_u8rem[MAX_ELEMENT];
    s32 Local_u8loop;

	   for(Local_u8loop=0;copy_u32data!=0;Local_u8loop++)
    1ef8:	1a 82       	std	Y+2, r1	; 0x02
    1efa:	19 82       	std	Y+1, r1	; 0x01
    1efc:	21 c0       	rjmp	.+66     	; 0x1f40 <LCD_voidSendNumber+0x60>
	{
		Local_reminder =((copy_u32data % DIV_NUM)+ZERO_DECIMAL);
    1efe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f00:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	b9 01       	movw	r22, r18
    1f08:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__udivmodhi4>
    1f0c:	80 5d       	subi	r24, 0xD0	; 208
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		Localarr_u8rem[Local_u8loop]=Local_reminder;
    1f10:	29 81       	ldd	r18, Y+1	; 0x01
    1f12:	3a 81       	ldd	r19, Y+2	; 0x02
    1f14:	ce 01       	movw	r24, r28
    1f16:	04 96       	adiw	r24, 0x04	; 4
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e2 0f       	add	r30, r18
    1f1c:	f3 1f       	adc	r31, r19
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	80 83       	st	Z, r24
		copy_u32data= copy_u32data/10;
    1f22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f26:	2a e0       	ldi	r18, 0x0A	; 10
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__udivmodhi4>
    1f30:	cb 01       	movw	r24, r22
    1f32:	9f 87       	std	Y+15, r25	; 0x0f
    1f34:	8e 87       	std	Y+14, r24	; 0x0e
void LCD_voidSendNumber(u32 copy_u32data)
{
	u8	Local_reminder,Localarr_u8rem[MAX_ELEMENT];
    s32 Local_u8loop;

	   for(Local_u8loop=0;copy_u32data!=0;Local_u8loop++)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	d9 f6       	brne	.-74     	; 0x1efe <LCD_voidSendNumber+0x1e>
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <LCD_voidSendNumber+0x88>
		Localarr_u8rem[Local_u8loop]=Local_reminder;
		copy_u32data= copy_u32data/10;
	}
		       for(Local_u8loop-1;Local_u8loop>=0;Local_u8loop--)
         		{
		   		LCD_voidSendChar(Localarr_u8rem[Local_u8loop]);
    1f4a:	29 81       	ldd	r18, Y+1	; 0x01
    1f4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f4e:	ce 01       	movw	r24, r28
    1f50:	04 96       	adiw	r24, 0x04	; 4
    1f52:	fc 01       	movw	r30, r24
    1f54:	e2 0f       	add	r30, r18
    1f56:	f3 1f       	adc	r31, r19
    1f58:	80 81       	ld	r24, Z
    1f5a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
	{
		Local_reminder =((copy_u32data % DIV_NUM)+ZERO_DECIMAL);
		Localarr_u8rem[Local_u8loop]=Local_reminder;
		copy_u32data= copy_u32data/10;
	}
		       for(Local_u8loop-1;Local_u8loop>=0;Local_u8loop--)
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	99 23       	and	r25, r25
    1f6e:	6c f7       	brge	.-38     	; 0x1f4a <LCD_voidSendNumber+0x6a>
         		{
		   		LCD_voidSendChar(Localarr_u8rem[Local_u8loop]);
         		}

}
    1f70:	2f 96       	adiw	r28, 0x0f	; 15
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <LCD_voidGotoXY>:
void LCD_voidGotoXY(u8 copy_u8line,u8 copy_u8pos)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <LCD_voidGotoXY+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <LCD_voidGotoXY+0x8>
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	6a 83       	std	Y+2, r22	; 0x02

	if((copy_u8line==LCD_LINE2) || (copy_u8line==LCD_LINE1) && copy_u8pos < 16 )
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	82 30       	cpi	r24, 0x02	; 2
    1f96:	31 f0       	breq	.+12     	; 0x1fa4 <LCD_voidGotoXY+0x22>
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	e1 f4       	brne	.+56     	; 0x1fd6 <LCD_voidGotoXY+0x54>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	80 31       	cpi	r24, 0x10	; 16
    1fa2:	c8 f4       	brcc	.+50     	; 0x1fd6 <LCD_voidGotoXY+0x54>
	{
		switch(copy_u8line)
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	3c 83       	std	Y+4, r19	; 0x04
    1fac:	2b 83       	std	Y+3, r18	; 0x03
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	31 f0       	breq	.+12     	; 0x1fc4 <LCD_voidGotoXY+0x42>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	31 f0       	breq	.+12     	; 0x1fce <LCD_voidGotoXY+0x4c>
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <LCD_voidGotoXY+0x54>
		{
		case(LCD_LINE1):
		     LCD_voidSendCmd(LCD_CURSOR_LINE1+copy_u8pos);
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	80 58       	subi	r24, 0x80	; 128
    1fc8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <LCD_voidGotoXY+0x54>
		break;

		case(LCD_LINE2):
			LCD_voidSendCmd(LCD_CURSOR_LINE2+copy_u8pos);
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	80 54       	subi	r24, 0x40	; 64
    1fd2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
		break;
		}
	}
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <LCD_Clear>:
void LCD_Clear(void)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	2e 97       	sbiw	r28, 0x0e	; 14
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR);
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e8       	ldi	r26, 0x80	; 128
    2004:	bf e3       	ldi	r27, 0x3F	; 63
    2006:	8b 87       	std	Y+11, r24	; 0x0b
    2008:	9c 87       	std	Y+12, r25	; 0x0c
    200a:	ad 87       	std	Y+13, r26	; 0x0d
    200c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a ef       	ldi	r20, 0xFA	; 250
    201c:	54 e4       	ldi	r21, 0x44	; 68
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8f 83       	std	Y+7, r24	; 0x07
    2028:	98 87       	std	Y+8, r25	; 0x08
    202a:	a9 87       	std	Y+9, r26	; 0x09
    202c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	2c f4       	brge	.+10     	; 0x2050 <LCD_Clear+0x6c>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	4c f5       	brge	.+82     	; 0x20ba <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <LCD_Clear+0xcc>
    2092:	88 ec       	ldi	r24, 0xC8	; 200
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_Clear+0xba>
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <LCD_Clear+0xae>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <LCD_Clear+0xf6>
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20e2:	2e 96       	adiw	r28, 0x0e	; 14
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <LCD_voidsendPatern>:

void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <LCD_voidsendPatern+0x6>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <LCD_voidsendPatern+0x8>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <LCD_voidsendPatern+0xa>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9b 83       	std	Y+3, r25	; 0x03
    2104:	8a 83       	std	Y+2, r24	; 0x02
    2106:	6c 83       	std	Y+4, r22	; 0x04
    2108:	4d 83       	std	Y+5, r20	; 0x05
    210a:	2e 83       	std	Y+6, r18	; 0x06
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	08 96       	adiw	r24, 0x08	; 8
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_voidSendCmd>
	for(i=0;i<=ENTRY_ARRAY;i++)
    2124:	19 82       	std	Y+1, r1	; 0x01
    2126:	0e c0       	rjmp	.+28     	; 0x2144 <LCD_voidsendPatern+0x50>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	9b 81       	ldd	r25, Y+3	; 0x03
    2132:	fc 01       	movw	r30, r24
    2134:	e2 0f       	add	r30, r18
    2136:	f3 1f       	adc	r31, r19
    2138:	80 81       	ld	r24, Z
    213a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
	for(i=0;i<=ENTRY_ARRAY;i++)
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	8f 5f       	subi	r24, 0xFF	; 255
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	78 f3       	brcs	.-34     	; 0x2128 <LCD_voidsendPatern+0x34>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
	}
	LCD_voidGotoXY(copy_u8row,copy_u8col);
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	6e 81       	ldd	r22, Y+6	; 0x06
    214e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
	LCD_voidSendChar(copy_u8location);
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>


}
    2158:	26 96       	adiw	r28, 0x06	; 6
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <Private_voidwriteHalfPort>:

#if LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
static void Private_voidwriteHalfPort(u8 copy_u8value)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <Private_voidwriteHalfPort+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	8a 83       	std	Y+2, r24	; 0x02
	u8 get_bit;

        get_bit =GET_BIT(copy_u8value,0);
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	81 70       	andi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D4_PORT,LCD_U8_D4_PIN,get_bit);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	63 e0       	ldi	r22, 0x03	; 3
    2180:	49 81       	ldd	r20, Y+1	; 0x01
    2182:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,1);
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	86 95       	lsr	r24
    218a:	81 70       	andi	r24, 0x01	; 1
    218c:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D5_PORT,LCD_U8_D5_PIN,get_bit);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	64 e0       	ldi	r22, 0x04	; 4
    2192:	49 81       	ldd	r20, Y+1	; 0x01
    2194:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,2);
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	86 95       	lsr	r24
    219c:	86 95       	lsr	r24
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D6_PORT,LCD_U8_D6_PIN,get_bit);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	65 e0       	ldi	r22, 0x05	; 5
    21a6:	49 81       	ldd	r20, Y+1	; 0x01
    21a8:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,3);
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	86 95       	lsr	r24
    21b0:	86 95       	lsr	r24
    21b2:	86 95       	lsr	r24
    21b4:	81 70       	andi	r24, 0x01	; 1
    21b6:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(LCD_U8_D7_PORT,LCD_U8_D7_PIN,get_bit);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	66 e0       	ldi	r22, 0x06	; 6
    21bc:	49 81       	ldd	r20, Y+1	; 0x01
    21be:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>

}
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <STEPPER_MOTOR_voiddrive>:
#include  "STEPPER_MOTOR_private.h"
#include  "STEPPER_MOTOR_config.h"
#include  "STEPPER_MOTOR_interfac.h"

void STEPPER_MOTOR_voiddrive(u16 copy_u16degree,u8 copy_u8direction)
{
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	c6 57       	subi	r28, 0x76	; 118
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	fe 01       	movw	r30, r28
    21e8:	ec 58       	subi	r30, 0x8C	; 140
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	fe 01       	movw	r30, r28
    21f2:	ea 58       	subi	r30, 0x8A	; 138
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 83       	st	Z, r22
  
  
}
else if (STEPER_MOTOR_PIN_COM ==GROUND)
{
if(copy_u8direction == CLOCK_WISE )
    21f8:	fe 01       	movw	r30, r28
    21fa:	ea 58       	subi	r30, 0x8A	; 138
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	09 f0       	breq	.+2      	; 0x2206 <STEPPER_MOTOR_voiddrive+0x3a>
    2204:	08 c3       	rjmp	.+1552   	; 0x2816 <STEPPER_MOTOR_voiddrive+0x64a>
  {
	 for(i=0;i<local_u8nof_iteration;i++)
    2206:	fe 01       	movw	r30, r28
    2208:	ee 58       	subi	r30, 0x8E	; 142
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	10 82       	st	Z, r1
    220e:	f7 c2       	rjmp	.+1518   	; 0x27fe <STEPPER_MOTOR_voiddrive+0x632>
	 {		 
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_HIGH);
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	62 e0       	ldi	r22, 0x02	; 2
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_LOW); 
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	63 e0       	ldi	r22, 0x03	; 3
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_LOW); 
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	64 e0       	ldi	r22, 0x04	; 4
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_LOW); 
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	65 e0       	ldi	r22, 0x05	; 5
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    2238:	fe 01       	movw	r30, r28
    223a:	e3 59       	subi	r30, 0x93	; 147
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e2       	ldi	r26, 0x20	; 32
    2244:	b1 e4       	ldi	r27, 0x41	; 65
    2246:	80 83       	st	Z, r24
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	a2 83       	std	Z+2, r26	; 0x02
    224c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	8e 01       	movw	r16, r28
    2250:	07 59       	subi	r16, 0x97	; 151
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
    2254:	fe 01       	movw	r30, r28
    2256:	e3 59       	subi	r30, 0x93	; 147
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a ef       	ldi	r20, 0xFA	; 250
    2268:	54 e4       	ldi	r21, 0x44	; 68
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	f8 01       	movw	r30, r16
    2274:	80 83       	st	Z, r24
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	a2 83       	std	Z+2, r26	; 0x02
    227a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    227c:	fe 01       	movw	r30, r28
    227e:	e7 59       	subi	r30, 0x97	; 151
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	44 f4       	brge	.+16     	; 0x22aa <STEPPER_MOTOR_voiddrive+0xde>
		__ticks = 1;
    229a:	fe 01       	movw	r30, r28
    229c:	e9 59       	subi	r30, 0x99	; 153
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	64 c0       	rjmp	.+200    	; 0x2372 <STEPPER_MOTOR_voiddrive+0x1a6>
	else if (__tmp > 65535)
    22aa:	fe 01       	movw	r30, r28
    22ac:	e7 59       	subi	r30, 0x97	; 151
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	0c f0       	brlt	.+2      	; 0x22ca <STEPPER_MOTOR_voiddrive+0xfe>
    22c8:	43 c0       	rjmp	.+134    	; 0x2350 <STEPPER_MOTOR_voiddrive+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	fe 01       	movw	r30, r28
    22cc:	e3 59       	subi	r30, 0x93	; 147
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8e 01       	movw	r16, r28
    22ea:	09 59       	subi	r16, 0x99	; 153
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	f8 01       	movw	r30, r16
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	80 83       	st	Z, r24
    2300:	1f c0       	rjmp	.+62     	; 0x2340 <STEPPER_MOTOR_voiddrive+0x174>
    2302:	fe 01       	movw	r30, r28
    2304:	eb 59       	subi	r30, 0x9B	; 155
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	88 ec       	ldi	r24, 0xC8	; 200
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	fe 01       	movw	r30, r28
    2312:	eb 59       	subi	r30, 0x9B	; 155
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <STEPPER_MOTOR_voiddrive+0x14e>
    231e:	fe 01       	movw	r30, r28
    2320:	eb 59       	subi	r30, 0x9B	; 155
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	de 01       	movw	r26, r28
    232a:	a9 59       	subi	r26, 0x99	; 153
    232c:	bf 4f       	sbci	r27, 0xFF	; 255
    232e:	fe 01       	movw	r30, r28
    2330:	e9 59       	subi	r30, 0x99	; 153
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	11 96       	adiw	r26, 0x01	; 1
    233c:	9c 93       	st	X, r25
    233e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	fe 01       	movw	r30, r28
    2342:	e9 59       	subi	r30, 0x99	; 153
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	d1 f6       	brne	.-76     	; 0x2302 <STEPPER_MOTOR_voiddrive+0x136>
    234e:	27 c0       	rjmp	.+78     	; 0x239e <STEPPER_MOTOR_voiddrive+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	8e 01       	movw	r16, r28
    2352:	09 59       	subi	r16, 0x99	; 153
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    2356:	fe 01       	movw	r30, r28
    2358:	e7 59       	subi	r30, 0x97	; 151
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	f8 01       	movw	r30, r16
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	de 01       	movw	r26, r28
    2374:	ad 59       	subi	r26, 0x9D	; 157
    2376:	bf 4f       	sbci	r27, 0xFF	; 255
    2378:	fe 01       	movw	r30, r28
    237a:	e9 59       	subi	r30, 0x99	; 153
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	8d 93       	st	X+, r24
    2384:	9c 93       	st	X, r25
    2386:	fe 01       	movw	r30, r28
    2388:	ed 59       	subi	r30, 0x9D	; 157
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 81       	ld	r24, Z
    238e:	91 81       	ldd	r25, Z+1	; 0x01
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <STEPPER_MOTOR_voiddrive+0x1c4>
    2394:	fe 01       	movw	r30, r28
    2396:	ed 59       	subi	r30, 0x9D	; 157
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
	_delay_ms(10);
	
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_LOW);
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_HIGH); 
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	63 e0       	ldi	r22, 0x03	; 3
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_LOW); 
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	64 e0       	ldi	r22, 0x04	; 4
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_LOW);
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	65 e0       	ldi	r22, 0x05	; 5
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    23c6:	fe 01       	movw	r30, r28
    23c8:	e1 5a       	subi	r30, 0xA1	; 161
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	a0 e2       	ldi	r26, 0x20	; 32
    23d2:	b1 e4       	ldi	r27, 0x41	; 65
    23d4:	80 83       	st	Z, r24
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	a2 83       	std	Z+2, r26	; 0x02
    23da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	8e 01       	movw	r16, r28
    23de:	05 5a       	subi	r16, 0xA5	; 165
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	e1 5a       	subi	r30, 0xA1	; 161
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a ef       	ldi	r20, 0xFA	; 250
    23f6:	54 e4       	ldi	r21, 0x44	; 68
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	80 83       	st	Z, r24
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	a2 83       	std	Z+2, r26	; 0x02
    2408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    240a:	fe 01       	movw	r30, r28
    240c:	e5 5a       	subi	r30, 0xA5	; 165
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	44 f4       	brge	.+16     	; 0x2438 <STEPPER_MOTOR_voiddrive+0x26c>
		__ticks = 1;
    2428:	fe 01       	movw	r30, r28
    242a:	e7 5a       	subi	r30, 0xA7	; 167
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	64 c0       	rjmp	.+200    	; 0x2500 <STEPPER_MOTOR_voiddrive+0x334>
	else if (__tmp > 65535)
    2438:	fe 01       	movw	r30, r28
    243a:	e5 5a       	subi	r30, 0xA5	; 165
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	0c f0       	brlt	.+2      	; 0x2458 <STEPPER_MOTOR_voiddrive+0x28c>
    2456:	43 c0       	rjmp	.+134    	; 0x24de <STEPPER_MOTOR_voiddrive+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2458:	fe 01       	movw	r30, r28
    245a:	e1 5a       	subi	r30, 0xA1	; 161
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8e 01       	movw	r16, r28
    2478:	07 5a       	subi	r16, 0xA7	; 167
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	1f c0       	rjmp	.+62     	; 0x24ce <STEPPER_MOTOR_voiddrive+0x302>
    2490:	fe 01       	movw	r30, r28
    2492:	e9 5a       	subi	r30, 0xA9	; 169
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	88 ec       	ldi	r24, 0xC8	; 200
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    249e:	fe 01       	movw	r30, r28
    24a0:	e9 5a       	subi	r30, 0xA9	; 169
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <STEPPER_MOTOR_voiddrive+0x2dc>
    24ac:	fe 01       	movw	r30, r28
    24ae:	e9 5a       	subi	r30, 0xA9	; 169
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	de 01       	movw	r26, r28
    24b8:	a7 5a       	subi	r26, 0xA7	; 167
    24ba:	bf 4f       	sbci	r27, 0xFF	; 255
    24bc:	fe 01       	movw	r30, r28
    24be:	e7 5a       	subi	r30, 0xA7	; 167
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	11 96       	adiw	r26, 0x01	; 1
    24ca:	9c 93       	st	X, r25
    24cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5a       	subi	r30, 0xA7	; 167
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	d1 f6       	brne	.-76     	; 0x2490 <STEPPER_MOTOR_voiddrive+0x2c4>
    24dc:	27 c0       	rjmp	.+78     	; 0x252c <STEPPER_MOTOR_voiddrive+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24de:	8e 01       	movw	r16, r28
    24e0:	07 5a       	subi	r16, 0xA7	; 167
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e5 5a       	subi	r30, 0xA5	; 165
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	de 01       	movw	r26, r28
    2502:	ab 5a       	subi	r26, 0xAB	; 171
    2504:	bf 4f       	sbci	r27, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	e7 5a       	subi	r30, 0xA7	; 167
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	8d 93       	st	X+, r24
    2512:	9c 93       	st	X, r25
    2514:	fe 01       	movw	r30, r28
    2516:	eb 5a       	subi	r30, 0xAB	; 171
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <STEPPER_MOTOR_voiddrive+0x352>
    2522:	fe 01       	movw	r30, r28
    2524:	eb 5a       	subi	r30, 0xAB	; 171
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
    _delay_ms(10);
	
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_LOW);
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_LOW); 
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	63 e0       	ldi	r22, 0x03	; 3
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_HIGH); 
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	64 e0       	ldi	r22, 0x04	; 4
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_LOW);
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	65 e0       	ldi	r22, 0x05	; 5
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    2554:	fe 01       	movw	r30, r28
    2556:	ef 5a       	subi	r30, 0xAF	; 175
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e2       	ldi	r26, 0x20	; 32
    2560:	b1 e4       	ldi	r27, 0x41	; 65
    2562:	80 83       	st	Z, r24
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	a2 83       	std	Z+2, r26	; 0x02
    2568:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	8e 01       	movw	r16, r28
    256c:	03 5b       	subi	r16, 0xB3	; 179
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	ef 5a       	subi	r30, 0xAF	; 175
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	f8 01       	movw	r30, r16
    2590:	80 83       	st	Z, r24
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	a2 83       	std	Z+2, r26	; 0x02
    2596:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2598:	fe 01       	movw	r30, r28
    259a:	e3 5b       	subi	r30, 0xB3	; 179
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	44 f4       	brge	.+16     	; 0x25c6 <STEPPER_MOTOR_voiddrive+0x3fa>
		__ticks = 1;
    25b6:	fe 01       	movw	r30, r28
    25b8:	e5 5b       	subi	r30, 0xB5	; 181
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	64 c0       	rjmp	.+200    	; 0x268e <STEPPER_MOTOR_voiddrive+0x4c2>
	else if (__tmp > 65535)
    25c6:	fe 01       	movw	r30, r28
    25c8:	e3 5b       	subi	r30, 0xB3	; 179
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	0c f0       	brlt	.+2      	; 0x25e6 <STEPPER_MOTOR_voiddrive+0x41a>
    25e4:	43 c0       	rjmp	.+134    	; 0x266c <STEPPER_MOTOR_voiddrive+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	fe 01       	movw	r30, r28
    25e8:	ef 5a       	subi	r30, 0xAF	; 175
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8e 01       	movw	r16, r28
    2606:	05 5b       	subi	r16, 0xB5	; 181
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	f8 01       	movw	r30, r16
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
    261c:	1f c0       	rjmp	.+62     	; 0x265c <STEPPER_MOTOR_voiddrive+0x490>
    261e:	fe 01       	movw	r30, r28
    2620:	e7 5b       	subi	r30, 0xB7	; 183
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	88 ec       	ldi	r24, 0xC8	; 200
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5b       	subi	r30, 0xB7	; 183
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <STEPPER_MOTOR_voiddrive+0x46a>
    263a:	fe 01       	movw	r30, r28
    263c:	e7 5b       	subi	r30, 0xB7	; 183
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	de 01       	movw	r26, r28
    2646:	a5 5b       	subi	r26, 0xB5	; 181
    2648:	bf 4f       	sbci	r27, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	e5 5b       	subi	r30, 0xB5	; 181
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	11 96       	adiw	r26, 0x01	; 1
    2658:	9c 93       	st	X, r25
    265a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	fe 01       	movw	r30, r28
    265e:	e5 5b       	subi	r30, 0xB5	; 181
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	d1 f6       	brne	.-76     	; 0x261e <STEPPER_MOTOR_voiddrive+0x452>
    266a:	27 c0       	rjmp	.+78     	; 0x26ba <STEPPER_MOTOR_voiddrive+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266c:	8e 01       	movw	r16, r28
    266e:	05 5b       	subi	r16, 0xB5	; 181
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	fe 01       	movw	r30, r28
    2674:	e3 5b       	subi	r30, 0xB3	; 179
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	f8 01       	movw	r30, r16
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	de 01       	movw	r26, r28
    2690:	a9 5b       	subi	r26, 0xB9	; 185
    2692:	bf 4f       	sbci	r27, 0xFF	; 255
    2694:	fe 01       	movw	r30, r28
    2696:	e5 5b       	subi	r30, 0xB5	; 181
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	8d 93       	st	X+, r24
    26a0:	9c 93       	st	X, r25
    26a2:	fe 01       	movw	r30, r28
    26a4:	e9 5b       	subi	r30, 0xB9	; 185
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <STEPPER_MOTOR_voiddrive+0x4e0>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e9 5b       	subi	r30, 0xB9	; 185
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	80 83       	st	Z, r24
    _delay_ms(10);
	
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_LOW);
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_LOW); 
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	63 e0       	ldi	r22, 0x03	; 3
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_LOW); 
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_HIGH);  	
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	65 e0       	ldi	r22, 0x05	; 5
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    26e2:	fe 01       	movw	r30, r28
    26e4:	ed 5b       	subi	r30, 0xBD	; 189
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e2       	ldi	r26, 0x20	; 32
    26ee:	b1 e4       	ldi	r27, 0x41	; 65
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	8e 01       	movw	r16, r28
    26fa:	01 5c       	subi	r16, 0xC1	; 193
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 5b       	subi	r30, 0xBD	; 189
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	80 83       	st	Z, r24
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	a2 83       	std	Z+2, r26	; 0x02
    2724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2726:	fe 01       	movw	r30, r28
    2728:	ff 96       	adiw	r30, 0x3f	; 63
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e8       	ldi	r20, 0x80	; 128
    2738:	5f e3       	ldi	r21, 0x3F	; 63
    273a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273e:	88 23       	and	r24, r24
    2740:	2c f4       	brge	.+10     	; 0x274c <STEPPER_MOTOR_voiddrive+0x580>
		__ticks = 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9e af       	std	Y+62, r25	; 0x3e
    2748:	8d af       	std	Y+61, r24	; 0x3d
    274a:	46 c0       	rjmp	.+140    	; 0x27d8 <STEPPER_MOTOR_voiddrive+0x60c>
	else if (__tmp > 65535)
    274c:	fe 01       	movw	r30, r28
    274e:	ff 96       	adiw	r30, 0x3f	; 63
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	64 f5       	brge	.+88     	; 0x27c0 <STEPPER_MOTOR_voiddrive+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	fe 01       	movw	r30, r28
    276a:	ed 5b       	subi	r30, 0xBD	; 189
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e af       	std	Y+62, r25	; 0x3e
    2794:	8d af       	std	Y+61, r24	; 0x3d
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <STEPPER_MOTOR_voiddrive+0x5ea>
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c af       	std	Y+60, r25	; 0x3c
    279e:	8b af       	std	Y+59, r24	; 0x3b
    27a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    27a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <STEPPER_MOTOR_voiddrive+0x5d8>
    27a8:	9c af       	std	Y+60, r25	; 0x3c
    27aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9e af       	std	Y+62, r25	; 0x3e
    27b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <STEPPER_MOTOR_voiddrive+0x5cc>
    27be:	16 c0       	rjmp	.+44     	; 0x27ec <STEPPER_MOTOR_voiddrive+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	fe 01       	movw	r30, r28
    27c2:	ff 96       	adiw	r30, 0x3f	; 63
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e af       	std	Y+62, r25	; 0x3e
    27d6:	8d af       	std	Y+61, r24	; 0x3d
    27d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27da:	9e ad       	ldd	r25, Y+62	; 0x3e
    27dc:	9a af       	std	Y+58, r25	; 0x3a
    27de:	89 af       	std	Y+57, r24	; 0x39
    27e0:	89 ad       	ldd	r24, Y+57	; 0x39
    27e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <STEPPER_MOTOR_voiddrive+0x618>
    27e8:	9a af       	std	Y+58, r25	; 0x3a
    27ea:	89 af       	std	Y+57, r24	; 0x39
}
else if (STEPER_MOTOR_PIN_COM ==GROUND)
{
if(copy_u8direction == CLOCK_WISE )
  {
	 for(i=0;i<local_u8nof_iteration;i++)
    27ec:	de 01       	movw	r26, r28
    27ee:	ae 58       	subi	r26, 0x8E	; 142
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	ee 58       	subi	r30, 0x8E	; 142
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	8c 93       	st	X, r24
    27fe:	fe 01       	movw	r30, r28
    2800:	ee 58       	subi	r30, 0x8E	; 142
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	de 01       	movw	r26, r28
    2806:	ad 58       	subi	r26, 0x8D	; 141
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	90 81       	ld	r25, Z
    280c:	8c 91       	ld	r24, X
    280e:	98 17       	cp	r25, r24
    2810:	08 f4       	brcc	.+2      	; 0x2814 <STEPPER_MOTOR_voiddrive+0x648>
    2812:	fe cc       	rjmp	.-1540   	; 0x2210 <STEPPER_MOTOR_voiddrive+0x44>
    2814:	38 c2       	rjmp	.+1136   	; 0x2c86 <STEPPER_MOTOR_voiddrive+0xaba>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_HIGH);  	
	_delay_ms(10);
	
	 }
  }
  else if(copy_u8direction == COUNTER_CLOCK_WISE)
    2816:	fe 01       	movw	r30, r28
    2818:	ea 58       	subi	r30, 0x8A	; 138
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	09 f0       	breq	.+2      	; 0x2824 <STEPPER_MOTOR_voiddrive+0x658>
    2822:	31 c2       	rjmp	.+1122   	; 0x2c86 <STEPPER_MOTOR_voiddrive+0xaba>
  {
 for(i=0;i<local_u8nof_iteration;i++)
    2824:	fe 01       	movw	r30, r28
    2826:	ee 58       	subi	r30, 0x8E	; 142
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	10 82       	st	Z, r1
    282c:	21 c2       	rjmp	.+1090   	; 0x2c70 <STEPPER_MOTOR_voiddrive+0xaa4>
	 {  
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_LOW);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	62 e0       	ldi	r22, 0x02	; 2
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_LOW); 
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	63 e0       	ldi	r22, 0x03	; 3
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_LOW); 
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	64 e0       	ldi	r22, 0x04	; 4
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_HIGH);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	65 e0       	ldi	r22, 0x05	; 5
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e2       	ldi	r26, 0x20	; 32
    285c:	b1 e4       	ldi	r27, 0x41	; 65
    285e:	8d ab       	std	Y+53, r24	; 0x35
    2860:	9e ab       	std	Y+54, r25	; 0x36
    2862:	af ab       	std	Y+55, r26	; 0x37
    2864:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6d a9       	ldd	r22, Y+53	; 0x35
    2868:	7e a9       	ldd	r23, Y+54	; 0x36
    286a:	8f a9       	ldd	r24, Y+55	; 0x37
    286c:	98 ad       	ldd	r25, Y+56	; 0x38
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a ef       	ldi	r20, 0xFA	; 250
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	89 ab       	std	Y+49, r24	; 0x31
    2880:	9a ab       	std	Y+50, r25	; 0x32
    2882:	ab ab       	std	Y+51, r26	; 0x33
    2884:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2886:	69 a9       	ldd	r22, Y+49	; 0x31
    2888:	7a a9       	ldd	r23, Y+50	; 0x32
    288a:	8b a9       	ldd	r24, Y+51	; 0x33
    288c:	9c a9       	ldd	r25, Y+52	; 0x34
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <STEPPER_MOTOR_voiddrive+0x6dc>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	98 ab       	std	Y+48, r25	; 0x30
    28a4:	8f a7       	std	Y+47, r24	; 0x2f
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <STEPPER_MOTOR_voiddrive+0x75a>
	else if (__tmp > 65535)
    28a8:	69 a9       	ldd	r22, Y+49	; 0x31
    28aa:	7a a9       	ldd	r23, Y+50	; 0x32
    28ac:	8b a9       	ldd	r24, Y+51	; 0x33
    28ae:	9c a9       	ldd	r25, Y+52	; 0x34
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <STEPPER_MOTOR_voiddrive+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6d a9       	ldd	r22, Y+53	; 0x35
    28c2:	7e a9       	ldd	r23, Y+54	; 0x36
    28c4:	8f a9       	ldd	r24, Y+55	; 0x37
    28c6:	98 ad       	ldd	r25, Y+56	; 0x38
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	98 ab       	std	Y+48, r25	; 0x30
    28e6:	8f a7       	std	Y+47, r24	; 0x2f
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <STEPPER_MOTOR_voiddrive+0x73c>
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9e a7       	std	Y+46, r25	; 0x2e
    28f0:	8d a7       	std	Y+45, r24	; 0x2d
    28f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <STEPPER_MOTOR_voiddrive+0x72a>
    28fa:	9e a7       	std	Y+46, r25	; 0x2e
    28fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2900:	98 a9       	ldd	r25, Y+48	; 0x30
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	8f a5       	ldd	r24, Y+47	; 0x2f
    290a:	98 a9       	ldd	r25, Y+48	; 0x30
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <STEPPER_MOTOR_voiddrive+0x71e>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <STEPPER_MOTOR_voiddrive+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	69 a9       	ldd	r22, Y+49	; 0x31
    2914:	7a a9       	ldd	r23, Y+50	; 0x32
    2916:	8b a9       	ldd	r24, Y+51	; 0x33
    2918:	9c a9       	ldd	r25, Y+52	; 0x34
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	98 ab       	std	Y+48, r25	; 0x30
    2924:	8f a7       	std	Y+47, r24	; 0x2f
    2926:	8f a5       	ldd	r24, Y+47	; 0x2f
    2928:	98 a9       	ldd	r25, Y+48	; 0x30
    292a:	9c a7       	std	Y+44, r25	; 0x2c
    292c:	8b a7       	std	Y+43, r24	; 0x2b
    292e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2930:	9c a5       	ldd	r25, Y+44	; 0x2c
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <STEPPER_MOTOR_voiddrive+0x766>
    2936:	9c a7       	std	Y+44, r25	; 0x2c
    2938:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);	
	
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_LOW);
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	62 e0       	ldi	r22, 0x02	; 2
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_LOW); 
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	63 e0       	ldi	r22, 0x03	; 3
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_HIGH); 
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	64 e0       	ldi	r22, 0x04	; 4
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_LOW);
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	65 e0       	ldi	r22, 0x05	; 5
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 e2       	ldi	r26, 0x20	; 32
    2968:	b1 e4       	ldi	r27, 0x41	; 65
    296a:	8f a3       	std	Y+39, r24	; 0x27
    296c:	98 a7       	std	Y+40, r25	; 0x28
    296e:	a9 a7       	std	Y+41, r26	; 0x29
    2970:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	6f a1       	ldd	r22, Y+39	; 0x27
    2974:	78 a5       	ldd	r23, Y+40	; 0x28
    2976:	89 a5       	ldd	r24, Y+41	; 0x29
    2978:	9a a5       	ldd	r25, Y+42	; 0x2a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8b a3       	std	Y+35, r24	; 0x23
    298c:	9c a3       	std	Y+36, r25	; 0x24
    298e:	ad a3       	std	Y+37, r26	; 0x25
    2990:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2992:	6b a1       	ldd	r22, Y+35	; 0x23
    2994:	7c a1       	ldd	r23, Y+36	; 0x24
    2996:	8d a1       	ldd	r24, Y+37	; 0x25
    2998:	9e a1       	ldd	r25, Y+38	; 0x26
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <STEPPER_MOTOR_voiddrive+0x7e8>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9a a3       	std	Y+34, r25	; 0x22
    29b0:	89 a3       	std	Y+33, r24	; 0x21
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <STEPPER_MOTOR_voiddrive+0x866>
	else if (__tmp > 65535)
    29b4:	6b a1       	ldd	r22, Y+35	; 0x23
    29b6:	7c a1       	ldd	r23, Y+36	; 0x24
    29b8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ba:	9e a1       	ldd	r25, Y+38	; 0x26
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <STEPPER_MOTOR_voiddrive+0x852>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	6f a1       	ldd	r22, Y+39	; 0x27
    29ce:	78 a5       	ldd	r23, Y+40	; 0x28
    29d0:	89 a5       	ldd	r24, Y+41	; 0x29
    29d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9a a3       	std	Y+34, r25	; 0x22
    29f2:	89 a3       	std	Y+33, r24	; 0x21
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <STEPPER_MOTOR_voiddrive+0x848>
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	98 a3       	std	Y+32, r25	; 0x20
    29fc:	8f 8f       	std	Y+31, r24	; 0x1f
    29fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a00:	98 a1       	ldd	r25, Y+32	; 0x20
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <STEPPER_MOTOR_voiddrive+0x836>
    2a06:	98 a3       	std	Y+32, r25	; 0x20
    2a08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9a a3       	std	Y+34, r25	; 0x22
    2a12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	89 a1       	ldd	r24, Y+33	; 0x21
    2a16:	9a a1       	ldd	r25, Y+34	; 0x22
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <STEPPER_MOTOR_voiddrive+0x82a>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <STEPPER_MOTOR_voiddrive+0x87a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a20:	7c a1       	ldd	r23, Y+36	; 0x24
    2a22:	8d a1       	ldd	r24, Y+37	; 0x25
    2a24:	9e a1       	ldd	r25, Y+38	; 0x26
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9a a3       	std	Y+34, r25	; 0x22
    2a30:	89 a3       	std	Y+33, r24	; 0x21
    2a32:	89 a1       	ldd	r24, Y+33	; 0x21
    2a34:	9a a1       	ldd	r25, Y+34	; 0x22
    2a36:	9e 8f       	std	Y+30, r25	; 0x1e
    2a38:	8d 8f       	std	Y+29, r24	; 0x1d
    2a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <STEPPER_MOTOR_voiddrive+0x872>
    2a42:	9e 8f       	std	Y+30, r25	; 0x1e
    2a44:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
	
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_LOW);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	62 e0       	ldi	r22, 0x02	; 2
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_HIGH); 
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	63 e0       	ldi	r22, 0x03	; 3
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_LOW); 
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	64 e0       	ldi	r22, 0x04	; 4
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_LOW);
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	65 e0       	ldi	r22, 0x05	; 5
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e2       	ldi	r26, 0x20	; 32
    2a74:	b1 e4       	ldi	r27, 0x41	; 65
    2a76:	89 8f       	std	Y+25, r24	; 0x19
    2a78:	9a 8f       	std	Y+26, r25	; 0x1a
    2a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8d 8b       	std	Y+21, r24	; 0x15
    2a98:	9e 8b       	std	Y+22, r25	; 0x16
    2a9a:	af 8b       	std	Y+23, r26	; 0x17
    2a9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <STEPPER_MOTOR_voiddrive+0x8f4>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9c 8b       	std	Y+20, r25	; 0x14
    2abc:	8b 8b       	std	Y+19, r24	; 0x13
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <STEPPER_MOTOR_voiddrive+0x972>
	else if (__tmp > 65535)
    2ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <STEPPER_MOTOR_voiddrive+0x95e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9c 8b       	std	Y+20, r25	; 0x14
    2afe:	8b 8b       	std	Y+19, r24	; 0x13
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <STEPPER_MOTOR_voiddrive+0x954>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9a 8b       	std	Y+18, r25	; 0x12
    2b08:	89 8b       	std	Y+17, r24	; 0x11
    2b0a:	89 89       	ldd	r24, Y+17	; 0x11
    2b0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <STEPPER_MOTOR_voiddrive+0x942>
    2b12:	9a 8b       	std	Y+18, r25	; 0x12
    2b14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8b 89       	ldd	r24, Y+19	; 0x13
    2b18:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8b 89       	ldd	r24, Y+19	; 0x13
    2b22:	9c 89       	ldd	r25, Y+20	; 0x14
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <STEPPER_MOTOR_voiddrive+0x936>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <STEPPER_MOTOR_voiddrive+0x986>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b30:	98 8d       	ldd	r25, Y+24	; 0x18
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	98 8b       	std	Y+16, r25	; 0x10
    2b44:	8f 87       	std	Y+15, r24	; 0x0f
    2b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b48:	98 89       	ldd	r25, Y+16	; 0x10
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <STEPPER_MOTOR_voiddrive+0x97e>
    2b4e:	98 8b       	std	Y+16, r25	; 0x10
    2b50:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
	
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR1,STEPER_MOTOR_PIN_TR1,DIO_U8_HIGH);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	62 e0       	ldi	r22, 0x02	; 2
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR2,STEPER_MOTOR_PIN_TR2,DIO_U8_LOW); 
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	63 e0       	ldi	r22, 0x03	; 3
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR3,STEPER_MOTOR_PIN_TR3,DIO_U8_LOW); 
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	64 e0       	ldi	r22, 0x04	; 4
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR_PORT_PIN_TR4,STEPER_MOTOR_PIN_TR4,DIO_U8_LOW); 
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	65 e0       	ldi	r22, 0x05	; 5
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e2       	ldi	r26, 0x20	; 32
    2b80:	b1 e4       	ldi	r27, 0x41	; 65
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <STEPPER_MOTOR_voiddrive+0xa00>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <STEPPER_MOTOR_voiddrive+0xa7e>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <STEPPER_MOTOR_voiddrive+0xa6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <STEPPER_MOTOR_voiddrive+0xa60>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <STEPPER_MOTOR_voiddrive+0xa4e>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <STEPPER_MOTOR_voiddrive+0xa42>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <STEPPER_MOTOR_voiddrive+0xa92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <STEPPER_MOTOR_voiddrive+0xa8a>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	
	 }
  }
  else if(copy_u8direction == COUNTER_CLOCK_WISE)
  {
 for(i=0;i<local_u8nof_iteration;i++)
    2c5e:	de 01       	movw	r26, r28
    2c60:	ae 58       	subi	r26, 0x8E	; 142
    2c62:	bf 4f       	sbci	r27, 0xFF	; 255
    2c64:	fe 01       	movw	r30, r28
    2c66:	ee 58       	subi	r30, 0x8E	; 142
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	8c 93       	st	X, r24
    2c70:	fe 01       	movw	r30, r28
    2c72:	ee 58       	subi	r30, 0x8E	; 142
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	de 01       	movw	r26, r28
    2c78:	ad 58       	subi	r26, 0x8D	; 141
    2c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7c:	90 81       	ld	r25, Z
    2c7e:	8c 91       	ld	r24, X
    2c80:	98 17       	cp	r25, r24
    2c82:	08 f4       	brcc	.+2      	; 0x2c86 <STEPPER_MOTOR_voiddrive+0xaba>
    2c84:	d4 cd       	rjmp	.-1112   	; 0x282e <STEPPER_MOTOR_voiddrive+0x662>
  
}
	
	
}
}
    2c86:	ca 58       	subi	r28, 0x8A	; 138
    2c88:	df 4f       	sbci	r29, 0xFF	; 255
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	08 95       	ret

00002c9e <main>:
#include "STEPPER_MOTOR_interfac.h"
u8 i=0;
u8 fun(u8 *arr);
u16 fun2(u8 *arr);
int main()
{
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	c1 56       	subi	r28, 0x61	; 97
    2cac:	d0 40       	sbci	r29, 0x00	; 0
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    2cb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    2cbc:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_voidInit>
	u8 local_u8gtsw;
	u8 arr[4],temp[5];
	u8 check ,x=0,z;
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ea 5a       	subi	r30, 0xAA	; 170
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	10 82       	st	Z, r1
    LCD_Clear();
    2cc8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    LCD_VoidSendStr("ENTER YOUER PASSWORD");
    2ccc:	80 e6       	ldi	r24, 0x60	; 96
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    KPD_u8getswitch(&local_u8gtsw);
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	88 5a       	subi	r24, 0xA8	; 168
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    2cde:	28 c0       	rjmp	.+80     	; 0x2d30 <main+0x92>
    while(local_u8gtsw != '0')
	{

		KPD_u8getswitch(&local_u8gtsw);
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	88 5a       	subi	r24, 0xA8	; 168
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
		if(local_u8gtsw!=KPD_U8_NOT_PRESSED)
    2cea:	fe 01       	movw	r30, r28
    2cec:	e8 5a       	subi	r30, 0xA8	; 168
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf4:	e9 f0       	breq	.+58     	; 0x2d30 <main+0x92>
		{
		LCD_voidGotoXY(2,i);
    2cf6:	90 91 f6 00 	lds	r25, 0x00F6
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	69 2f       	mov	r22, r25
    2cfe:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
		LCD_voidSendChar('*');
    2d02:	8a e2       	ldi	r24, 0x2A	; 42
    2d04:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
		arr[i]=local_u8gtsw;
    2d08:	80 91 f6 00 	lds	r24, 0x00F6
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	fe 01       	movw	r30, r28
    2d12:	e8 5a       	subi	r30, 0xA8	; 168
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	40 81       	ld	r20, Z
    2d18:	ce 01       	movw	r24, r28
    2d1a:	87 5a       	subi	r24, 0xA7	; 167
    2d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e2 0f       	add	r30, r18
    2d22:	f3 1f       	adc	r31, r19
    2d24:	40 83       	st	Z, r20
		i++;
    2d26:	80 91 f6 00 	lds	r24, 0x00F6
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	80 93 f6 00 	sts	0x00F6, r24
	u8 arr[4],temp[5];
	u8 check ,x=0,z;
    LCD_Clear();
    LCD_VoidSendStr("ENTER YOUER PASSWORD");
    KPD_u8getswitch(&local_u8gtsw);
    while(local_u8gtsw != '0')
    2d30:	fe 01       	movw	r30, r28
    2d32:	e8 5a       	subi	r30, 0xA8	; 168
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	80 33       	cpi	r24, 0x30	; 48
    2d3a:	91 f6       	brne	.-92     	; 0x2ce0 <main+0x42>
		i++;
	    }
	}


        check = fun(arr);
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	87 5a       	subi	r24, 0xA7	; 167
    2d40:	9f 4f       	sbci	r25, 0xFF	; 255
    2d42:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <fun>
    2d46:	fe 01       	movw	r30, r28
    2d48:	e9 5a       	subi	r30, 0xA9	; 169
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 83       	st	Z, r24

        LCD_Clear();
    2d4e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
        if(check==1  )
    2d52:	fe 01       	movw	r30, r28
    2d54:	e9 5a       	subi	r30, 0xA9	; 169
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	09 f0       	breq	.+2      	; 0x2d60 <main+0xc2>
    2d5e:	07 c2       	rjmp	.+1038   	; 0x316e <main+0x4d0>
         {

        	 LCD_voidGotoXY(1,4);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	64 e0       	ldi	r22, 0x04	; 4
    2d64:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
        	 LCD_VoidSendStr("Welcome");
    2d68:	85 e7       	ldi	r24, 0x75	; 117
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
        	 LCD_voidGotoXY(2,4);
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	64 e0       	ldi	r22, 0x04	; 4
    2d74:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
        	 LCD_VoidSendStr("Mohamed");
    2d78:	8d e7       	ldi	r24, 0x7D	; 125
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    2d80:	fe 01       	movw	r30, r28
    2d82:	ef 5a       	subi	r30, 0xAF	; 175
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	aa e7       	ldi	r26, 0x7A	; 122
    2d8c:	b4 e4       	ldi	r27, 0x44	; 68
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	8e 01       	movw	r16, r28
    2d98:	03 5b       	subi	r16, 0xB3	; 179
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ef 5a       	subi	r30, 0xAF	; 175
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	f8 01       	movw	r30, r16
    2dbc:	80 83       	st	Z, r24
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	a2 83       	std	Z+2, r26	; 0x02
    2dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e3 5b       	subi	r30, 0xB3	; 179
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	44 f4       	brge	.+16     	; 0x2df2 <main+0x154>
		__ticks = 1;
    2de2:	fe 01       	movw	r30, r28
    2de4:	e5 5b       	subi	r30, 0xB5	; 181
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	64 c0       	rjmp	.+200    	; 0x2eba <main+0x21c>
	else if (__tmp > 65535)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e3 5b       	subi	r30, 0xB3	; 179
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <main+0x174>
    2e10:	43 c0       	rjmp	.+134    	; 0x2e98 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	ef 5a       	subi	r30, 0xAF	; 175
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8e 01       	movw	r16, r28
    2e32:	05 5b       	subi	r16, 0xB5	; 181
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	80 83       	st	Z, r24
    2e48:	1f c0       	rjmp	.+62     	; 0x2e88 <main+0x1ea>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 5b       	subi	r30, 0xB7	; 183
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 5b       	subi	r30, 0xB7	; 183
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <main+0x1c4>
    2e66:	fe 01       	movw	r30, r28
    2e68:	e7 5b       	subi	r30, 0xB7	; 183
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	de 01       	movw	r26, r28
    2e72:	a5 5b       	subi	r26, 0xB5	; 181
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	e5 5b       	subi	r30, 0xB5	; 181
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	11 96       	adiw	r26, 0x01	; 1
    2e84:	9c 93       	st	X, r25
    2e86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5b       	subi	r30, 0xB5	; 181
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	d1 f6       	brne	.-76     	; 0x2e4a <main+0x1ac>
    2e96:	27 c0       	rjmp	.+78     	; 0x2ee6 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	8e 01       	movw	r16, r28
    2e9a:	05 5b       	subi	r16, 0xB5	; 181
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e3 5b       	subi	r30, 0xB3	; 179
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	de 01       	movw	r26, r28
    2ebc:	a9 5b       	subi	r26, 0xB9	; 185
    2ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e5 5b       	subi	r30, 0xB5	; 181
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	8d 93       	st	X+, r24
    2ecc:	9c 93       	st	X, r25
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 5b       	subi	r30, 0xB9	; 185
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <main+0x23a>
    2edc:	fe 01       	movw	r30, r28
    2ede:	e9 5b       	subi	r30, 0xB9	; 185
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
        	 _delay_ms(1000);
             LCD_Clear();
    2ee6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
             KPD_u8getswitch(&local_u8gtsw);
    2eea:	ce 01       	movw	r24, r28
    2eec:	88 5a       	subi	r24, 0xA8	; 168
    2eee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    2ef4:	18 c0       	rjmp	.+48     	; 0x2f26 <main+0x288>
             while(local_u8gtsw!='1' && local_u8gtsw !='2' )
             {
             LCD_VoidSendStr("1- DC MOTOR");
    2ef6:	85 e8       	ldi	r24, 0x85	; 133
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
             LCD_voidGotoXY(2,0);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
             LCD_VoidSendStr("2- STEPPER MOTOR");
    2f06:	81 e9       	ldi	r24, 0x91	; 145
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    2f0e:	05 c0       	rjmp	.+10     	; 0x2f1a <main+0x27c>
             while(local_u8gtsw==KPD_U8_NOT_PRESSED)
             {
             KPD_u8getswitch(&local_u8gtsw);
    2f10:	ce 01       	movw	r24, r28
    2f12:	88 5a       	subi	r24, 0xA8	; 168
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
             while(local_u8gtsw!='1' && local_u8gtsw !='2' )
             {
             LCD_VoidSendStr("1- DC MOTOR");
             LCD_voidGotoXY(2,0);
             LCD_VoidSendStr("2- STEPPER MOTOR");
             while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e8 5a       	subi	r30, 0xA8	; 168
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	8f 3f       	cpi	r24, 0xFF	; 255
    2f24:	a9 f3       	breq	.-22     	; 0x2f10 <main+0x272>
        	 LCD_voidGotoXY(2,4);
        	 LCD_VoidSendStr("Mohamed");
        	 _delay_ms(1000);
             LCD_Clear();
             KPD_u8getswitch(&local_u8gtsw);
             while(local_u8gtsw!='1' && local_u8gtsw !='2' )
    2f26:	fe 01       	movw	r30, r28
    2f28:	e8 5a       	subi	r30, 0xA8	; 168
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	81 33       	cpi	r24, 0x31	; 49
    2f30:	31 f0       	breq	.+12     	; 0x2f3e <main+0x2a0>
    2f32:	fe 01       	movw	r30, r28
    2f34:	e8 5a       	subi	r30, 0xA8	; 168
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	82 33       	cpi	r24, 0x32	; 50
    2f3c:	e1 f6       	brne	.-72     	; 0x2ef6 <main+0x258>
             while(local_u8gtsw==KPD_U8_NOT_PRESSED)
             {
             KPD_u8getswitch(&local_u8gtsw);
             }
             }
             LCD_Clear();
    2f3e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    2f42:	3f c0       	rjmp	.+126    	; 0x2fc2 <main+0x324>
             while(local_u8gtsw=='1')
             {
                  LCD_VoidSendStr("1-CW ");
    2f44:	82 ea       	ldi	r24, 0xA2	; 162
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                  LCD_voidGotoXY(2,0);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                  LCD_VoidSendStr("2- CCW");
    2f54:	88 ea       	ldi	r24, 0xA8	; 168
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                  KPD_u8getswitch(&local_u8gtsw);
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	88 5a       	subi	r24, 0xA8	; 168
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <main+0x2d4>
                  while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                  {
                  KPD_u8getswitch(&local_u8gtsw);
    2f68:	ce 01       	movw	r24, r28
    2f6a:	88 5a       	subi	r24, 0xA8	; 168
    2f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
             {
                  LCD_VoidSendStr("1-CW ");
                  LCD_voidGotoXY(2,0);
                  LCD_VoidSendStr("2- CCW");
                  KPD_u8getswitch(&local_u8gtsw);
                  while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    2f72:	fe 01       	movw	r30, r28
    2f74:	e8 5a       	subi	r30, 0xA8	; 168
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7c:	a9 f3       	breq	.-22     	; 0x2f68 <main+0x2ca>
    2f7e:	0a c0       	rjmp	.+20     	; 0x2f94 <main+0x2f6>
                  {
                  KPD_u8getswitch(&local_u8gtsw);
                  }
                  while(local_u8gtsw=='1')
                  {
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	41 e0       	ldi	r20, 0x01	; 1
    2f86:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	61 e0       	ldi	r22, 0x01	; 1
    2f8e:	40 e0       	ldi	r20, 0x00	; 0
    2f90:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                  KPD_u8getswitch(&local_u8gtsw);
                  while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                  {
                  KPD_u8getswitch(&local_u8gtsw);
                  }
                  while(local_u8gtsw=='1')
    2f94:	fe 01       	movw	r30, r28
    2f96:	e8 5a       	subi	r30, 0xA8	; 168
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	81 33       	cpi	r24, 0x31	; 49
    2f9e:	81 f3       	breq	.-32     	; 0x2f80 <main+0x2e2>
    2fa0:	0a c0       	rjmp	.+20     	; 0x2fb6 <main+0x318>
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
                  }
                  while(local_u8gtsw=='2')
                  {
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
    2fac:	82 e0       	ldi	r24, 0x02	; 2
    2fae:	61 e0       	ldi	r22, 0x01	; 1
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                  while(local_u8gtsw=='1')
                  {
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
                  }
                  while(local_u8gtsw=='2')
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e8 5a       	subi	r30, 0xA8	; 168
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	82 33       	cpi	r24, 0x32	; 50
    2fc0:	81 f3       	breq	.-32     	; 0x2fa2 <main+0x304>
             {
             KPD_u8getswitch(&local_u8gtsw);
             }
             }
             LCD_Clear();
             while(local_u8gtsw=='1')
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e8 5a       	subi	r30, 0xA8	; 168
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	81 33       	cpi	r24, 0x31	; 49
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <main+0x332>
    2fce:	ba cf       	rjmp	.-140    	; 0x2f44 <main+0x2a6>
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
                  }

             }
             LCD_Clear();
    2fd0:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    2fd4:	36 c0       	rjmp	.+108    	; 0x3042 <main+0x3a4>
             while(local_u8gtsw=='2' || local_u8gtsw !='%')
             {
            	 LCD_VoidSendStr("Enter Angel = ");
    2fd6:	8f ea       	ldi	r24, 0xAF	; 175
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    2fde:	2b c0       	rjmp	.+86     	; 0x3036 <main+0x398>
            	 while( local_u8gtsw !='%')
            	 {
            		 KPD_u8getswitch(&local_u8gtsw);
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	88 5a       	subi	r24, 0xA8	; 168
    2fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
            		 if(local_u8gtsw!=KPD_U8_NOT_PRESSED )
    2fea:	fe 01       	movw	r30, r28
    2fec:	e8 5a       	subi	r30, 0xA8	; 168
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ff4:	01 f1       	breq	.+64     	; 0x3036 <main+0x398>
            		 {
            		 LCD_voidSendChar(local_u8gtsw);
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e8 5a       	subi	r30, 0xA8	; 168
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
            	     temp[x]=local_u8gtsw;
    3002:	fe 01       	movw	r30, r28
    3004:	ea 5a       	subi	r30, 0xAA	; 170
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	80 81       	ld	r24, Z
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	fe 01       	movw	r30, r28
    3010:	e8 5a       	subi	r30, 0xA8	; 168
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	40 81       	ld	r20, Z
    3016:	ce 01       	movw	r24, r28
    3018:	83 5a       	subi	r24, 0xA3	; 163
    301a:	9f 4f       	sbci	r25, 0xFF	; 255
    301c:	fc 01       	movw	r30, r24
    301e:	e2 0f       	add	r30, r18
    3020:	f3 1f       	adc	r31, r19
    3022:	40 83       	st	Z, r20
            	     x++;
    3024:	de 01       	movw	r26, r28
    3026:	aa 5a       	subi	r26, 0xAA	; 170
    3028:	bf 4f       	sbci	r27, 0xFF	; 255
    302a:	fe 01       	movw	r30, r28
    302c:	ea 5a       	subi	r30, 0xAA	; 170
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 81       	ld	r24, Z
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	8c 93       	st	X, r24
             }
             LCD_Clear();
             while(local_u8gtsw=='2' || local_u8gtsw !='%')
             {
            	 LCD_VoidSendStr("Enter Angel = ");
            	 while( local_u8gtsw !='%')
    3036:	fe 01       	movw	r30, r28
    3038:	e8 5a       	subi	r30, 0xA8	; 168
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	85 32       	cpi	r24, 0x25	; 37
    3040:	79 f6       	brne	.-98     	; 0x2fe0 <main+0x342>
                	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
                  }

             }
             LCD_Clear();
             while(local_u8gtsw=='2' || local_u8gtsw !='%')
    3042:	fe 01       	movw	r30, r28
    3044:	e8 5a       	subi	r30, 0xA8	; 168
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 81       	ld	r24, Z
    304a:	82 33       	cpi	r24, 0x32	; 50
    304c:	21 f2       	breq	.-120    	; 0x2fd6 <main+0x338>
    304e:	fe 01       	movw	r30, r28
    3050:	e8 5a       	subi	r30, 0xA8	; 168
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	85 32       	cpi	r24, 0x25	; 37
    3058:	09 f0       	breq	.+2      	; 0x305c <main+0x3be>
    305a:	bd cf       	rjmp	.-134    	; 0x2fd6 <main+0x338>
            	     temp[x]=local_u8gtsw;
            	     x++;
            		 }
            	 }
             }
            	 LCD_Clear();
    305c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    3060:	1d c0       	rjmp	.+58     	; 0x309c <main+0x3fe>
            	 while(local_u8gtsw != '1' && local_u8gtsw != '2' )
            	 {

                     LCD_VoidSendStr("1-CW ");
    3062:	82 ea       	ldi	r24, 0xA2	; 162
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                     LCD_voidGotoXY(2,0);
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                     LCD_VoidSendStr("2- CCW");
    3072:	88 ea       	ldi	r24, 0xA8	; 168
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                     KPD_u8getswitch(&local_u8gtsw);
    307a:	ce 01       	movw	r24, r28
    307c:	88 5a       	subi	r24, 0xA8	; 168
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    3084:	05 c0       	rjmp	.+10     	; 0x3090 <main+0x3f2>
                  	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                         {
                          KPD_u8getswitch(&local_u8gtsw);
    3086:	ce 01       	movw	r24, r28
    3088:	88 5a       	subi	r24, 0xA8	; 168
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>

                     LCD_VoidSendStr("1-CW ");
                     LCD_voidGotoXY(2,0);
                     LCD_VoidSendStr("2- CCW");
                     KPD_u8getswitch(&local_u8gtsw);
                  	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    3090:	fe 01       	movw	r30, r28
    3092:	e8 5a       	subi	r30, 0xA8	; 168
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	8f 3f       	cpi	r24, 0xFF	; 255
    309a:	a9 f3       	breq	.-22     	; 0x3086 <main+0x3e8>
            	     x++;
            		 }
            	 }
             }
            	 LCD_Clear();
            	 while(local_u8gtsw != '1' && local_u8gtsw != '2' )
    309c:	fe 01       	movw	r30, r28
    309e:	e8 5a       	subi	r30, 0xA8	; 168
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	81 33       	cpi	r24, 0x31	; 49
    30a6:	69 f1       	breq	.+90     	; 0x3102 <main+0x464>
    30a8:	fe 01       	movw	r30, r28
    30aa:	e8 5a       	subi	r30, 0xA8	; 168
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	82 33       	cpi	r24, 0x32	; 50
    30b2:	b9 f6       	brne	.-82     	; 0x3062 <main+0x3c4>
    30b4:	26 c0       	rjmp	.+76     	; 0x3102 <main+0x464>
                          KPD_u8getswitch(&local_u8gtsw);
                         }
                }
            	 while(local_u8gtsw== '1')
            	 {
            		 local_u8gtsw -= '0';
    30b6:	fe 01       	movw	r30, r28
    30b8:	e8 5a       	subi	r30, 0xA8	; 168
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	80 81       	ld	r24, Z
    30be:	80 53       	subi	r24, 0x30	; 48
    30c0:	fe 01       	movw	r30, r28
    30c2:	e8 5a       	subi	r30, 0xA8	; 168
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 83       	st	Z, r24
            		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
    30c8:	ce 01       	movw	r24, r28
    30ca:	83 5a       	subi	r24, 0xA3	; 163
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <fun2>
    30d2:	fe 01       	movw	r30, r28
    30d4:	e8 5a       	subi	r30, 0xA8	; 168
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	20 81       	ld	r18, Z
    30da:	62 2f       	mov	r22, r18
    30dc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <STEPPER_MOTOR_voiddrive>
                     KPD_u8getswitch(&local_u8gtsw);
    30e0:	ce 01       	movw	r24, r28
    30e2:	88 5a       	subi	r24, 0xA8	; 168
    30e4:	9f 4f       	sbci	r25, 0xFF	; 255
    30e6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    30ea:	05 c0       	rjmp	.+10     	; 0x30f6 <main+0x458>
                  	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                         {
                  		  KPD_u8getswitch(&local_u8gtsw);
    30ec:	ce 01       	movw	r24, r28
    30ee:	88 5a       	subi	r24, 0xA8	; 168
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
            	 while(local_u8gtsw== '1')
            	 {
            		 local_u8gtsw -= '0';
            		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
                     KPD_u8getswitch(&local_u8gtsw);
                  	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    30f6:	fe 01       	movw	r30, r28
    30f8:	e8 5a       	subi	r30, 0xA8	; 168
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3100:	a9 f3       	breq	.-22     	; 0x30ec <main+0x44e>
                  	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                         {
                          KPD_u8getswitch(&local_u8gtsw);
                         }
                }
            	 while(local_u8gtsw== '1')
    3102:	fe 01       	movw	r30, r28
    3104:	e8 5a       	subi	r30, 0xA8	; 168
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	81 33       	cpi	r24, 0x31	; 49
    310c:	a1 f2       	breq	.-88     	; 0x30b6 <main+0x418>
    310e:	28 c0       	rjmp	.+80     	; 0x3160 <main+0x4c2>
            	      }

            	 }
             	 while(local_u8gtsw== '2')
                	 {
                		 local_u8gtsw -= '0';
    3110:	fe 01       	movw	r30, r28
    3112:	e8 5a       	subi	r30, 0xA8	; 168
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	80 53       	subi	r24, 0x30	; 48
    311a:	fe 01       	movw	r30, r28
    311c:	e8 5a       	subi	r30, 0xA8	; 168
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	80 83       	st	Z, r24
                		 STEPPER_MOTOR_voiddrive(fun(temp),local_u8gtsw);
    3122:	ce 01       	movw	r24, r28
    3124:	83 5a       	subi	r24, 0xA3	; 163
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <fun>
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	fe 01       	movw	r30, r28
    3132:	e8 5a       	subi	r30, 0xA8	; 168
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	20 81       	ld	r18, Z
    3138:	62 2f       	mov	r22, r18
    313a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <STEPPER_MOTOR_voiddrive>
                         KPD_u8getswitch(&local_u8gtsw);
    313e:	ce 01       	movw	r24, r28
    3140:	88 5a       	subi	r24, 0xA8	; 168
    3142:	9f 4f       	sbci	r25, 0xFF	; 255
    3144:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    3148:	05 c0       	rjmp	.+10     	; 0x3154 <main+0x4b6>
                      	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                             {
                      		  KPD_u8getswitch(&local_u8gtsw);
    314a:	ce 01       	movw	r24, r28
    314c:	88 5a       	subi	r24, 0xA8	; 168
    314e:	9f 4f       	sbci	r25, 0xFF	; 255
    3150:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
             	 while(local_u8gtsw== '2')
                	 {
                		 local_u8gtsw -= '0';
                		 STEPPER_MOTOR_voiddrive(fun(temp),local_u8gtsw);
                         KPD_u8getswitch(&local_u8gtsw);
                      	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    3154:	fe 01       	movw	r30, r28
    3156:	e8 5a       	subi	r30, 0xA8	; 168
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	8f 3f       	cpi	r24, 0xFF	; 255
    315e:	a9 f3       	breq	.-22     	; 0x314a <main+0x4ac>
                         {
                  		  KPD_u8getswitch(&local_u8gtsw);
            	      }

            	 }
             	 while(local_u8gtsw== '2')
    3160:	fe 01       	movw	r30, r28
    3162:	e8 5a       	subi	r30, 0xA8	; 168
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	82 33       	cpi	r24, 0x32	; 50
    316a:	91 f2       	breq	.-92     	; 0x3110 <main+0x472>
    316c:	9c c0       	rjmp	.+312    	; 0x32a6 <main+0x608>

                	 }
             }


       else  if(check==2)
    316e:	fe 01       	movw	r30, r28
    3170:	e9 5a       	subi	r30, 0xA9	; 169
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 81       	ld	r24, Z
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	09 f0       	breq	.+2      	; 0x317c <main+0x4de>
    317a:	95 c0       	rjmp	.+298    	; 0x32a6 <main+0x608>
         {
        	 LCD_VoidSendStr("ENTER YOUER PASSWORD");
    317c:	80 e6       	ldi	r24, 0x60	; 96
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
        	 LCD_voidGotoXY(2,0);
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
        	 LCD_VoidSendStr("Wrong Password");
    318c:	8e eb       	ldi	r24, 0xBE	; 190
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3194:	fe 01       	movw	r30, r28
    3196:	ed 5b       	subi	r30, 0xBD	; 189
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	aa e7       	ldi	r26, 0x7A	; 122
    31a0:	b4 e4       	ldi	r27, 0x44	; 68
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	8e 01       	movw	r16, r28
    31ac:	01 5c       	subi	r16, 0xC1	; 193
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	ed 5b       	subi	r30, 0xBD	; 189
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d8:	fe 01       	movw	r30, r28
    31da:	ff 96       	adiw	r30, 0x3f	; 63
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	5f e3       	ldi	r21, 0x3F	; 63
    31ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	2c f4       	brge	.+10     	; 0x31fe <main+0x560>
		__ticks = 1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	9e af       	std	Y+62, r25	; 0x3e
    31fa:	8d af       	std	Y+61, r24	; 0x3d
    31fc:	46 c0       	rjmp	.+140    	; 0x328a <main+0x5ec>
	else if (__tmp > 65535)
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3f ef       	ldi	r19, 0xFF	; 255
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	57 e4       	ldi	r21, 0x47	; 71
    3212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3216:	18 16       	cp	r1, r24
    3218:	64 f5       	brge	.+88     	; 0x3272 <main+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	fe 01       	movw	r30, r28
    321c:	ed 5b       	subi	r30, 0xBD	; 189
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9e af       	std	Y+62, r25	; 0x3e
    3246:	8d af       	std	Y+61, r24	; 0x3d
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <main+0x5ca>
    324a:	88 ec       	ldi	r24, 0xC8	; 200
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9c af       	std	Y+60, r25	; 0x3c
    3250:	8b af       	std	Y+59, r24	; 0x3b
    3252:	8b ad       	ldd	r24, Y+59	; 0x3b
    3254:	9c ad       	ldd	r25, Y+60	; 0x3c
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <main+0x5b8>
    325a:	9c af       	std	Y+60, r25	; 0x3c
    325c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3260:	9e ad       	ldd	r25, Y+62	; 0x3e
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	9e af       	std	Y+62, r25	; 0x3e
    3266:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	8d ad       	ldd	r24, Y+61	; 0x3d
    326a:	9e ad       	ldd	r25, Y+62	; 0x3e
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <main+0x5ac>
    3270:	16 c0       	rjmp	.+44     	; 0x329e <main+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	fe 01       	movw	r30, r28
    3274:	ff 96       	adiw	r30, 0x3f	; 63
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e af       	std	Y+62, r25	; 0x3e
    3288:	8d af       	std	Y+61, r24	; 0x3d
    328a:	8d ad       	ldd	r24, Y+61	; 0x3d
    328c:	9e ad       	ldd	r25, Y+62	; 0x3e
    328e:	9a af       	std	Y+58, r25	; 0x3a
    3290:	89 af       	std	Y+57, r24	; 0x39
    3292:	89 ad       	ldd	r24, Y+57	; 0x39
    3294:	9a ad       	ldd	r25, Y+58	; 0x3a
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <main+0x5f8>
    329a:	9a af       	std	Y+58, r25	; 0x3a
    329c:	89 af       	std	Y+57, r24	; 0x39
             _delay_ms(1000);
             i=0;
    329e:	10 92 f6 00 	sts	0x00F6, r1
             LCD_Clear();
    32a2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>

         }

           LCD_VoidSendStr("ENTER YOUER PASSWORD");
    32a6:	80 e6       	ldi	r24, 0x60	; 96
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
           KPD_u8getswitch(&local_u8gtsw);
    32ae:	ce 01       	movw	r24, r28
    32b0:	88 5a       	subi	r24, 0xA8	; 168
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    32b8:	28 c0       	rjmp	.+80     	; 0x330a <main+0x66c>

           while(local_u8gtsw != '0')
         	{

         		KPD_u8getswitch(&local_u8gtsw);
    32ba:	ce 01       	movw	r24, r28
    32bc:	88 5a       	subi	r24, 0xA8	; 168
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
         		if(local_u8gtsw!=KPD_U8_NOT_PRESSED)
    32c4:	fe 01       	movw	r30, r28
    32c6:	e8 5a       	subi	r30, 0xA8	; 168
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	80 81       	ld	r24, Z
    32cc:	8f 3f       	cpi	r24, 0xFF	; 255
    32ce:	e9 f0       	breq	.+58     	; 0x330a <main+0x66c>
         		{
         		LCD_voidGotoXY(2,i);
    32d0:	90 91 f6 00 	lds	r25, 0x00F6
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	69 2f       	mov	r22, r25
    32d8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
         		LCD_voidSendChar('*');
    32dc:	8a e2       	ldi	r24, 0x2A	; 42
    32de:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
         		arr[i]=local_u8gtsw;
    32e2:	80 91 f6 00 	lds	r24, 0x00F6
    32e6:	28 2f       	mov	r18, r24
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	fe 01       	movw	r30, r28
    32ec:	e8 5a       	subi	r30, 0xA8	; 168
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	40 81       	ld	r20, Z
    32f2:	ce 01       	movw	r24, r28
    32f4:	87 5a       	subi	r24, 0xA7	; 167
    32f6:	9f 4f       	sbci	r25, 0xFF	; 255
    32f8:	fc 01       	movw	r30, r24
    32fa:	e2 0f       	add	r30, r18
    32fc:	f3 1f       	adc	r31, r19
    32fe:	40 83       	st	Z, r20
         		i++;
    3300:	80 91 f6 00 	lds	r24, 0x00F6
    3304:	8f 5f       	subi	r24, 0xFF	; 255
    3306:	80 93 f6 00 	sts	0x00F6, r24
         }

           LCD_VoidSendStr("ENTER YOUER PASSWORD");
           KPD_u8getswitch(&local_u8gtsw);

           while(local_u8gtsw != '0')
    330a:	fe 01       	movw	r30, r28
    330c:	e8 5a       	subi	r30, 0xA8	; 168
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	80 33       	cpi	r24, 0x30	; 48
    3314:	91 f6       	brne	.-92     	; 0x32ba <main+0x61c>
         		i++;
         	    }
         	}


                 check = fun(arr);
    3316:	ce 01       	movw	r24, r28
    3318:	87 5a       	subi	r24, 0xA7	; 167
    331a:	9f 4f       	sbci	r25, 0xFF	; 255
    331c:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <fun>
    3320:	fe 01       	movw	r30, r28
    3322:	e9 5a       	subi	r30, 0xA9	; 169
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 83       	st	Z, r24

                 LCD_Clear();
    3328:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
                 if(check==1  )
    332c:	fe 01       	movw	r30, r28
    332e:	e9 5a       	subi	r30, 0xA9	; 169
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	09 f0       	breq	.+2      	; 0x333a <main+0x69c>
    3338:	c4 c1       	rjmp	.+904    	; 0x36c2 <main+0xa24>
                  {

                 	 LCD_voidGotoXY(1,4);
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                 	 LCD_VoidSendStr("Welcome");
    3342:	85 e7       	ldi	r24, 0x75	; 117
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                 	 LCD_voidGotoXY(2,4);
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	64 e0       	ldi	r22, 0x04	; 4
    334e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                 	 LCD_VoidSendStr("Mohamed");
    3352:	8d e7       	ldi	r24, 0x7D	; 125
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	aa e7       	ldi	r26, 0x7A	; 122
    3360:	b4 e4       	ldi	r27, 0x44	; 68
    3362:	8d ab       	std	Y+53, r24	; 0x35
    3364:	9e ab       	std	Y+54, r25	; 0x36
    3366:	af ab       	std	Y+55, r26	; 0x37
    3368:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336a:	6d a9       	ldd	r22, Y+53	; 0x35
    336c:	7e a9       	ldd	r23, Y+54	; 0x36
    336e:	8f a9       	ldd	r24, Y+55	; 0x37
    3370:	98 ad       	ldd	r25, Y+56	; 0x38
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	4a ef       	ldi	r20, 0xFA	; 250
    3378:	54 e4       	ldi	r21, 0x44	; 68
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	89 ab       	std	Y+49, r24	; 0x31
    3384:	9a ab       	std	Y+50, r25	; 0x32
    3386:	ab ab       	std	Y+51, r26	; 0x33
    3388:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    338a:	69 a9       	ldd	r22, Y+49	; 0x31
    338c:	7a a9       	ldd	r23, Y+50	; 0x32
    338e:	8b a9       	ldd	r24, Y+51	; 0x33
    3390:	9c a9       	ldd	r25, Y+52	; 0x34
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e8       	ldi	r20, 0x80	; 128
    3398:	5f e3       	ldi	r21, 0x3F	; 63
    339a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339e:	88 23       	and	r24, r24
    33a0:	2c f4       	brge	.+10     	; 0x33ac <main+0x70e>
		__ticks = 1;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	98 ab       	std	Y+48, r25	; 0x30
    33a8:	8f a7       	std	Y+47, r24	; 0x2f
    33aa:	3f c0       	rjmp	.+126    	; 0x342a <main+0x78c>
	else if (__tmp > 65535)
    33ac:	69 a9       	ldd	r22, Y+49	; 0x31
    33ae:	7a a9       	ldd	r23, Y+50	; 0x32
    33b0:	8b a9       	ldd	r24, Y+51	; 0x33
    33b2:	9c a9       	ldd	r25, Y+52	; 0x34
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	3f ef       	ldi	r19, 0xFF	; 255
    33b8:	4f e7       	ldi	r20, 0x7F	; 127
    33ba:	57 e4       	ldi	r21, 0x47	; 71
    33bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33c0:	18 16       	cp	r1, r24
    33c2:	4c f5       	brge	.+82     	; 0x3416 <main+0x778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c4:	6d a9       	ldd	r22, Y+53	; 0x35
    33c6:	7e a9       	ldd	r23, Y+54	; 0x36
    33c8:	8f a9       	ldd	r24, Y+55	; 0x37
    33ca:	98 ad       	ldd	r25, Y+56	; 0x38
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e2       	ldi	r20, 0x20	; 32
    33d2:	51 e4       	ldi	r21, 0x41	; 65
    33d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	98 ab       	std	Y+48, r25	; 0x30
    33ea:	8f a7       	std	Y+47, r24	; 0x2f
    33ec:	0f c0       	rjmp	.+30     	; 0x340c <main+0x76e>
    33ee:	88 ec       	ldi	r24, 0xC8	; 200
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9e a7       	std	Y+46, r25	; 0x2e
    33f4:	8d a7       	std	Y+45, r24	; 0x2d
    33f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <main+0x75c>
    33fe:	9e a7       	std	Y+46, r25	; 0x2e
    3400:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3402:	8f a5       	ldd	r24, Y+47	; 0x2f
    3404:	98 a9       	ldd	r25, Y+48	; 0x30
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	98 ab       	std	Y+48, r25	; 0x30
    340a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340c:	8f a5       	ldd	r24, Y+47	; 0x2f
    340e:	98 a9       	ldd	r25, Y+48	; 0x30
    3410:	00 97       	sbiw	r24, 0x00	; 0
    3412:	69 f7       	brne	.-38     	; 0x33ee <main+0x750>
    3414:	14 c0       	rjmp	.+40     	; 0x343e <main+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3416:	69 a9       	ldd	r22, Y+49	; 0x31
    3418:	7a a9       	ldd	r23, Y+50	; 0x32
    341a:	8b a9       	ldd	r24, Y+51	; 0x33
    341c:	9c a9       	ldd	r25, Y+52	; 0x34
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	98 ab       	std	Y+48, r25	; 0x30
    3428:	8f a7       	std	Y+47, r24	; 0x2f
    342a:	8f a5       	ldd	r24, Y+47	; 0x2f
    342c:	98 a9       	ldd	r25, Y+48	; 0x30
    342e:	9c a7       	std	Y+44, r25	; 0x2c
    3430:	8b a7       	std	Y+43, r24	; 0x2b
    3432:	8b a5       	ldd	r24, Y+43	; 0x2b
    3434:	9c a5       	ldd	r25, Y+44	; 0x2c
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	f1 f7       	brne	.-4      	; 0x3436 <main+0x798>
    343a:	9c a7       	std	Y+44, r25	; 0x2c
    343c:	8b a7       	std	Y+43, r24	; 0x2b
                 	 _delay_ms(1000);
                      LCD_Clear();
    343e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
                      KPD_u8getswitch(&local_u8gtsw);
    3442:	ce 01       	movw	r24, r28
    3444:	88 5a       	subi	r24, 0xA8	; 168
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    344c:	18 c0       	rjmp	.+48     	; 0x347e <main+0x7e0>
                      while(local_u8gtsw!='1' && local_u8gtsw !='2' )
                      {
                      LCD_VoidSendStr("1- DC MOTOR");
    344e:	85 e8       	ldi	r24, 0x85	; 133
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                      LCD_voidGotoXY(2,0);
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                      LCD_VoidSendStr("2- STEPPER MOTOR");
    345e:	81 e9       	ldi	r24, 0x91	; 145
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3466:	05 c0       	rjmp	.+10     	; 0x3472 <main+0x7d4>
                      while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                      {
                      KPD_u8getswitch(&local_u8gtsw);
    3468:	ce 01       	movw	r24, r28
    346a:	88 5a       	subi	r24, 0xA8	; 168
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                      while(local_u8gtsw!='1' && local_u8gtsw !='2' )
                      {
                      LCD_VoidSendStr("1- DC MOTOR");
                      LCD_voidGotoXY(2,0);
                      LCD_VoidSendStr("2- STEPPER MOTOR");
                      while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    3472:	fe 01       	movw	r30, r28
    3474:	e8 5a       	subi	r30, 0xA8	; 168
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 81       	ld	r24, Z
    347a:	8f 3f       	cpi	r24, 0xFF	; 255
    347c:	a9 f3       	breq	.-22     	; 0x3468 <main+0x7ca>
                 	 LCD_voidGotoXY(2,4);
                 	 LCD_VoidSendStr("Mohamed");
                 	 _delay_ms(1000);
                      LCD_Clear();
                      KPD_u8getswitch(&local_u8gtsw);
                      while(local_u8gtsw!='1' && local_u8gtsw !='2' )
    347e:	fe 01       	movw	r30, r28
    3480:	e8 5a       	subi	r30, 0xA8	; 168
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	80 81       	ld	r24, Z
    3486:	81 33       	cpi	r24, 0x31	; 49
    3488:	31 f0       	breq	.+12     	; 0x3496 <main+0x7f8>
    348a:	fe 01       	movw	r30, r28
    348c:	e8 5a       	subi	r30, 0xA8	; 168
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	82 33       	cpi	r24, 0x32	; 50
    3494:	e1 f6       	brne	.-72     	; 0x344e <main+0x7b0>
                      while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                      {
                      KPD_u8getswitch(&local_u8gtsw);
                      }
                      }
                      LCD_Clear();
    3496:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    349a:	3f c0       	rjmp	.+126    	; 0x351a <main+0x87c>
                      while(local_u8gtsw=='1')
                      {
                           LCD_VoidSendStr("1-CW ");
    349c:	82 ea       	ldi	r24, 0xA2	; 162
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                           LCD_voidGotoXY(2,0);
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                           LCD_VoidSendStr("2- CCW");
    34ac:	88 ea       	ldi	r24, 0xA8	; 168
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                           KPD_u8getswitch(&local_u8gtsw);
    34b4:	ce 01       	movw	r24, r28
    34b6:	88 5a       	subi	r24, 0xA8	; 168
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ba:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    34be:	05 c0       	rjmp	.+10     	; 0x34ca <main+0x82c>
                           while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                           {
                           KPD_u8getswitch(&local_u8gtsw);
    34c0:	ce 01       	movw	r24, r28
    34c2:	88 5a       	subi	r24, 0xA8	; 168
    34c4:	9f 4f       	sbci	r25, 0xFF	; 255
    34c6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                      {
                           LCD_VoidSendStr("1-CW ");
                           LCD_voidGotoXY(2,0);
                           LCD_VoidSendStr("2- CCW");
                           KPD_u8getswitch(&local_u8gtsw);
                           while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    34ca:	fe 01       	movw	r30, r28
    34cc:	e8 5a       	subi	r30, 0xA8	; 168
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	8f 3f       	cpi	r24, 0xFF	; 255
    34d4:	a9 f3       	breq	.-22     	; 0x34c0 <main+0x822>
    34d6:	0a c0       	rjmp	.+20     	; 0x34ec <main+0x84e>
                           {
                           KPD_u8getswitch(&local_u8gtsw);
                           }
                           while(local_u8gtsw=='1')
                           {
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	60 e0       	ldi	r22, 0x00	; 0
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	61 e0       	ldi	r22, 0x01	; 1
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                           KPD_u8getswitch(&local_u8gtsw);
                           while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                           {
                           KPD_u8getswitch(&local_u8gtsw);
                           }
                           while(local_u8gtsw=='1')
    34ec:	fe 01       	movw	r30, r28
    34ee:	e8 5a       	subi	r30, 0xA8	; 168
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	81 33       	cpi	r24, 0x31	; 49
    34f6:	81 f3       	breq	.-32     	; 0x34d8 <main+0x83a>
    34f8:	0a c0       	rjmp	.+20     	; 0x350e <main+0x870>
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
                           }
                           while(local_u8gtsw=='2')
                           {
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
    34fa:	82 e0       	ldi	r24, 0x02	; 2
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	61 e0       	ldi	r22, 0x01	; 1
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                           while(local_u8gtsw=='1')
                           {
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
                           }
                           while(local_u8gtsw=='2')
    350e:	fe 01       	movw	r30, r28
    3510:	e8 5a       	subi	r30, 0xA8	; 168
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	80 81       	ld	r24, Z
    3516:	82 33       	cpi	r24, 0x32	; 50
    3518:	81 f3       	breq	.-32     	; 0x34fa <main+0x85c>
                      {
                      KPD_u8getswitch(&local_u8gtsw);
                      }
                      }
                      LCD_Clear();
                      while(local_u8gtsw=='1')
    351a:	fe 01       	movw	r30, r28
    351c:	e8 5a       	subi	r30, 0xA8	; 168
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 81       	ld	r24, Z
    3522:	81 33       	cpi	r24, 0x31	; 49
    3524:	09 f4       	brne	.+2      	; 0x3528 <main+0x88a>
    3526:	ba cf       	rjmp	.-140    	; 0x349c <main+0x7fe>
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
                           }

                      }
                      LCD_Clear();
    3528:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    352c:	36 c0       	rjmp	.+108    	; 0x359a <main+0x8fc>
                      while(local_u8gtsw=='2' || local_u8gtsw !='%')
                      {
                     	 LCD_VoidSendStr("Enter Angel = ");
    352e:	8f ea       	ldi	r24, 0xAF	; 175
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3536:	2b c0       	rjmp	.+86     	; 0x358e <main+0x8f0>
                     	 while( local_u8gtsw !='%')
                     	 {
                     		 KPD_u8getswitch(&local_u8gtsw);
    3538:	ce 01       	movw	r24, r28
    353a:	88 5a       	subi	r24, 0xA8	; 168
    353c:	9f 4f       	sbci	r25, 0xFF	; 255
    353e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                     		 if(local_u8gtsw!=KPD_U8_NOT_PRESSED)
    3542:	fe 01       	movw	r30, r28
    3544:	e8 5a       	subi	r30, 0xA8	; 168
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	8f 3f       	cpi	r24, 0xFF	; 255
    354c:	01 f1       	breq	.+64     	; 0x358e <main+0x8f0>
                     		 {
                     		 LCD_voidSendChar(local_u8gtsw);
    354e:	fe 01       	movw	r30, r28
    3550:	e8 5a       	subi	r30, 0xA8	; 168
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
                     	     temp[x]=local_u8gtsw;
    355a:	fe 01       	movw	r30, r28
    355c:	ea 5a       	subi	r30, 0xAA	; 170
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 81       	ld	r24, Z
    3562:	28 2f       	mov	r18, r24
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	fe 01       	movw	r30, r28
    3568:	e8 5a       	subi	r30, 0xA8	; 168
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	40 81       	ld	r20, Z
    356e:	ce 01       	movw	r24, r28
    3570:	83 5a       	subi	r24, 0xA3	; 163
    3572:	9f 4f       	sbci	r25, 0xFF	; 255
    3574:	fc 01       	movw	r30, r24
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	40 83       	st	Z, r20
                     	     x++;
    357c:	de 01       	movw	r26, r28
    357e:	aa 5a       	subi	r26, 0xAA	; 170
    3580:	bf 4f       	sbci	r27, 0xFF	; 255
    3582:	fe 01       	movw	r30, r28
    3584:	ea 5a       	subi	r30, 0xAA	; 170
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	8f 5f       	subi	r24, 0xFF	; 255
    358c:	8c 93       	st	X, r24
                      }
                      LCD_Clear();
                      while(local_u8gtsw=='2' || local_u8gtsw !='%')
                      {
                     	 LCD_VoidSendStr("Enter Angel = ");
                     	 while( local_u8gtsw !='%')
    358e:	fe 01       	movw	r30, r28
    3590:	e8 5a       	subi	r30, 0xA8	; 168
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 81       	ld	r24, Z
    3596:	85 32       	cpi	r24, 0x25	; 37
    3598:	79 f6       	brne	.-98     	; 0x3538 <main+0x89a>
                         	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
                           }

                      }
                      LCD_Clear();
                      while(local_u8gtsw=='2' || local_u8gtsw !='%')
    359a:	fe 01       	movw	r30, r28
    359c:	e8 5a       	subi	r30, 0xA8	; 168
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	80 81       	ld	r24, Z
    35a2:	82 33       	cpi	r24, 0x32	; 50
    35a4:	21 f2       	breq	.-120    	; 0x352e <main+0x890>
    35a6:	fe 01       	movw	r30, r28
    35a8:	e8 5a       	subi	r30, 0xA8	; 168
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	80 81       	ld	r24, Z
    35ae:	85 32       	cpi	r24, 0x25	; 37
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <main+0x916>
    35b2:	bd cf       	rjmp	.-134    	; 0x352e <main+0x890>
                     	     temp[x]=local_u8gtsw;
                     	     x++;
                     		 }
                     	 }
                      }
                     	 LCD_Clear();
    35b4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    35b8:	1d c0       	rjmp	.+58     	; 0x35f4 <main+0x956>
                     	 while(local_u8gtsw != '1' && local_u8gtsw != '2' )
                     	 {

                              LCD_VoidSendStr("1-CW ");
    35ba:	82 ea       	ldi	r24, 0xA2	; 162
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                              LCD_voidGotoXY(2,0);
    35c2:	82 e0       	ldi	r24, 0x02	; 2
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                              LCD_VoidSendStr("2- CCW");
    35ca:	88 ea       	ldi	r24, 0xA8	; 168
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                              KPD_u8getswitch(&local_u8gtsw);
    35d2:	ce 01       	movw	r24, r28
    35d4:	88 5a       	subi	r24, 0xA8	; 168
    35d6:	9f 4f       	sbci	r25, 0xFF	; 255
    35d8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    35dc:	05 c0       	rjmp	.+10     	; 0x35e8 <main+0x94a>
                           	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                  {
                                   KPD_u8getswitch(&local_u8gtsw);
    35de:	ce 01       	movw	r24, r28
    35e0:	88 5a       	subi	r24, 0xA8	; 168
    35e2:	9f 4f       	sbci	r25, 0xFF	; 255
    35e4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>

                              LCD_VoidSendStr("1-CW ");
                              LCD_voidGotoXY(2,0);
                              LCD_VoidSendStr("2- CCW");
                              KPD_u8getswitch(&local_u8gtsw);
                           	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    35e8:	fe 01       	movw	r30, r28
    35ea:	e8 5a       	subi	r30, 0xA8	; 168
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	8f 3f       	cpi	r24, 0xFF	; 255
    35f2:	a9 f3       	breq	.-22     	; 0x35de <main+0x940>
                     	     x++;
                     		 }
                     	 }
                      }
                     	 LCD_Clear();
                     	 while(local_u8gtsw != '1' && local_u8gtsw != '2' )
    35f4:	fe 01       	movw	r30, r28
    35f6:	e8 5a       	subi	r30, 0xA8	; 168
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	81 33       	cpi	r24, 0x31	; 49
    35fe:	69 f1       	breq	.+90     	; 0x365a <main+0x9bc>
    3600:	fe 01       	movw	r30, r28
    3602:	e8 5a       	subi	r30, 0xA8	; 168
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	82 33       	cpi	r24, 0x32	; 50
    360a:	b9 f6       	brne	.-82     	; 0x35ba <main+0x91c>
    360c:	26 c0       	rjmp	.+76     	; 0x365a <main+0x9bc>
                                   KPD_u8getswitch(&local_u8gtsw);
                                  }
                         }
                     	 while(local_u8gtsw== '1')
                     	 {
                     		 local_u8gtsw -= '0';
    360e:	fe 01       	movw	r30, r28
    3610:	e8 5a       	subi	r30, 0xA8	; 168
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	80 53       	subi	r24, 0x30	; 48
    3618:	fe 01       	movw	r30, r28
    361a:	e8 5a       	subi	r30, 0xA8	; 168
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 83       	st	Z, r24
                     		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
    3620:	ce 01       	movw	r24, r28
    3622:	83 5a       	subi	r24, 0xA3	; 163
    3624:	9f 4f       	sbci	r25, 0xFF	; 255
    3626:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <fun2>
    362a:	fe 01       	movw	r30, r28
    362c:	e8 5a       	subi	r30, 0xA8	; 168
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	20 81       	ld	r18, Z
    3632:	62 2f       	mov	r22, r18
    3634:	0e 94 e6 10 	call	0x21cc	; 0x21cc <STEPPER_MOTOR_voiddrive>
                              KPD_u8getswitch(&local_u8gtsw);
    3638:	ce 01       	movw	r24, r28
    363a:	88 5a       	subi	r24, 0xA8	; 168
    363c:	9f 4f       	sbci	r25, 0xFF	; 255
    363e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    3642:	05 c0       	rjmp	.+10     	; 0x364e <main+0x9b0>
                           	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                  {
                           		  KPD_u8getswitch(&local_u8gtsw);
    3644:	ce 01       	movw	r24, r28
    3646:	88 5a       	subi	r24, 0xA8	; 168
    3648:	9f 4f       	sbci	r25, 0xFF	; 255
    364a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                     	 while(local_u8gtsw== '1')
                     	 {
                     		 local_u8gtsw -= '0';
                     		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
                              KPD_u8getswitch(&local_u8gtsw);
                           	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    364e:	fe 01       	movw	r30, r28
    3650:	e8 5a       	subi	r30, 0xA8	; 168
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 81       	ld	r24, Z
    3656:	8f 3f       	cpi	r24, 0xFF	; 255
    3658:	a9 f3       	breq	.-22     	; 0x3644 <main+0x9a6>
                           	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                  {
                                   KPD_u8getswitch(&local_u8gtsw);
                                  }
                         }
                     	 while(local_u8gtsw== '1')
    365a:	fe 01       	movw	r30, r28
    365c:	e8 5a       	subi	r30, 0xA8	; 168
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 81       	ld	r24, Z
    3662:	81 33       	cpi	r24, 0x31	; 49
    3664:	a1 f2       	breq	.-88     	; 0x360e <main+0x970>
    3666:	26 c0       	rjmp	.+76     	; 0x36b4 <main+0xa16>
                     	      }

                     	 }
                      	 while(local_u8gtsw== '2')
                         	 {
                         		 local_u8gtsw -= '0';
    3668:	fe 01       	movw	r30, r28
    366a:	e8 5a       	subi	r30, 0xA8	; 168
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	80 81       	ld	r24, Z
    3670:	80 53       	subi	r24, 0x30	; 48
    3672:	fe 01       	movw	r30, r28
    3674:	e8 5a       	subi	r30, 0xA8	; 168
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 83       	st	Z, r24
                         		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
    367a:	ce 01       	movw	r24, r28
    367c:	83 5a       	subi	r24, 0xA3	; 163
    367e:	9f 4f       	sbci	r25, 0xFF	; 255
    3680:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <fun2>
    3684:	fe 01       	movw	r30, r28
    3686:	e8 5a       	subi	r30, 0xA8	; 168
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	20 81       	ld	r18, Z
    368c:	62 2f       	mov	r22, r18
    368e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <STEPPER_MOTOR_voiddrive>
                                  KPD_u8getswitch(&local_u8gtsw);
    3692:	ce 01       	movw	r24, r28
    3694:	88 5a       	subi	r24, 0xA8	; 168
    3696:	9f 4f       	sbci	r25, 0xFF	; 255
    3698:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    369c:	05 c0       	rjmp	.+10     	; 0x36a8 <main+0xa0a>
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                      {
                               		  KPD_u8getswitch(&local_u8gtsw);
    369e:	ce 01       	movw	r24, r28
    36a0:	88 5a       	subi	r24, 0xA8	; 168
    36a2:	9f 4f       	sbci	r25, 0xFF	; 255
    36a4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                      	 while(local_u8gtsw== '2')
                         	 {
                         		 local_u8gtsw -= '0';
                         		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
                                  KPD_u8getswitch(&local_u8gtsw);
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    36a8:	fe 01       	movw	r30, r28
    36aa:	e8 5a       	subi	r30, 0xA8	; 168
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	8f 3f       	cpi	r24, 0xFF	; 255
    36b2:	a9 f3       	breq	.-22     	; 0x369e <main+0xa00>
                                  {
                           		  KPD_u8getswitch(&local_u8gtsw);
                     	      }

                     	 }
                      	 while(local_u8gtsw== '2')
    36b4:	fe 01       	movw	r30, r28
    36b6:	e8 5a       	subi	r30, 0xA8	; 168
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	80 81       	ld	r24, Z
    36bc:	82 33       	cpi	r24, 0x32	; 50
    36be:	a1 f2       	breq	.-88     	; 0x3668 <main+0x9ca>
    36c0:	85 c0       	rjmp	.+266    	; 0x37cc <main+0xb2e>
                         	      }

                         	 }
                      }

           else  if(check==2)
    36c2:	fe 01       	movw	r30, r28
    36c4:	e9 5a       	subi	r30, 0xA9	; 169
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 81       	ld	r24, Z
    36ca:	82 30       	cpi	r24, 0x02	; 2
    36cc:	09 f0       	breq	.+2      	; 0x36d0 <main+0xa32>
    36ce:	7e c0       	rjmp	.+252    	; 0x37cc <main+0xb2e>
                {
               	 LCD_VoidSendStr("ENTER YOUER PASSWORD");
    36d0:	80 e6       	ldi	r24, 0x60	; 96
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
               	 LCD_voidGotoXY(2,0);
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
               	 LCD_VoidSendStr("Wrong Password");
    36e0:	8e eb       	ldi	r24, 0xBE	; 190
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	aa e7       	ldi	r26, 0x7A	; 122
    36ee:	b4 e4       	ldi	r27, 0x44	; 68
    36f0:	8f a3       	std	Y+39, r24	; 0x27
    36f2:	98 a7       	std	Y+40, r25	; 0x28
    36f4:	a9 a7       	std	Y+41, r26	; 0x29
    36f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	6f a1       	ldd	r22, Y+39	; 0x27
    36fa:	78 a5       	ldd	r23, Y+40	; 0x28
    36fc:	89 a5       	ldd	r24, Y+41	; 0x29
    36fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a ef       	ldi	r20, 0xFA	; 250
    3706:	54 e4       	ldi	r21, 0x44	; 68
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8b a3       	std	Y+35, r24	; 0x23
    3712:	9c a3       	std	Y+36, r25	; 0x24
    3714:	ad a3       	std	Y+37, r26	; 0x25
    3716:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3718:	6b a1       	ldd	r22, Y+35	; 0x23
    371a:	7c a1       	ldd	r23, Y+36	; 0x24
    371c:	8d a1       	ldd	r24, Y+37	; 0x25
    371e:	9e a1       	ldd	r25, Y+38	; 0x26
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <main+0xa9c>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9a a3       	std	Y+34, r25	; 0x22
    3736:	89 a3       	std	Y+33, r24	; 0x21
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <main+0xb1a>
	else if (__tmp > 65535)
    373a:	6b a1       	ldd	r22, Y+35	; 0x23
    373c:	7c a1       	ldd	r23, Y+36	; 0x24
    373e:	8d a1       	ldd	r24, Y+37	; 0x25
    3740:	9e a1       	ldd	r25, Y+38	; 0x26
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <main+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	6f a1       	ldd	r22, Y+39	; 0x27
    3754:	78 a5       	ldd	r23, Y+40	; 0x28
    3756:	89 a5       	ldd	r24, Y+41	; 0x29
    3758:	9a a5       	ldd	r25, Y+42	; 0x2a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9a a3       	std	Y+34, r25	; 0x22
    3778:	89 a3       	std	Y+33, r24	; 0x21
    377a:	0f c0       	rjmp	.+30     	; 0x379a <main+0xafc>
    377c:	88 ec       	ldi	r24, 0xC8	; 200
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	98 a3       	std	Y+32, r25	; 0x20
    3782:	8f 8f       	std	Y+31, r24	; 0x1f
    3784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3786:	98 a1       	ldd	r25, Y+32	; 0x20
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <main+0xaea>
    378c:	98 a3       	std	Y+32, r25	; 0x20
    378e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	89 a1       	ldd	r24, Y+33	; 0x21
    3792:	9a a1       	ldd	r25, Y+34	; 0x22
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9a a3       	std	Y+34, r25	; 0x22
    3798:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	89 a1       	ldd	r24, Y+33	; 0x21
    379c:	9a a1       	ldd	r25, Y+34	; 0x22
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <main+0xade>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <main+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6b a1       	ldd	r22, Y+35	; 0x23
    37a6:	7c a1       	ldd	r23, Y+36	; 0x24
    37a8:	8d a1       	ldd	r24, Y+37	; 0x25
    37aa:	9e a1       	ldd	r25, Y+38	; 0x26
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9a a3       	std	Y+34, r25	; 0x22
    37b6:	89 a3       	std	Y+33, r24	; 0x21
    37b8:	89 a1       	ldd	r24, Y+33	; 0x21
    37ba:	9a a1       	ldd	r25, Y+34	; 0x22
    37bc:	9e 8f       	std	Y+30, r25	; 0x1e
    37be:	8d 8f       	std	Y+29, r24	; 0x1d
    37c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <main+0xb26>
    37c8:	9e 8f       	std	Y+30, r25	; 0x1e
    37ca:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(1000);
                }
               i=0;
    37cc:	10 92 f6 00 	sts	0x00F6, r1
               LCD_Clear();
    37d0:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
               LCD_VoidSendStr("ENTER YOUER PASSWORD");
    37d4:	80 e6       	ldi	r24, 0x60	; 96
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
               KPD_u8getswitch(&local_u8gtsw);
    37dc:	ce 01       	movw	r24, r28
    37de:	88 5a       	subi	r24, 0xA8	; 168
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    37e6:	28 c0       	rjmp	.+80     	; 0x3838 <main+0xb9a>
               while(local_u8gtsw != '0')
             	{

             		KPD_u8getswitch(&local_u8gtsw);
    37e8:	ce 01       	movw	r24, r28
    37ea:	88 5a       	subi	r24, 0xA8	; 168
    37ec:	9f 4f       	sbci	r25, 0xFF	; 255
    37ee:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
             		if(local_u8gtsw!=KPD_U8_NOT_PRESSED)
    37f2:	fe 01       	movw	r30, r28
    37f4:	e8 5a       	subi	r30, 0xA8	; 168
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 81       	ld	r24, Z
    37fa:	8f 3f       	cpi	r24, 0xFF	; 255
    37fc:	e9 f0       	breq	.+58     	; 0x3838 <main+0xb9a>
             		{
             		LCD_voidGotoXY(2,i);
    37fe:	90 91 f6 00 	lds	r25, 0x00F6
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	69 2f       	mov	r22, r25
    3806:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
             		LCD_voidSendChar('*');
    380a:	8a e2       	ldi	r24, 0x2A	; 42
    380c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
             		arr[i]=local_u8gtsw;
    3810:	80 91 f6 00 	lds	r24, 0x00F6
    3814:	28 2f       	mov	r18, r24
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	fe 01       	movw	r30, r28
    381a:	e8 5a       	subi	r30, 0xA8	; 168
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	40 81       	ld	r20, Z
    3820:	ce 01       	movw	r24, r28
    3822:	87 5a       	subi	r24, 0xA7	; 167
    3824:	9f 4f       	sbci	r25, 0xFF	; 255
    3826:	fc 01       	movw	r30, r24
    3828:	e2 0f       	add	r30, r18
    382a:	f3 1f       	adc	r31, r19
    382c:	40 83       	st	Z, r20
             		i++;
    382e:	80 91 f6 00 	lds	r24, 0x00F6
    3832:	8f 5f       	subi	r24, 0xFF	; 255
    3834:	80 93 f6 00 	sts	0x00F6, r24
                }
               i=0;
               LCD_Clear();
               LCD_VoidSendStr("ENTER YOUER PASSWORD");
               KPD_u8getswitch(&local_u8gtsw);
               while(local_u8gtsw != '0')
    3838:	fe 01       	movw	r30, r28
    383a:	e8 5a       	subi	r30, 0xA8	; 168
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	80 33       	cpi	r24, 0x30	; 48
    3842:	91 f6       	brne	.-92     	; 0x37e8 <main+0xb4a>
             		i++;
             	    }
             	}


                     check = fun(arr);
    3844:	ce 01       	movw	r24, r28
    3846:	87 5a       	subi	r24, 0xA7	; 167
    3848:	9f 4f       	sbci	r25, 0xFF	; 255
    384a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <fun>
    384e:	fe 01       	movw	r30, r28
    3850:	e9 5a       	subi	r30, 0xA9	; 169
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 83       	st	Z, r24
                     LCD_Clear();
    3856:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
                     if(check==1  )
    385a:	fe 01       	movw	r30, r28
    385c:	e9 5a       	subi	r30, 0xA9	; 169
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 81       	ld	r24, Z
    3862:	81 30       	cpi	r24, 0x01	; 1
    3864:	09 f0       	breq	.+2      	; 0x3868 <main+0xbca>
    3866:	c3 c1       	rjmp	.+902    	; 0x3bee <main+0xf50>
                      {

                     	 LCD_voidGotoXY(1,4);
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	64 e0       	ldi	r22, 0x04	; 4
    386c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                     	 LCD_VoidSendStr("Welcome");
    3870:	85 e7       	ldi	r24, 0x75	; 117
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                     	 LCD_voidGotoXY(2,4);
    3878:	82 e0       	ldi	r24, 0x02	; 2
    387a:	64 e0       	ldi	r22, 0x04	; 4
    387c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                     	 LCD_VoidSendStr("Mohamed");
    3880:	8d e7       	ldi	r24, 0x7D	; 125
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	aa e7       	ldi	r26, 0x7A	; 122
    388e:	b4 e4       	ldi	r27, 0x44	; 68
    3890:	89 8f       	std	Y+25, r24	; 0x19
    3892:	9a 8f       	std	Y+26, r25	; 0x1a
    3894:	ab 8f       	std	Y+27, r26	; 0x1b
    3896:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3898:	69 8d       	ldd	r22, Y+25	; 0x19
    389a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    389c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    389e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	4a ef       	ldi	r20, 0xFA	; 250
    38a6:	54 e4       	ldi	r21, 0x44	; 68
    38a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	8d 8b       	std	Y+21, r24	; 0x15
    38b2:	9e 8b       	std	Y+22, r25	; 0x16
    38b4:	af 8b       	std	Y+23, r26	; 0x17
    38b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38b8:	6d 89       	ldd	r22, Y+21	; 0x15
    38ba:	7e 89       	ldd	r23, Y+22	; 0x16
    38bc:	8f 89       	ldd	r24, Y+23	; 0x17
    38be:	98 8d       	ldd	r25, Y+24	; 0x18
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e8       	ldi	r20, 0x80	; 128
    38c6:	5f e3       	ldi	r21, 0x3F	; 63
    38c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38cc:	88 23       	and	r24, r24
    38ce:	2c f4       	brge	.+10     	; 0x38da <main+0xc3c>
		__ticks = 1;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	9c 8b       	std	Y+20, r25	; 0x14
    38d6:	8b 8b       	std	Y+19, r24	; 0x13
    38d8:	3f c0       	rjmp	.+126    	; 0x3958 <main+0xcba>
	else if (__tmp > 65535)
    38da:	6d 89       	ldd	r22, Y+21	; 0x15
    38dc:	7e 89       	ldd	r23, Y+22	; 0x16
    38de:	8f 89       	ldd	r24, Y+23	; 0x17
    38e0:	98 8d       	ldd	r25, Y+24	; 0x18
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	3f ef       	ldi	r19, 0xFF	; 255
    38e6:	4f e7       	ldi	r20, 0x7F	; 127
    38e8:	57 e4       	ldi	r21, 0x47	; 71
    38ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ee:	18 16       	cp	r1, r24
    38f0:	4c f5       	brge	.+82     	; 0x3944 <main+0xca6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f2:	69 8d       	ldd	r22, Y+25	; 0x19
    38f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e2       	ldi	r20, 0x20	; 32
    3900:	51 e4       	ldi	r21, 0x41	; 65
    3902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	bc 01       	movw	r22, r24
    390c:	cd 01       	movw	r24, r26
    390e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	9c 8b       	std	Y+20, r25	; 0x14
    3918:	8b 8b       	std	Y+19, r24	; 0x13
    391a:	0f c0       	rjmp	.+30     	; 0x393a <main+0xc9c>
    391c:	88 ec       	ldi	r24, 0xC8	; 200
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	9a 8b       	std	Y+18, r25	; 0x12
    3922:	89 8b       	std	Y+17, r24	; 0x11
    3924:	89 89       	ldd	r24, Y+17	; 0x11
    3926:	9a 89       	ldd	r25, Y+18	; 0x12
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	f1 f7       	brne	.-4      	; 0x3928 <main+0xc8a>
    392c:	9a 8b       	std	Y+18, r25	; 0x12
    392e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3930:	8b 89       	ldd	r24, Y+19	; 0x13
    3932:	9c 89       	ldd	r25, Y+20	; 0x14
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	9c 8b       	std	Y+20, r25	; 0x14
    3938:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393a:	8b 89       	ldd	r24, Y+19	; 0x13
    393c:	9c 89       	ldd	r25, Y+20	; 0x14
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	69 f7       	brne	.-38     	; 0x391c <main+0xc7e>
    3942:	14 c0       	rjmp	.+40     	; 0x396c <main+0xcce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3944:	6d 89       	ldd	r22, Y+21	; 0x15
    3946:	7e 89       	ldd	r23, Y+22	; 0x16
    3948:	8f 89       	ldd	r24, Y+23	; 0x17
    394a:	98 8d       	ldd	r25, Y+24	; 0x18
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9c 8b       	std	Y+20, r25	; 0x14
    3956:	8b 8b       	std	Y+19, r24	; 0x13
    3958:	8b 89       	ldd	r24, Y+19	; 0x13
    395a:	9c 89       	ldd	r25, Y+20	; 0x14
    395c:	98 8b       	std	Y+16, r25	; 0x10
    395e:	8f 87       	std	Y+15, r24	; 0x0f
    3960:	8f 85       	ldd	r24, Y+15	; 0x0f
    3962:	98 89       	ldd	r25, Y+16	; 0x10
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <main+0xcc6>
    3968:	98 8b       	std	Y+16, r25	; 0x10
    396a:	8f 87       	std	Y+15, r24	; 0x0f
                     	 _delay_ms(1000);
                          LCD_Clear();
    396c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
                          KPD_u8getswitch(&local_u8gtsw);
    3970:	ce 01       	movw	r24, r28
    3972:	88 5a       	subi	r24, 0xA8	; 168
    3974:	9f 4f       	sbci	r25, 0xFF	; 255
    3976:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    397a:	18 c0       	rjmp	.+48     	; 0x39ac <main+0xd0e>
                          while(local_u8gtsw!='1' && local_u8gtsw !='2' )
                          {
                          LCD_VoidSendStr("1- DC MOTOR");
    397c:	85 e8       	ldi	r24, 0x85	; 133
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                          LCD_voidGotoXY(2,0);
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                          LCD_VoidSendStr("2- STEPPER MOTOR");
    398c:	81 e9       	ldi	r24, 0x91	; 145
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3994:	05 c0       	rjmp	.+10     	; 0x39a0 <main+0xd02>
                          while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                          {
                          KPD_u8getswitch(&local_u8gtsw);
    3996:	ce 01       	movw	r24, r28
    3998:	88 5a       	subi	r24, 0xA8	; 168
    399a:	9f 4f       	sbci	r25, 0xFF	; 255
    399c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                          while(local_u8gtsw!='1' && local_u8gtsw !='2' )
                          {
                          LCD_VoidSendStr("1- DC MOTOR");
                          LCD_voidGotoXY(2,0);
                          LCD_VoidSendStr("2- STEPPER MOTOR");
                          while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    39a0:	fe 01       	movw	r30, r28
    39a2:	e8 5a       	subi	r30, 0xA8	; 168
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	8f 3f       	cpi	r24, 0xFF	; 255
    39aa:	a9 f3       	breq	.-22     	; 0x3996 <main+0xcf8>
                     	 LCD_voidGotoXY(2,4);
                     	 LCD_VoidSendStr("Mohamed");
                     	 _delay_ms(1000);
                          LCD_Clear();
                          KPD_u8getswitch(&local_u8gtsw);
                          while(local_u8gtsw!='1' && local_u8gtsw !='2' )
    39ac:	fe 01       	movw	r30, r28
    39ae:	e8 5a       	subi	r30, 0xA8	; 168
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	81 33       	cpi	r24, 0x31	; 49
    39b6:	31 f0       	breq	.+12     	; 0x39c4 <main+0xd26>
    39b8:	fe 01       	movw	r30, r28
    39ba:	e8 5a       	subi	r30, 0xA8	; 168
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	82 33       	cpi	r24, 0x32	; 50
    39c2:	e1 f6       	brne	.-72     	; 0x397c <main+0xcde>
                          while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                          {
                          KPD_u8getswitch(&local_u8gtsw);
                          }
                          }
                          LCD_Clear();
    39c4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    39c8:	3f c0       	rjmp	.+126    	; 0x3a48 <main+0xdaa>
                          while(local_u8gtsw=='1')
                          {
                               LCD_VoidSendStr("1-CW ");
    39ca:	82 ea       	ldi	r24, 0xA2	; 162
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                               LCD_voidGotoXY(2,0);
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                               LCD_VoidSendStr("2- CCW");
    39da:	88 ea       	ldi	r24, 0xA8	; 168
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                               KPD_u8getswitch(&local_u8gtsw);
    39e2:	ce 01       	movw	r24, r28
    39e4:	88 5a       	subi	r24, 0xA8	; 168
    39e6:	9f 4f       	sbci	r25, 0xFF	; 255
    39e8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <main+0xd5a>
                               while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                               {
                               KPD_u8getswitch(&local_u8gtsw);
    39ee:	ce 01       	movw	r24, r28
    39f0:	88 5a       	subi	r24, 0xA8	; 168
    39f2:	9f 4f       	sbci	r25, 0xFF	; 255
    39f4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                          {
                               LCD_VoidSendStr("1-CW ");
                               LCD_voidGotoXY(2,0);
                               LCD_VoidSendStr("2- CCW");
                               KPD_u8getswitch(&local_u8gtsw);
                               while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    39f8:	fe 01       	movw	r30, r28
    39fa:	e8 5a       	subi	r30, 0xA8	; 168
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	80 81       	ld	r24, Z
    3a00:	8f 3f       	cpi	r24, 0xFF	; 255
    3a02:	a9 f3       	breq	.-22     	; 0x39ee <main+0xd50>
    3a04:	0a c0       	rjmp	.+20     	; 0x3a1a <main+0xd7c>
                               {
                               KPD_u8getswitch(&local_u8gtsw);
                               }
                               while(local_u8gtsw=='1')
                               {
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	60 e0       	ldi	r22, 0x00	; 0
    3a0a:	41 e0       	ldi	r20, 0x01	; 1
    3a0c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
    3a10:	82 e0       	ldi	r24, 0x02	; 2
    3a12:	61 e0       	ldi	r22, 0x01	; 1
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                               KPD_u8getswitch(&local_u8gtsw);
                               while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                               {
                               KPD_u8getswitch(&local_u8gtsw);
                               }
                               while(local_u8gtsw=='1')
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e8 5a       	subi	r30, 0xA8	; 168
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	81 33       	cpi	r24, 0x31	; 49
    3a24:	81 f3       	breq	.-32     	; 0x3a06 <main+0xd68>
    3a26:	0a c0       	rjmp	.+20     	; 0x3a3c <main+0xd9e>
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
                               }
                               while(local_u8gtsw=='2')
                               {
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	61 e0       	ldi	r22, 0x01	; 1
    3a36:	41 e0       	ldi	r20, 0x01	; 1
    3a38:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinValue>
                               while(local_u8gtsw=='1')
                               {
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
                               }
                               while(local_u8gtsw=='2')
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e8 5a       	subi	r30, 0xA8	; 168
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	80 81       	ld	r24, Z
    3a44:	82 33       	cpi	r24, 0x32	; 50
    3a46:	81 f3       	breq	.-32     	; 0x3a28 <main+0xd8a>
                          {
                          KPD_u8getswitch(&local_u8gtsw);
                          }
                          }
                          LCD_Clear();
                          while(local_u8gtsw=='1')
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e8 5a       	subi	r30, 0xA8	; 168
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 81       	ld	r24, Z
    3a50:	81 33       	cpi	r24, 0x31	; 49
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <main+0xdb8>
    3a54:	ba cf       	rjmp	.-140    	; 0x39ca <main+0xd2c>
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
                               }

                          }
                          LCD_Clear();
    3a56:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    3a5a:	36 c0       	rjmp	.+108    	; 0x3ac8 <main+0xe2a>
                          while(local_u8gtsw=='2' || local_u8gtsw !='%')
                          {
                         	 LCD_VoidSendStr("Enter Angel = ");
    3a5c:	8f ea       	ldi	r24, 0xAF	; 175
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3a64:	2b c0       	rjmp	.+86     	; 0x3abc <main+0xe1e>
                         	 while( local_u8gtsw !='%')
                         	 {
                         		 KPD_u8getswitch(&local_u8gtsw);
    3a66:	ce 01       	movw	r24, r28
    3a68:	88 5a       	subi	r24, 0xA8	; 168
    3a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                         		 if(local_u8gtsw!=KPD_U8_NOT_PRESSED)
    3a70:	fe 01       	movw	r30, r28
    3a72:	e8 5a       	subi	r30, 0xA8	; 168
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 81       	ld	r24, Z
    3a78:	8f 3f       	cpi	r24, 0xFF	; 255
    3a7a:	01 f1       	breq	.+64     	; 0x3abc <main+0xe1e>
                         		 {
                         		 LCD_voidSendChar(local_u8gtsw);
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e8 5a       	subi	r30, 0xA8	; 168
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	80 81       	ld	r24, Z
    3a84:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <LCD_voidSendChar>
                         	     temp[x]=local_u8gtsw ;
    3a88:	fe 01       	movw	r30, r28
    3a8a:	ea 5a       	subi	r30, 0xAA	; 170
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	28 2f       	mov	r18, r24
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	fe 01       	movw	r30, r28
    3a96:	e8 5a       	subi	r30, 0xA8	; 168
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	40 81       	ld	r20, Z
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	83 5a       	subi	r24, 0xA3	; 163
    3aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e2 0f       	add	r30, r18
    3aa6:	f3 1f       	adc	r31, r19
    3aa8:	40 83       	st	Z, r20
                         	     x++;
    3aaa:	de 01       	movw	r26, r28
    3aac:	aa 5a       	subi	r26, 0xAA	; 170
    3aae:	bf 4f       	sbci	r27, 0xFF	; 255
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	ea 5a       	subi	r30, 0xAA	; 170
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 81       	ld	r24, Z
    3ab8:	8f 5f       	subi	r24, 0xFF	; 255
    3aba:	8c 93       	st	X, r24
                          }
                          LCD_Clear();
                          while(local_u8gtsw=='2' || local_u8gtsw !='%')
                          {
                         	 LCD_VoidSendStr("Enter Angel = ");
                         	 while( local_u8gtsw !='%')
    3abc:	fe 01       	movw	r30, r28
    3abe:	e8 5a       	subi	r30, 0xA8	; 168
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	85 32       	cpi	r24, 0x25	; 37
    3ac6:	79 f6       	brne	.-98     	; 0x3a66 <main+0xdc8>
                             	DIO_u8SetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
                               }

                          }
                          LCD_Clear();
                          while(local_u8gtsw=='2' || local_u8gtsw !='%')
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e8 5a       	subi	r30, 0xA8	; 168
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	82 33       	cpi	r24, 0x32	; 50
    3ad2:	21 f2       	breq	.-120    	; 0x3a5c <main+0xdbe>
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e8 5a       	subi	r30, 0xA8	; 168
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 81       	ld	r24, Z
    3adc:	85 32       	cpi	r24, 0x25	; 37
    3ade:	09 f0       	breq	.+2      	; 0x3ae2 <main+0xe44>
    3ae0:	bd cf       	rjmp	.-134    	; 0x3a5c <main+0xdbe>
                         	     temp[x]=local_u8gtsw ;
                         	     x++;
                         		 }
                         	 }
                          }
                         	 LCD_Clear();
    3ae2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
    3ae6:	1d c0       	rjmp	.+58     	; 0x3b22 <main+0xe84>
                         	 while(local_u8gtsw != '1' && local_u8gtsw != '2' )
                         	 {

                                  LCD_VoidSendStr("1-CW ");
    3ae8:	82 ea       	ldi	r24, 0xA2	; 162
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                                  LCD_voidGotoXY(2,0);
    3af0:	82 e0       	ldi	r24, 0x02	; 2
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                                  LCD_VoidSendStr("2- CCW");
    3af8:	88 ea       	ldi	r24, 0xA8	; 168
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                                  KPD_u8getswitch(&local_u8gtsw);
    3b00:	ce 01       	movw	r24, r28
    3b02:	88 5a       	subi	r24, 0xA8	; 168
    3b04:	9f 4f       	sbci	r25, 0xFF	; 255
    3b06:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    3b0a:	05 c0       	rjmp	.+10     	; 0x3b16 <main+0xe78>
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                      {
                                       KPD_u8getswitch(&local_u8gtsw);
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	88 5a       	subi	r24, 0xA8	; 168
    3b10:	9f 4f       	sbci	r25, 0xFF	; 255
    3b12:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>

                                  LCD_VoidSendStr("1-CW ");
                                  LCD_voidGotoXY(2,0);
                                  LCD_VoidSendStr("2- CCW");
                                  KPD_u8getswitch(&local_u8gtsw);
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    3b16:	fe 01       	movw	r30, r28
    3b18:	e8 5a       	subi	r30, 0xA8	; 168
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 81       	ld	r24, Z
    3b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b20:	a9 f3       	breq	.-22     	; 0x3b0c <main+0xe6e>
                         	     x++;
                         		 }
                         	 }
                          }
                         	 LCD_Clear();
                         	 while(local_u8gtsw != '1' && local_u8gtsw != '2' )
    3b22:	fe 01       	movw	r30, r28
    3b24:	e8 5a       	subi	r30, 0xA8	; 168
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	80 81       	ld	r24, Z
    3b2a:	81 33       	cpi	r24, 0x31	; 49
    3b2c:	69 f1       	breq	.+90     	; 0x3b88 <main+0xeea>
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e8 5a       	subi	r30, 0xA8	; 168
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	80 81       	ld	r24, Z
    3b36:	82 33       	cpi	r24, 0x32	; 50
    3b38:	b9 f6       	brne	.-82     	; 0x3ae8 <main+0xe4a>
    3b3a:	26 c0       	rjmp	.+76     	; 0x3b88 <main+0xeea>
                                       KPD_u8getswitch(&local_u8gtsw);
                                      }
                             }
                         	 while(local_u8gtsw== '1')
                         	 {
                         		 local_u8gtsw -= '0';
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e8 5a       	subi	r30, 0xA8	; 168
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	80 53       	subi	r24, 0x30	; 48
    3b46:	fe 01       	movw	r30, r28
    3b48:	e8 5a       	subi	r30, 0xA8	; 168
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	80 83       	st	Z, r24
                         		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
    3b4e:	ce 01       	movw	r24, r28
    3b50:	83 5a       	subi	r24, 0xA3	; 163
    3b52:	9f 4f       	sbci	r25, 0xFF	; 255
    3b54:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <fun2>
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e8 5a       	subi	r30, 0xA8	; 168
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	20 81       	ld	r18, Z
    3b60:	62 2f       	mov	r22, r18
    3b62:	0e 94 e6 10 	call	0x21cc	; 0x21cc <STEPPER_MOTOR_voiddrive>
                                  KPD_u8getswitch(&local_u8gtsw);
    3b66:	ce 01       	movw	r24, r28
    3b68:	88 5a       	subi	r24, 0xA8	; 168
    3b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    3b70:	05 c0       	rjmp	.+10     	; 0x3b7c <main+0xede>
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                      {
                               		  KPD_u8getswitch(&local_u8gtsw);
    3b72:	ce 01       	movw	r24, r28
    3b74:	88 5a       	subi	r24, 0xA8	; 168
    3b76:	9f 4f       	sbci	r25, 0xFF	; 255
    3b78:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                         	 while(local_u8gtsw== '1')
                         	 {
                         		 local_u8gtsw -= '0';
                         		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
                                  KPD_u8getswitch(&local_u8gtsw);
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e8 5a       	subi	r30, 0xA8	; 168
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	80 81       	ld	r24, Z
    3b84:	8f 3f       	cpi	r24, 0xFF	; 255
    3b86:	a9 f3       	breq	.-22     	; 0x3b72 <main+0xed4>
                               	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                      {
                                       KPD_u8getswitch(&local_u8gtsw);
                                      }
                             }
                         	 while(local_u8gtsw== '1')
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e8 5a       	subi	r30, 0xA8	; 168
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	80 81       	ld	r24, Z
    3b90:	81 33       	cpi	r24, 0x31	; 49
    3b92:	a1 f2       	breq	.-88     	; 0x3b3c <main+0xe9e>
    3b94:	26 c0       	rjmp	.+76     	; 0x3be2 <main+0xf44>
                         	      }

                         	 }
                          	 while(local_u8gtsw== '2')
                             	 {
                             		 local_u8gtsw -= '0';
    3b96:	fe 01       	movw	r30, r28
    3b98:	e8 5a       	subi	r30, 0xA8	; 168
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	80 53       	subi	r24, 0x30	; 48
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e8 5a       	subi	r30, 0xA8	; 168
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	80 83       	st	Z, r24
                             		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
    3ba8:	ce 01       	movw	r24, r28
    3baa:	83 5a       	subi	r24, 0xA3	; 163
    3bac:	9f 4f       	sbci	r25, 0xFF	; 255
    3bae:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <fun2>
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e8 5a       	subi	r30, 0xA8	; 168
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	20 81       	ld	r18, Z
    3bba:	62 2f       	mov	r22, r18
    3bbc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <STEPPER_MOTOR_voiddrive>
                                      KPD_u8getswitch(&local_u8gtsw);
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	88 5a       	subi	r24, 0xA8	; 168
    3bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
    3bca:	05 c0       	rjmp	.+10     	; 0x3bd6 <main+0xf38>
                                   	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
                                          {
                                   		  KPD_u8getswitch(&local_u8gtsw);
    3bcc:	ce 01       	movw	r24, r28
    3bce:	88 5a       	subi	r24, 0xA8	; 168
    3bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <KPD_u8getswitch>
                          	 while(local_u8gtsw== '2')
                             	 {
                             		 local_u8gtsw -= '0';
                             		 STEPPER_MOTOR_voiddrive(fun2(temp),local_u8gtsw);
                                      KPD_u8getswitch(&local_u8gtsw);
                                   	 while(local_u8gtsw==KPD_U8_NOT_PRESSED)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e8 5a       	subi	r30, 0xA8	; 168
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	8f 3f       	cpi	r24, 0xFF	; 255
    3be0:	a9 f3       	breq	.-22     	; 0x3bcc <main+0xf2e>
                                      {
                               		  KPD_u8getswitch(&local_u8gtsw);
                         	      }

                         	 }
                          	 while(local_u8gtsw== '2')
    3be2:	fe 01       	movw	r30, r28
    3be4:	e8 5a       	subi	r30, 0xA8	; 168
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	82 33       	cpi	r24, 0x32	; 50
    3bec:	a1 f2       	breq	.-88     	; 0x3b96 <main+0xef8>

                             	 }
                          }


               if(check==2)
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e9 5a       	subi	r30, 0xA9	; 169
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	82 30       	cpi	r24, 0x02	; 2
    3bf8:	09 f0       	breq	.+2      	; 0x3bfc <main+0xf5e>
    3bfa:	84 c0       	rjmp	.+264    	; 0x3d04 <main+0x1066>
                       {
                      	 LCD_VoidSendStr("ENTER YOUER PASSWORD");
    3bfc:	80 e6       	ldi	r24, 0x60	; 96
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                      	 LCD_voidGotoXY(2,0);
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_voidGotoXY>
                      	 LCD_VoidSendStr("Wrong Password");
    3c0c:	8e eb       	ldi	r24, 0xBE	; 190
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	aa e7       	ldi	r26, 0x7A	; 122
    3c1a:	b4 e4       	ldi	r27, 0x44	; 68
    3c1c:	8b 87       	std	Y+11, r24	; 0x0b
    3c1e:	9c 87       	std	Y+12, r25	; 0x0c
    3c20:	ad 87       	std	Y+13, r26	; 0x0d
    3c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	4a ef       	ldi	r20, 0xFA	; 250
    3c32:	54 e4       	ldi	r21, 0x44	; 68
    3c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	8f 83       	std	Y+7, r24	; 0x07
    3c3e:	98 87       	std	Y+8, r25	; 0x08
    3c40:	a9 87       	std	Y+9, r26	; 0x09
    3c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c44:	6f 81       	ldd	r22, Y+7	; 0x07
    3c46:	78 85       	ldd	r23, Y+8	; 0x08
    3c48:	89 85       	ldd	r24, Y+9	; 0x09
    3c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e8       	ldi	r20, 0x80	; 128
    3c52:	5f e3       	ldi	r21, 0x3F	; 63
    3c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c58:	88 23       	and	r24, r24
    3c5a:	2c f4       	brge	.+10     	; 0x3c66 <main+0xfc8>
		__ticks = 1;
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	9e 83       	std	Y+6, r25	; 0x06
    3c62:	8d 83       	std	Y+5, r24	; 0x05
    3c64:	3f c0       	rjmp	.+126    	; 0x3ce4 <main+0x1046>
	else if (__tmp > 65535)
    3c66:	6f 81       	ldd	r22, Y+7	; 0x07
    3c68:	78 85       	ldd	r23, Y+8	; 0x08
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	3f ef       	ldi	r19, 0xFF	; 255
    3c72:	4f e7       	ldi	r20, 0x7F	; 127
    3c74:	57 e4       	ldi	r21, 0x47	; 71
    3c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c7a:	18 16       	cp	r1, r24
    3c7c:	4c f5       	brge	.+82     	; 0x3cd0 <main+0x1032>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e2       	ldi	r20, 0x20	; 32
    3c8c:	51 e4       	ldi	r21, 0x41	; 65
    3c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	bc 01       	movw	r22, r24
    3c98:	cd 01       	movw	r24, r26
    3c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	9e 83       	std	Y+6, r25	; 0x06
    3ca4:	8d 83       	std	Y+5, r24	; 0x05
    3ca6:	0f c0       	rjmp	.+30     	; 0x3cc6 <main+0x1028>
    3ca8:	88 ec       	ldi	r24, 0xC8	; 200
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	9c 83       	std	Y+4, r25	; 0x04
    3cae:	8b 83       	std	Y+3, r24	; 0x03
    3cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	f1 f7       	brne	.-4      	; 0x3cb4 <main+0x1016>
    3cb8:	9c 83       	std	Y+4, r25	; 0x04
    3cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	9e 83       	std	Y+6, r25	; 0x06
    3cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cca:	00 97       	sbiw	r24, 0x00	; 0
    3ccc:	69 f7       	brne	.-38     	; 0x3ca8 <main+0x100a>
    3cce:	14 c0       	rjmp	.+40     	; 0x3cf8 <main+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd2:	78 85       	ldd	r23, Y+8	; 0x08
    3cd4:	89 85       	ldd	r24, Y+9	; 0x09
    3cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	9e 83       	std	Y+6, r25	; 0x06
    3ce2:	8d 83       	std	Y+5, r24	; 0x05
    3ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce8:	9a 83       	std	Y+2, r25	; 0x02
    3cea:	89 83       	std	Y+1, r24	; 0x01
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	f1 f7       	brne	.-4      	; 0x3cf0 <main+0x1052>
    3cf4:	9a 83       	std	Y+2, r25	; 0x02
    3cf6:	89 83       	std	Y+1, r24	; 0x01
                           _delay_ms(1000);
                           LCD_Clear();
    3cf8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_Clear>
                           LCD_VoidSendStr("Refused");
    3cfc:	8d ec       	ldi	r24, 0xCD	; 205
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_VoidSendStr>
                       }




	return 0;
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0
}
    3d08:	cf 59       	subi	r28, 0x9F	; 159
    3d0a:	df 4f       	sbci	r29, 0xFF	; 255
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	08 95       	ret

00003d20 <fun>:

u8 fun(u8 *arr)
{
    3d20:	df 93       	push	r29
    3d22:	cf 93       	push	r28
    3d24:	00 d0       	rcall	.+0      	; 0x3d26 <fun+0x6>
    3d26:	0f 92       	push	r0
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	9a 83       	std	Y+2, r25	; 0x02
    3d2e:	89 83       	std	Y+1, r24	; 0x01

	 	if(arr[0]=='1')
    3d30:	e9 81       	ldd	r30, Y+1	; 0x01
    3d32:	fa 81       	ldd	r31, Y+2	; 0x02
    3d34:	80 81       	ld	r24, Z
    3d36:	81 33       	cpi	r24, 0x31	; 49
    3d38:	09 f5       	brne	.+66     	; 0x3d7c <fun+0x5c>
	 	{
	 	   if(arr[1]=='2')
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	fc 01       	movw	r30, r24
    3d40:	31 96       	adiw	r30, 0x01	; 1
    3d42:	80 81       	ld	r24, Z
    3d44:	82 33       	cpi	r24, 0x32	; 50
    3d46:	b9 f4       	brne	.+46     	; 0x3d76 <fun+0x56>
	 	   {
	 		   if(arr[2]=='3')
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	32 96       	adiw	r30, 0x02	; 2
    3d50:	80 81       	ld	r24, Z
    3d52:	83 33       	cpi	r24, 0x33	; 51
    3d54:	69 f4       	brne	.+26     	; 0x3d70 <fun+0x50>
	 		   {
	 			   if(arr[3]=='4')
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	33 96       	adiw	r30, 0x03	; 3
    3d5e:	80 81       	ld	r24, Z
    3d60:	84 33       	cpi	r24, 0x34	; 52
    3d62:	19 f4       	brne	.+6      	; 0x3d6a <fun+0x4a>
	 			   {
	 				   return 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	8b 83       	std	Y+3, r24	; 0x03
    3d68:	0b c0       	rjmp	.+22     	; 0x3d80 <fun+0x60>
	 			   }
	 			  else return 2;
    3d6a:	82 e0       	ldi	r24, 0x02	; 2
    3d6c:	8b 83       	std	Y+3, r24	; 0x03
    3d6e:	08 c0       	rjmp	.+16     	; 0x3d80 <fun+0x60>
	 		   }
	 		   else return 2;
    3d70:	82 e0       	ldi	r24, 0x02	; 2
    3d72:	8b 83       	std	Y+3, r24	; 0x03
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <fun+0x60>
	 	   }
	 	   else return 2;
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	8b 83       	std	Y+3, r24	; 0x03
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <fun+0x60>
	 	}
	 	else return 2;
    3d7c:	82 e0       	ldi	r24, 0x02	; 2
    3d7e:	8b 83       	std	Y+3, r24	; 0x03
    3d80:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	08 95       	ret

00003d8e <fun2>:

u16 fun2(u8 *arr)
{
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <fun2+0x6>
    3d94:	00 d0       	rcall	.+0      	; 0x3d96 <fun2+0x8>
    3d96:	0f 92       	push	r0
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	9d 83       	std	Y+5, r25	; 0x05
    3d9e:	8c 83       	std	Y+4, r24	; 0x04
	u8 i;
	u16 res=0;
    3da0:	1a 82       	std	Y+2, r1	; 0x02
    3da2:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;arr[i]!='%';i++)
    3da4:	1b 82       	std	Y+3, r1	; 0x03
    3da6:	20 c0       	rjmp	.+64     	; 0x3de8 <fun2+0x5a>
	{
		res =res*10+(arr[i]-'0');
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	9c 01       	movw	r18, r24
    3dae:	22 0f       	add	r18, r18
    3db0:	33 1f       	adc	r19, r19
    3db2:	c9 01       	movw	r24, r18
    3db4:	88 0f       	add	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	a9 01       	movw	r20, r18
    3dbe:	48 0f       	add	r20, r24
    3dc0:	59 1f       	adc	r21, r25
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	28 2f       	mov	r18, r24
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dca:	9d 81       	ldd	r25, Y+5	; 0x05
    3dcc:	fc 01       	movw	r30, r24
    3dce:	e2 0f       	add	r30, r18
    3dd0:	f3 1f       	adc	r31, r19
    3dd2:	80 81       	ld	r24, Z
    3dd4:	88 2f       	mov	r24, r24
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	84 0f       	add	r24, r20
    3dda:	95 1f       	adc	r25, r21
    3ddc:	c0 97       	sbiw	r24, 0x30	; 48
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01

u16 fun2(u8 *arr)
{
	u8 i;
	u16 res=0;
	for(i=0;arr[i]!='%';i++)
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	8f 5f       	subi	r24, 0xFF	; 255
    3de6:	8b 83       	std	Y+3, r24	; 0x03
    3de8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dea:	28 2f       	mov	r18, r24
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	8c 81       	ldd	r24, Y+4	; 0x04
    3df0:	9d 81       	ldd	r25, Y+5	; 0x05
    3df2:	fc 01       	movw	r30, r24
    3df4:	e2 0f       	add	r30, r18
    3df6:	f3 1f       	adc	r31, r19
    3df8:	80 81       	ld	r24, Z
    3dfa:	85 32       	cpi	r24, 0x25	; 37
    3dfc:	a9 f6       	brne	.-86     	; 0x3da8 <fun2+0x1a>
	{
		res =res*10+(arr[i]-'0');
	}
	return res;
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	cf 91       	pop	r28
    3e0e:	df 91       	pop	r29
    3e10:	08 95       	ret

00003e12 <__udivmodhi4>:
    3e12:	aa 1b       	sub	r26, r26
    3e14:	bb 1b       	sub	r27, r27
    3e16:	51 e1       	ldi	r21, 0x11	; 17
    3e18:	07 c0       	rjmp	.+14     	; 0x3e28 <__udivmodhi4_ep>

00003e1a <__udivmodhi4_loop>:
    3e1a:	aa 1f       	adc	r26, r26
    3e1c:	bb 1f       	adc	r27, r27
    3e1e:	a6 17       	cp	r26, r22
    3e20:	b7 07       	cpc	r27, r23
    3e22:	10 f0       	brcs	.+4      	; 0x3e28 <__udivmodhi4_ep>
    3e24:	a6 1b       	sub	r26, r22
    3e26:	b7 0b       	sbc	r27, r23

00003e28 <__udivmodhi4_ep>:
    3e28:	88 1f       	adc	r24, r24
    3e2a:	99 1f       	adc	r25, r25
    3e2c:	5a 95       	dec	r21
    3e2e:	a9 f7       	brne	.-22     	; 0x3e1a <__udivmodhi4_loop>
    3e30:	80 95       	com	r24
    3e32:	90 95       	com	r25
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	08 95       	ret

00003e3a <__prologue_saves__>:
    3e3a:	2f 92       	push	r2
    3e3c:	3f 92       	push	r3
    3e3e:	4f 92       	push	r4
    3e40:	5f 92       	push	r5
    3e42:	6f 92       	push	r6
    3e44:	7f 92       	push	r7
    3e46:	8f 92       	push	r8
    3e48:	9f 92       	push	r9
    3e4a:	af 92       	push	r10
    3e4c:	bf 92       	push	r11
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	ca 1b       	sub	r28, r26
    3e64:	db 0b       	sbc	r29, r27
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	09 94       	ijmp

00003e72 <__epilogue_restores__>:
    3e72:	2a 88       	ldd	r2, Y+18	; 0x12
    3e74:	39 88       	ldd	r3, Y+17	; 0x11
    3e76:	48 88       	ldd	r4, Y+16	; 0x10
    3e78:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e80:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e82:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e84:	b9 84       	ldd	r11, Y+9	; 0x09
    3e86:	c8 84       	ldd	r12, Y+8	; 0x08
    3e88:	df 80       	ldd	r13, Y+7	; 0x07
    3e8a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e8e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e90:	1b 81       	ldd	r17, Y+3	; 0x03
    3e92:	aa 81       	ldd	r26, Y+2	; 0x02
    3e94:	b9 81       	ldd	r27, Y+1	; 0x01
    3e96:	ce 0f       	add	r28, r30
    3e98:	d1 1d       	adc	r29, r1
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	ed 01       	movw	r28, r26
    3ea6:	08 95       	ret

00003ea8 <_exit>:
    3ea8:	f8 94       	cli

00003eaa <__stop_program>:
    3eaa:	ff cf       	rjmp	.-2      	; 0x3eaa <__stop_program>
