
TASK1LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002f52  00002fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000240c  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c1a  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006106  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00006286  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00006457  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00008467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  000095c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000a5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000a76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000aa2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1e 11 	call	0x223c	; 0x223c <main>
      7a:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 59       	subi	r30, 0x98	; 152
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DiO_private.h"

void DIO_voidInit(void)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	DIO_U8_DDRA_REG=conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
     c98:	ea e3       	ldi	r30, 0x3A	; 58
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	80 83       	st	Z, r24
	               		 DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION );

    DIO_U8_DDRB_REG=conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,
     ca0:	e7 e3       	ldi	r30, 0x37	; 55
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	10 82       	st	Z, r1
				         DIO_u8_PB4_DIRECTION,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION );

    DIO_U8_DDRC_REG=conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
				         DIO_u8_PC4_DIRECTION,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION );

    DIO_U8_DDRD_REG=conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,
     cac:	e1 e3       	ldi	r30, 0x31	; 49
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 e1       	ldi	r24, 0x10	; 16
     cb2:	80 83       	st	Z, r24
				         DIO_u8_PA4_DIRECTION,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION );



    DIO_U8_PORTB_REG=conc(DIO_u8_PA7_INITTIAL_VALUE,DIO_u8_PA6_INITTIAL_VALUE,DIO_u8_PA5_INITTIAL_VALUE,
     cb4:	e8 e3       	ldi	r30, 0x38	; 56
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
    		              DIO_u8_PA4_INITTIAL_VALUE,DIO_u8_PA3_INITTIAL_VALUE,DIO_u8_PA2_INITTIAL_VALUE,DIO_u8_PA1_INITTIAL_VALUE,DIO_u8_PA0_INITTIAL_VALUE);

    DIO_U8_PORTB_REG=conc(DIO_u8_PB7_INITTIAL_VALUE,DIO_u8_PB6_INITTIAL_VALUE,DIO_u8_PB5_INITTIAL_VALUE,
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	87 e0       	ldi	r24, 0x07	; 7
     cc0:	80 83       	st	Z, r24
    		              DIO_u8_PB4_INITTIAL_VALUE,DIO_u8_PB3_INITTIAL_VALUE,DIO_u8_PB2_INITTIAL_VALUE,DIO_u8_PB1_INITTIAL_VALUE,DIO_u8_PB0_INITTIAL_VALUE);

	DIO_U8_PORTC_REG=conc(DIO_u8_PC7_INITTIAL_VALUE,DIO_u8_PC6_INITTIAL_VALUE,DIO_u8_PC5_INITTIAL_VALUE,
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
				          DIO_u8_PC4_INITTIAL_VALUE,DIO_u8_PC3_INITTIAL_VALUE,DIO_u8_PC2_INITTIAL_VALUE,DIO_u8_PC1_INITTIAL_VALUE,DIO_u8_PC0_INITTIAL_VALUE);

    DIO_U8_PORTD_REG=conc(DIO_u8_PD7_INITTIAL_VALUE,DIO_u8_PD6_INITTIAL_VALUE,DIO_u8_PD5_INITTIAL_VALUE,
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
    		              DIO_u8_PD4_INITTIAL_VALUE,DIO_u8_PD3_INITTIAL_VALUE,DIO_u8_PD2_INITTIAL_VALUE,DIO_u8_PD1_INITTIAL_VALUE,DIO_u8_PD0_INITTIAL_VALUE);


}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <DIO_u8SetPinDirction>:


u8 DIO_u8SetPinDirction(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinDirction )
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <DIO_u8SetPinDirction+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DIO_u8SetPinDirction+0x8>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <DIO_u8SetPinDirction+0xa>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinDirction<=DIO_U8_OUTPUT))
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <DIO_u8SetPinDirction+0x20>
     cf2:	da c0       	rjmp	.+436    	; 0xea8 <DIO_u8SetPinDirction+0x1d4>
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	88 30       	cpi	r24, 0x08	; 8
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <DIO_u8SetPinDirction+0x28>
     cfa:	d6 c0       	rjmp	.+428    	; 0xea8 <DIO_u8SetPinDirction+0x1d4>
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirction+0x30>
     d02:	d2 c0       	rjmp	.+420    	; 0xea8 <DIO_u8SetPinDirction+0x1d4>
	{
		switch(copy_u8PortId)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	3e 83       	std	Y+6, r19	; 0x06
     d0c:	2d 83       	std	Y+5, r18	; 0x05
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	91 05       	cpc	r25, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <DIO_u8SetPinDirction+0x46>
     d18:	43 c0       	rjmp	.+134    	; 0xda0 <DIO_u8SetPinDirction+0xcc>
     d1a:	2d 81       	ldd	r18, Y+5	; 0x05
     d1c:	3e 81       	ldd	r19, Y+6	; 0x06
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	2c f4       	brge	.+10     	; 0xd2e <DIO_u8SetPinDirction+0x5a>
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	9e 81       	ldd	r25, Y+6	; 0x06
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	71 f0       	breq	.+28     	; 0xd48 <DIO_u8SetPinDirction+0x74>
     d2c:	be c0       	rjmp	.+380    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
     d2e:	2d 81       	ldd	r18, Y+5	; 0x05
     d30:	3e 81       	ldd	r19, Y+6	; 0x06
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_u8SetPinDirction+0x66>
     d38:	5f c0       	rjmp	.+190    	; 0xdf8 <DIO_u8SetPinDirction+0x124>
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_u8SetPinDirction+0x72>
     d44:	85 c0       	rjmp	.+266    	; 0xe50 <DIO_u8SetPinDirction+0x17c>
     d46:	b1 c0       	rjmp	.+354    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
		{
			case DIO_U8_PORTA:
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	a1 f4       	brne	.+40     	; 0xd76 <DIO_u8SetPinDirction+0xa2>
			       {
			            SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     d4e:	aa e3       	ldi	r26, 0x3A	; 58
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ea e3       	ldi	r30, 0x3A	; 58
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_u8SetPinDirction+0x98>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_u8SetPinDirction+0x94>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	9a c0       	rjmp	.+308    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_u8SetPinDirction+0xc0>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_u8SetPinDirction+0xbc>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	85 c0       	rjmp	.+266    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTB :
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	a1 f4       	brne	.+40     	; 0xdce <DIO_u8SetPinDirction+0xfa>
			       {
			            SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     da6:	a7 e3       	ldi	r26, 0x37	; 55
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e7 e3       	ldi	r30, 0x37	; 55
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_u8SetPinDirction+0xf0>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_u8SetPinDirction+0xec>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	6e c0       	rjmp	.+220    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     dce:	a7 e3       	ldi	r26, 0x37	; 55
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e7 e3       	ldi	r30, 0x37	; 55
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_u8SetPinDirction+0x118>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_u8SetPinDirction+0x114>
     df0:	80 95       	com	r24
     df2:	84 23       	and	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	59 c0       	rjmp	.+178    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTC:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	a1 f4       	brne	.+40     	; 0xe26 <DIO_u8SetPinDirction+0x152>
			        {
			            SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     dfe:	a4 e3       	ldi	r26, 0x34	; 52
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e4 e3       	ldi	r30, 0x34	; 52
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_u8SetPinDirction+0x148>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_u8SetPinDirction+0x144>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	42 c0       	rjmp	.+132    	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
			        {
						CLE_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     e26:	a4 e3       	ldi	r26, 0x34	; 52
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e4 e3       	ldi	r30, 0x34	; 52
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_u8SetPinDirction+0x170>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_u8SetPinDirction+0x16c>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	2d c0       	rjmp	.+90     	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
					}
			break;
			case DIO_U8_PORTD:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <DIO_u8SetPinDirction+0x1aa>
			        {
			            SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     e56:	a1 e3       	ldi	r26, 0x31	; 49
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_u8SetPinDirction+0x1a0>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_u8SetPinDirction+0x19c>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	16 c0       	rjmp	.+44     	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
					{
                 		CLE_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     e7e:	a1 e3       	ldi	r26, 0x31	; 49
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e1 e3       	ldi	r30, 0x31	; 49
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8SetPinDirction+0x1c8>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_u8SetPinDirction+0x1c4>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <DIO_u8SetPinDirction+0x1d6>
			break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK; 
     ea8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     eac:	26 96       	adiw	r28, 0x06	; 6
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <DIO_u8SetPinValue+0x6>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <DIO_u8SetPinValue+0x8>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <DIO_u8SetPinValue+0xa>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	8a 83       	std	Y+2, r24	; 0x02
     ece:	6b 83       	std	Y+3, r22	; 0x03
     ed0:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErorrState = STD_TYPES_OK;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinValue<=DIO_U8_OUTPUT))
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	08 f0       	brcs	.+2      	; 0xede <DIO_u8SetPinValue+0x20>
     edc:	da c0       	rjmp	.+436    	; 0x1092 <DIO_u8SetPinValue+0x1d4>
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 30       	cpi	r24, 0x08	; 8
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <DIO_u8SetPinValue+0x28>
     ee4:	d6 c0       	rjmp	.+428    	; 0x1092 <DIO_u8SetPinValue+0x1d4>
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	08 f0       	brcs	.+2      	; 0xeee <DIO_u8SetPinValue+0x30>
     eec:	d2 c0       	rjmp	.+420    	; 0x1092 <DIO_u8SetPinValue+0x1d4>
	{
	  switch(copy_u8PortId)
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3e 83       	std	Y+6, r19	; 0x06
     ef6:	2d 83       	std	Y+5, r18	; 0x05
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <DIO_u8SetPinValue+0x46>
     f02:	43 c0       	rjmp	.+134    	; 0xf8a <DIO_u8SetPinValue+0xcc>
     f04:	2d 81       	ldd	r18, Y+5	; 0x05
     f06:	3e 81       	ldd	r19, Y+6	; 0x06
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	2c f4       	brge	.+10     	; 0xf18 <DIO_u8SetPinValue+0x5a>
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	71 f0       	breq	.+28     	; 0xf32 <DIO_u8SetPinValue+0x74>
     f16:	be c0       	rjmp	.+380    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
     f18:	2d 81       	ldd	r18, Y+5	; 0x05
     f1a:	3e 81       	ldd	r19, Y+6	; 0x06
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <DIO_u8SetPinValue+0x66>
     f22:	5f c0       	rjmp	.+190    	; 0xfe2 <DIO_u8SetPinValue+0x124>
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <DIO_u8SetPinValue+0x72>
     f2e:	85 c0       	rjmp	.+266    	; 0x103a <DIO_u8SetPinValue+0x17c>
     f30:	b1 c0       	rjmp	.+354    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
	  {
		  case DIO_U8_PORTA:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	a1 f4       	brne	.+40     	; 0xf60 <DIO_u8SetPinValue+0xa2>
	       	   {
			       SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     f38:	ab e3       	ldi	r26, 0x3B	; 59
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e3       	ldi	r30, 0x3B	; 59
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_u8SetPinValue+0x98>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_u8SetPinValue+0x94>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	9a c0       	rjmp	.+308    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     f60:	ab e3       	ldi	r26, 0x3B	; 59
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	eb e3       	ldi	r30, 0x3B	; 59
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_u8SetPinValue+0xc0>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_u8SetPinValue+0xbc>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	85 c0       	rjmp	.+266    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTB:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	a1 f4       	brne	.+40     	; 0xfb8 <DIO_u8SetPinValue+0xfa>
	       	   {
			       SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     f90:	a8 e3       	ldi	r26, 0x38	; 56
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e3       	ldi	r30, 0x38	; 56
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_u8SetPinValue+0xf0>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_u8SetPinValue+0xec>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	6e c0       	rjmp	.+220    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     fb8:	a8 e3       	ldi	r26, 0x38	; 56
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e3       	ldi	r30, 0x38	; 56
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8SetPinValue+0x118>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8SetPinValue+0x114>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	59 c0       	rjmp	.+178    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTC:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	a1 f4       	brne	.+40     	; 0x1010 <DIO_u8SetPinValue+0x152>
	       	   {
			       SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
     fe8:	a5 e3       	ldi	r26, 0x35	; 53
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e3       	ldi	r30, 0x35	; 53
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8SetPinValue+0x148>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8SetPinValue+0x144>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	42 c0       	rjmp	.+132    	; 0x1094 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    1010:	a5 e3       	ldi	r26, 0x35	; 53
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e5 e3       	ldi	r30, 0x35	; 53
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_u8SetPinValue+0x170>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_u8SetPinValue+0x16c>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	2d c0       	rjmp	.+90     	; 0x1094 <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTD:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	a1 f4       	brne	.+40     	; 0x1068 <DIO_u8SetPinValue+0x1aa>
	       	   {
			       SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    1040:	a2 e3       	ldi	r26, 0x32	; 50
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e2 e3       	ldi	r30, 0x32	; 50
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_u8SetPinValue+0x1a0>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_u8SetPinValue+0x19c>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	16 c0       	rjmp	.+44     	; 0x1094 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    1068:	a2 e3       	ldi	r26, 0x32	; 50
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e2 e3       	ldi	r30, 0x32	; 50
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_u8SetPinValue+0x1c8>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_u8SetPinValue+0x1c4>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <DIO_u8SetPinValue+0x1d6>
		  
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK; 
    1092:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1096:	26 96       	adiw	r28, 0x06	; 6
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue )
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	27 97       	sbiw	r28, 0x07	; 7
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	6b 83       	std	Y+3, r22	; 0x03
    10c0:	5d 83       	std	Y+5, r21	; 0x05
    10c2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7))
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <DIO_u8GetPinValue+0x28>
    10ce:	75 c0       	rjmp	.+234    	; 0x11ba <DIO_u8GetPinValue+0x112>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 30       	cpi	r24, 0x08	; 8
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <DIO_u8GetPinValue+0x30>
    10d6:	71 c0       	rjmp	.+226    	; 0x11ba <DIO_u8GetPinValue+0x112>
	{
	 switch(copy_u8PortId)
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3f 83       	std	Y+7, r19	; 0x07
    10e0:	2e 83       	std	Y+6, r18	; 0x06
    10e2:	4e 81       	ldd	r20, Y+6	; 0x06
    10e4:	5f 81       	ldd	r21, Y+7	; 0x07
    10e6:	41 30       	cpi	r20, 0x01	; 1
    10e8:	51 05       	cpc	r21, r1
    10ea:	59 f1       	breq	.+86     	; 0x1142 <DIO_u8GetPinValue+0x9a>
    10ec:	8e 81       	ldd	r24, Y+6	; 0x06
    10ee:	9f 81       	ldd	r25, Y+7	; 0x07
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	34 f4       	brge	.+12     	; 0x1102 <DIO_u8GetPinValue+0x5a>
    10f6:	2e 81       	ldd	r18, Y+6	; 0x06
    10f8:	3f 81       	ldd	r19, Y+7	; 0x07
    10fa:	21 15       	cp	r18, r1
    10fc:	31 05       	cpc	r19, r1
    10fe:	69 f0       	breq	.+26     	; 0x111a <DIO_u8GetPinValue+0x72>
    1100:	5d c0       	rjmp	.+186    	; 0x11bc <DIO_u8GetPinValue+0x114>
    1102:	4e 81       	ldd	r20, Y+6	; 0x06
    1104:	5f 81       	ldd	r21, Y+7	; 0x07
    1106:	42 30       	cpi	r20, 0x02	; 2
    1108:	51 05       	cpc	r21, r1
    110a:	79 f1       	breq	.+94     	; 0x116a <DIO_u8GetPinValue+0xc2>
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	9f 81       	ldd	r25, Y+7	; 0x07
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <DIO_u8GetPinValue+0x70>
    1116:	3d c0       	rjmp	.+122    	; 0x1192 <DIO_u8GetPinValue+0xea>
    1118:	51 c0       	rjmp	.+162    	; 0x11bc <DIO_u8GetPinValue+0x114>
	  {
		 case DIO_U8_PORTA:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
    111a:	e9 e3       	ldi	r30, 0x39	; 57
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_u8GetPinValue+0x8a>
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_u8GetPinValue+0x86>
    1136:	ca 01       	movw	r24, r20
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	ec 81       	ldd	r30, Y+4	; 0x04
    113c:	fd 81       	ldd	r31, Y+5	; 0x05
    113e:	80 83       	st	Z, r24
    1140:	3d c0       	rjmp	.+122    	; 0x11bc <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTB:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
    1142:	e6 e3       	ldi	r30, 0x36	; 54
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8GetPinValue+0xb2>
    1156:	55 95       	asr	r21
    1158:	47 95       	ror	r20
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8GetPinValue+0xae>
    115e:	ca 01       	movw	r24, r20
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	ec 81       	ldd	r30, Y+4	; 0x04
    1164:	fd 81       	ldd	r31, Y+5	; 0x05
    1166:	80 83       	st	Z, r24
    1168:	29 c0       	rjmp	.+82     	; 0x11bc <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTC:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
    116a:	e3 e3       	ldi	r30, 0x33	; 51
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_u8GetPinValue+0xda>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_u8GetPinValue+0xd6>
    1186:	ca 01       	movw	r24, r20
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	ec 81       	ldd	r30, Y+4	; 0x04
    118c:	fd 81       	ldd	r31, Y+5	; 0x05
    118e:	80 83       	st	Z, r24
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTD:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
    1192:	e0 e3       	ldi	r30, 0x30	; 48
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8GetPinValue+0x102>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8GetPinValue+0xfe>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	ec 81       	ldd	r30, Y+4	; 0x04
    11b4:	fd 81       	ldd	r31, Y+5	; 0x05
    11b6:	80 83       	st	Z, r24
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <DIO_u8GetPinValue+0x114>
		 break;
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    11ba:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11be:	27 96       	adiw	r28, 0x07	; 7
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <DIO_u8SetPortDirction>:

u8 DIO_u8SetPortDirction(u8 copy_u8PortId,u8 copy_u8PortDirction )
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	2d 97       	sbiw	r28, 0x0d	; 13
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortDirction<=DIO_U8_OUTPUT))
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <DIO_u8SetPortDirction+0x24>
    11f2:	6b c0       	rjmp	.+214    	; 0x12ca <DIO_u8SetPortDirction+0xfa>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <DIO_u8SetPortDirction+0x2c>
    11fa:	67 c0       	rjmp	.+206    	; 0x12ca <DIO_u8SetPortDirction+0xfa>
	{
		switch(copy_u8PortId)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3d 87       	std	Y+13, r19	; 0x0d
    1204:	2c 87       	std	Y+12, r18	; 0x0c
    1206:	8c 85       	ldd	r24, Y+12	; 0x0c
    1208:	9d 85       	ldd	r25, Y+13	; 0x0d
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	39 f1       	breq	.+78     	; 0x125e <DIO_u8SetPortDirction+0x8e>
    1210:	2c 85       	ldd	r18, Y+12	; 0x0c
    1212:	3d 85       	ldd	r19, Y+13	; 0x0d
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <DIO_u8SetPortDirction+0x54>
    121a:	8c 85       	ldd	r24, Y+12	; 0x0c
    121c:	9d 85       	ldd	r25, Y+13	; 0x0d
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	61 f0       	breq	.+24     	; 0x123a <DIO_u8SetPortDirction+0x6a>
    1222:	54 c0       	rjmp	.+168    	; 0x12cc <DIO_u8SetPortDirction+0xfc>
    1224:	2c 85       	ldd	r18, Y+12	; 0x0c
    1226:	3d 85       	ldd	r19, Y+13	; 0x0d
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	51 f1       	breq	.+84     	; 0x1282 <DIO_u8SetPortDirction+0xb2>
    122e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1230:	9d 85       	ldd	r25, Y+13	; 0x0d
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	b9 f1       	breq	.+110    	; 0x12a6 <DIO_u8SetPortDirction+0xd6>
    1238:	49 c0       	rjmp	.+146    	; 0x12cc <DIO_u8SetPortDirction+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	41 f4       	brne	.+16     	; 0x1250 <DIO_u8SetPortDirction+0x80>
			     { 
			     SET_PORT(DIO_U8_DDRA_REG);	
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	90 81       	ld	r25, Z
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	80 83       	st	Z, r24
    124e:	3e c0       	rjmp	.+124    	; 0x12cc <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRA_REG);
    1250:	ea e3       	ldi	r30, 0x3A	; 58
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	20 81       	ld	r18, Z
    1256:	ea e3       	ldi	r30, 0x3A	; 58
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1
    125c:	37 c0       	rjmp	.+110    	; 0x12cc <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	41 f4       	brne	.+16     	; 0x1274 <DIO_u8SetPortDirction+0xa4>
			     { 
			     SET_PORT(DIO_U8_DDRB_REG);	
    1264:	e7 e3       	ldi	r30, 0x37	; 55
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	30 81       	ld	r19, Z
    126a:	e7 e3       	ldi	r30, 0x37	; 55
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	80 83       	st	Z, r24
    1272:	2c c0       	rjmp	.+88     	; 0x12cc <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRB_REG);
    1274:	e7 e3       	ldi	r30, 0x37	; 55
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1
    1280:	25 c0       	rjmp	.+74     	; 0x12cc <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	41 f4       	brne	.+16     	; 0x1298 <DIO_u8SetPortDirction+0xc8>
			     { 
			     SET_PORT(DIO_U8_DDRC_REG);	
    1288:	e4 e3       	ldi	r30, 0x34	; 52
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	90 81       	ld	r25, Z
    128e:	e4 e3       	ldi	r30, 0x34	; 52
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	80 83       	st	Z, r24
    1296:	1a c0       	rjmp	.+52     	; 0x12cc <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRC_REG);
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	20 81       	ld	r18, Z
    129e:	e4 e3       	ldi	r30, 0x34	; 52
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	10 82       	st	Z, r1
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	41 f4       	brne	.+16     	; 0x12bc <DIO_u8SetPortDirction+0xec>
			     { 
			     SET_PORT(DIO_U8_DDRD_REG);	
    12ac:	e1 e3       	ldi	r30, 0x31	; 49
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	30 81       	ld	r19, Z
    12b2:	e1 e3       	ldi	r30, 0x31	; 49
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	80 83       	st	Z, r24
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRD_REG);
    12bc:	e1 e3       	ldi	r30, 0x31	; 49
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	e1 e3       	ldi	r30, 0x31	; 49
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	10 82       	st	Z, r1
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <DIO_u8SetPortDirction+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    12ca:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;	
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ce:	2d 96       	adiw	r28, 0x0d	; 13
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	2d 97       	sbiw	r28, 0x0d	; 13
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortValue<=DIO_U8_OUTPUT))
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	08 f0       	brcs	.+2      	; 0x1304 <DIO_u8SetPortValue+0x24>
    1302:	6b c0       	rjmp	.+214    	; 0x13da <DIO_u8SetPortValue+0xfa>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	08 f0       	brcs	.+2      	; 0x130c <DIO_u8SetPortValue+0x2c>
    130a:	67 c0       	rjmp	.+206    	; 0x13da <DIO_u8SetPortValue+0xfa>
	{
		switch(copy_u8PortId)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3d 87       	std	Y+13, r19	; 0x0d
    1314:	2c 87       	std	Y+12, r18	; 0x0c
    1316:	8c 85       	ldd	r24, Y+12	; 0x0c
    1318:	9d 85       	ldd	r25, Y+13	; 0x0d
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	39 f1       	breq	.+78     	; 0x136e <DIO_u8SetPortValue+0x8e>
    1320:	2c 85       	ldd	r18, Y+12	; 0x0c
    1322:	3d 85       	ldd	r19, Y+13	; 0x0d
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_u8SetPortValue+0x54>
    132a:	8c 85       	ldd	r24, Y+12	; 0x0c
    132c:	9d 85       	ldd	r25, Y+13	; 0x0d
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_u8SetPortValue+0x6a>
    1332:	54 c0       	rjmp	.+168    	; 0x13dc <DIO_u8SetPortValue+0xfc>
    1334:	2c 85       	ldd	r18, Y+12	; 0x0c
    1336:	3d 85       	ldd	r19, Y+13	; 0x0d
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	51 f1       	breq	.+84     	; 0x1392 <DIO_u8SetPortValue+0xb2>
    133e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1340:	9d 85       	ldd	r25, Y+13	; 0x0d
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	b9 f1       	breq	.+110    	; 0x13b6 <DIO_u8SetPortValue+0xd6>
    1348:	49 c0       	rjmp	.+146    	; 0x13dc <DIO_u8SetPortValue+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	41 f4       	brne	.+16     	; 0x1360 <DIO_u8SetPortValue+0x80>
			     {
			     SET_PORT(DIO_U8_PORTA_REG);
    1350:	eb e3       	ldi	r30, 0x3B	; 59
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	90 81       	ld	r25, Z
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	80 83       	st	Z, r24
    135e:	3e c0       	rjmp	.+124    	; 0x13dc <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTA_REG);
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	20 81       	ld	r18, Z
    1366:	eb e3       	ldi	r30, 0x3B	; 59
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	10 82       	st	Z, r1
    136c:	37 c0       	rjmp	.+110    	; 0x13dc <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	41 f4       	brne	.+16     	; 0x1384 <DIO_u8SetPortValue+0xa4>
			     { 
			     SET_PORT(DIO_U8_PORTB_REG);
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	30 81       	ld	r19, Z
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	80 83       	st	Z, r24
    1382:	2c c0       	rjmp	.+88     	; 0x13dc <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTB_REG);
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	e8 e3       	ldi	r30, 0x38	; 56
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	10 82       	st	Z, r1
    1390:	25 c0       	rjmp	.+74     	; 0x13dc <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	41 f4       	brne	.+16     	; 0x13a8 <DIO_u8SetPortValue+0xc8>
			     { 
			     SET_PORT(DIO_U8_PORTC_REG);
    1398:	e5 e3       	ldi	r30, 0x35	; 53
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	90 81       	ld	r25, Z
    139e:	e5 e3       	ldi	r30, 0x35	; 53
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	80 83       	st	Z, r24
    13a6:	1a c0       	rjmp	.+52     	; 0x13dc <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTC_REG);
    13a8:	e5 e3       	ldi	r30, 0x35	; 53
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	20 81       	ld	r18, Z
    13ae:	e5 e3       	ldi	r30, 0x35	; 53
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	10 82       	st	Z, r1
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	41 f4       	brne	.+16     	; 0x13cc <DIO_u8SetPortValue+0xec>
			     { 
			     SET_PORT(DIO_U8_PORTD_REG);
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	30 81       	ld	r19, Z
    13c2:	e2 e3       	ldi	r30, 0x32	; 50
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	80 83       	st	Z, r24
    13ca:	08 c0       	rjmp	.+16     	; 0x13dc <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTD_REG);
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	e2 e3       	ldi	r30, 0x32	; 50
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	10 82       	st	Z, r1
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <DIO_u8SetPortValue+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    13da:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13de:	2d 96       	adiw	r28, 0x0d	; 13
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8PortId, u8 *copy_pu8PortValue)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <DIO_u8GetPortValue+0x6>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <DIO_u8GetPortValue+0x8>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <DIO_u8GetPortValue+0xa>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	8a 83       	std	Y+2, r24	; 0x02
    1400:	7c 83       	std	Y+4, r23	; 0x04
    1402:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_U8_PORTD)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	d8 f5       	brcc	.+118    	; 0x1484 <DIO_u8GetPortValue+0x94>
	{
		switch(copy_u8PortId)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3e 83       	std	Y+6, r19	; 0x06
    1416:	2d 83       	std	Y+5, r18	; 0x05
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	e1 f0       	breq	.+56     	; 0x145a <DIO_u8GetPortValue+0x6a>
    1422:	2d 81       	ldd	r18, Y+5	; 0x05
    1424:	3e 81       	ldd	r19, Y+6	; 0x06
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	2c f4       	brge	.+10     	; 0x1436 <DIO_u8GetPortValue+0x46>
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	61 f0       	breq	.+24     	; 0x144c <DIO_u8GetPortValue+0x5c>
    1434:	28 c0       	rjmp	.+80     	; 0x1486 <DIO_u8GetPortValue+0x96>
    1436:	2d 81       	ldd	r18, Y+5	; 0x05
    1438:	3e 81       	ldd	r19, Y+6	; 0x06
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	a1 f0       	breq	.+40     	; 0x1468 <DIO_u8GetPortValue+0x78>
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	b1 f0       	breq	.+44     	; 0x1476 <DIO_u8GetPortValue+0x86>
    144a:	1d c0       	rjmp	.+58     	; 0x1486 <DIO_u8GetPortValue+0x96>
		{
			case DIO_U8_PORTA:
			   
			   *copy_pu8PortValue = GET_PORT(DIO_U8_PORTA_REG);
    144c:	eb e3       	ldi	r30, 0x3B	; 59
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	eb 81       	ldd	r30, Y+3	; 0x03
    1454:	fc 81       	ldd	r31, Y+4	; 0x04
    1456:	80 83       	st	Z, r24
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <DIO_u8GetPortValue+0x96>
			    
     		break;
			case DIO_U8_PORTB:
			    
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTB_REG);
    145a:	e8 e3       	ldi	r30, 0x38	; 56
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	eb 81       	ldd	r30, Y+3	; 0x03
    1462:	fc 81       	ldd	r31, Y+4	; 0x04
    1464:	80 83       	st	Z, r24
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <DIO_u8GetPortValue+0x96>
			
     		break;
			case DIO_U8_PORTC:
			     
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTC_REG);
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	eb 81       	ldd	r30, Y+3	; 0x03
    1470:	fc 81       	ldd	r31, Y+4	; 0x04
    1472:	80 83       	st	Z, r24
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <DIO_u8GetPortValue+0x96>
			   
     		break;
			case DIO_U8_PORTD:
			 
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTD_REG);
    1476:	e2 e3       	ldi	r30, 0x32	; 50
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	eb 81       	ldd	r30, Y+3	; 0x03
    147e:	fc 81       	ldd	r31, Y+4	; 0x04
    1480:	80 83       	st	Z, r24
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <DIO_u8GetPortValue+0x96>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1484:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1488:	26 96       	adiw	r28, 0x06	; 6
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <DIO_u8AnalogPort>:
u8 DIO_u8AnalogPort(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_u8AnalogPort+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_u8AnalogPort+0x8>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	6b 83       	std	Y+3, r22	; 0x03
    u8	Local_u8ErorrState =STD_TYPES_OK;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD)  &&  (copy_u8PortValue<= 0xff))
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	84 30       	cpi	r24, 0x04	; 4
    14b4:	98 f5       	brcc	.+102    	; 0x151c <DIO_u8AnalogPort+0x82>
	{
		switch(copy_u8PortId)
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3d 83       	std	Y+5, r19	; 0x05
    14be:	2c 83       	std	Y+4, r18	; 0x04
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	d1 f0       	breq	.+52     	; 0x14fe <DIO_u8AnalogPort+0x64>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <DIO_u8AnalogPort+0x44>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	61 f0       	breq	.+24     	; 0x14f4 <DIO_u8AnalogPort+0x5a>
    14dc:	20 c0       	rjmp	.+64     	; 0x151e <DIO_u8AnalogPort+0x84>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	81 f0       	breq	.+32     	; 0x1508 <DIO_u8AnalogPort+0x6e>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <DIO_u8AnalogPort+0x78>
    14f2:	15 c0       	rjmp	.+42     	; 0x151e <DIO_u8AnalogPort+0x84>
		{
		case DIO_U8_PORTA:

			DIO_U8_PORTA_REG = copy_u8PortValue;
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	80 83       	st	Z, r24
    14fc:	10 c0       	rjmp	.+32     	; 0x151e <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTB:

			 DIO_U8_PORTB_REG = copy_u8PortValue;
    14fe:	e8 e3       	ldi	r30, 0x38	; 56
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	80 83       	st	Z, r24
    1506:	0b c0       	rjmp	.+22     	; 0x151e <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTC:

			DIO_U8_PORTC_REG = copy_u8PortValue;
    1508:	e5 e3       	ldi	r30, 0x35	; 53
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	80 83       	st	Z, r24
    1510:	06 c0       	rjmp	.+12     	; 0x151e <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTD:

			 DIO_U8_PORTD_REG = copy_u8PortValue;
    1512:	e2 e3       	ldi	r30, 0x32	; 50
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	80 83       	st	Z, r24
    151a:	01 c0       	rjmp	.+2      	; 0x151e <DIO_u8AnalogPort+0x84>
		break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK;
    151c:	19 82       	std	Y+1, r1	; 0x01
	}
		return Local_u8ErorrState;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <LCD_voidInit>:
#include "LCD_config.h" 



void LCD_voidInit(void)
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	c6 54       	subi	r28, 0x46	; 70
    153e:	d0 40       	sbci	r29, 0x00	; 0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	fe 01       	movw	r30, r28
    154c:	ed 5b       	subi	r30, 0xBD	; 189
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	ac e0       	ldi	r26, 0x0C	; 12
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	8e 01       	movw	r16, r28
    1562:	01 5c       	subi	r16, 0xC1	; 193
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	ed 5b       	subi	r30, 0xBD	; 189
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a ef       	ldi	r20, 0xFA	; 250
    157a:	54 e4       	ldi	r21, 0x44	; 68
    157c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	f8 01       	movw	r30, r16
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	a2 83       	std	Z+2, r26	; 0x02
    158c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158e:	fe 01       	movw	r30, r28
    1590:	ff 96       	adiw	r30, 0x3f	; 63
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <LCD_voidInit+0x84>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e af       	std	Y+62, r25	; 0x3e
    15b0:	8d af       	std	Y+61, r24	; 0x3d
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    15b4:	fe 01       	movw	r30, r28
    15b6:	ff 96       	adiw	r30, 0x3f	; 63
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	64 f5       	brge	.+88     	; 0x1628 <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	ed 5b       	subi	r30, 0xBD	; 189
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e af       	std	Y+62, r25	; 0x3e
    15fc:	8d af       	std	Y+61, r24	; 0x3d
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <LCD_voidInit+0xee>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c af       	std	Y+60, r25	; 0x3c
    1606:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1608:	8b ad       	ldd	r24, Y+59	; 0x3b
    160a:	9c ad       	ldd	r25, Y+60	; 0x3c
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_voidInit+0xdc>
    1610:	9c af       	std	Y+60, r25	; 0x3c
    1612:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d ad       	ldd	r24, Y+61	; 0x3d
    1616:	9e ad       	ldd	r25, Y+62	; 0x3e
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e af       	std	Y+62, r25	; 0x3e
    161c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1620:	9e ad       	ldd	r25, Y+62	; 0x3e
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <LCD_voidInit+0xd0>
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	fe 01       	movw	r30, r28
    162a:	ff 96       	adiw	r30, 0x3f	; 63
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9e af       	std	Y+62, r25	; 0x3e
    163e:	8d af       	std	Y+61, r24	; 0x3d
    1640:	8d ad       	ldd	r24, Y+61	; 0x3d
    1642:	9e ad       	ldd	r25, Y+62	; 0x3e
    1644:	9a af       	std	Y+58, r25	; 0x3a
    1646:	89 af       	std	Y+57, r24	; 0x39
    1648:	89 ad       	ldd	r24, Y+57	; 0x39
    164a:	9a ad       	ldd	r25, Y+58	; 0x3a
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <LCD_voidInit+0x11c>
    1650:	9a af       	std	Y+58, r25	; 0x3a
    1652:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
#if LCD_U8_MOODE == LCD_U8_8_BIT_MOODE
	LCD_voidSendCmd(0x38);
	_delay_ms(1);
#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(0b0010);
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	0e 94 ed 10 	call	0x21da	; 0x21da <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e8       	ldi	r26, 0x80	; 128
    167e:	bf e3       	ldi	r27, 0x3F	; 63
    1680:	8d ab       	std	Y+53, r24	; 0x35
    1682:	9e ab       	std	Y+54, r25	; 0x36
    1684:	af ab       	std	Y+55, r26	; 0x37
    1686:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6d a9       	ldd	r22, Y+53	; 0x35
    168a:	7e a9       	ldd	r23, Y+54	; 0x36
    168c:	8f a9       	ldd	r24, Y+55	; 0x37
    168e:	98 ad       	ldd	r25, Y+56	; 0x38
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	89 ab       	std	Y+49, r24	; 0x31
    16a2:	9a ab       	std	Y+50, r25	; 0x32
    16a4:	ab ab       	std	Y+51, r26	; 0x33
    16a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16a8:	69 a9       	ldd	r22, Y+49	; 0x31
    16aa:	7a a9       	ldd	r23, Y+50	; 0x32
    16ac:	8b a9       	ldd	r24, Y+51	; 0x33
    16ae:	9c a9       	ldd	r25, Y+52	; 0x34
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_voidInit+0x19a>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	98 ab       	std	Y+48, r25	; 0x30
    16c6:	8f a7       	std	Y+47, r24	; 0x2f
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_voidInit+0x218>
	else if (__tmp > 65535)
    16ca:	69 a9       	ldd	r22, Y+49	; 0x31
    16cc:	7a a9       	ldd	r23, Y+50	; 0x32
    16ce:	8b a9       	ldd	r24, Y+51	; 0x33
    16d0:	9c a9       	ldd	r25, Y+52	; 0x34
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_voidInit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6d a9       	ldd	r22, Y+53	; 0x35
    16e4:	7e a9       	ldd	r23, Y+54	; 0x36
    16e6:	8f a9       	ldd	r24, Y+55	; 0x37
    16e8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	98 ab       	std	Y+48, r25	; 0x30
    1708:	8f a7       	std	Y+47, r24	; 0x2f
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_voidInit+0x1fa>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9e a7       	std	Y+46, r25	; 0x2e
    1712:	8d a7       	std	Y+45, r24	; 0x2d
    1714:	8d a5       	ldd	r24, Y+45	; 0x2d
    1716:	9e a5       	ldd	r25, Y+46	; 0x2e
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_voidInit+0x1e8>
    171c:	9e a7       	std	Y+46, r25	; 0x2e
    171e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8f a5       	ldd	r24, Y+47	; 0x2f
    1722:	98 a9       	ldd	r25, Y+48	; 0x30
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	98 ab       	std	Y+48, r25	; 0x30
    1728:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8f a5       	ldd	r24, Y+47	; 0x2f
    172c:	98 a9       	ldd	r25, Y+48	; 0x30
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_voidInit+0x1dc>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_voidInit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	69 a9       	ldd	r22, Y+49	; 0x31
    1736:	7a a9       	ldd	r23, Y+50	; 0x32
    1738:	8b a9       	ldd	r24, Y+51	; 0x33
    173a:	9c a9       	ldd	r25, Y+52	; 0x34
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	98 ab       	std	Y+48, r25	; 0x30
    1746:	8f a7       	std	Y+47, r24	; 0x2f
    1748:	8f a5       	ldd	r24, Y+47	; 0x2f
    174a:	98 a9       	ldd	r25, Y+48	; 0x30
    174c:	9c a7       	std	Y+44, r25	; 0x2c
    174e:	8b a7       	std	Y+43, r24	; 0x2b
    1750:	8b a5       	ldd	r24, Y+43	; 0x2b
    1752:	9c a5       	ldd	r25, Y+44	; 0x2c
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_voidInit+0x224>
    1758:	9c a7       	std	Y+44, r25	; 0x2c
    175a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	LCD_voidSendCmd(0b00101000);
    1766:	88 e2       	ldi	r24, 0x28	; 40
    1768:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
#endif
	LCD_voidSendCmd(LCD_CURSOR_OFF);
    176c:	8c e0       	ldi	r24, 0x0C	; 12
    176e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8f a3       	std	Y+39, r24	; 0x27
    177c:	98 a7       	std	Y+40, r25	; 0x28
    177e:	a9 a7       	std	Y+41, r26	; 0x29
    1780:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6f a1       	ldd	r22, Y+39	; 0x27
    1784:	78 a5       	ldd	r23, Y+40	; 0x28
    1786:	89 a5       	ldd	r24, Y+41	; 0x29
    1788:	9a a5       	ldd	r25, Y+42	; 0x2a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a ef       	ldi	r20, 0xFA	; 250
    1790:	54 e4       	ldi	r21, 0x44	; 68
    1792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8b a3       	std	Y+35, r24	; 0x23
    179c:	9c a3       	std	Y+36, r25	; 0x24
    179e:	ad a3       	std	Y+37, r26	; 0x25
    17a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a2:	6b a1       	ldd	r22, Y+35	; 0x23
    17a4:	7c a1       	ldd	r23, Y+36	; 0x24
    17a6:	8d a1       	ldd	r24, Y+37	; 0x25
    17a8:	9e a1       	ldd	r25, Y+38	; 0x26
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_voidInit+0x294>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9a a3       	std	Y+34, r25	; 0x22
    17c0:	89 a3       	std	Y+33, r24	; 0x21
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_voidInit+0x312>
	else if (__tmp > 65535)
    17c4:	6b a1       	ldd	r22, Y+35	; 0x23
    17c6:	7c a1       	ldd	r23, Y+36	; 0x24
    17c8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ca:	9e a1       	ldd	r25, Y+38	; 0x26
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_voidInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6f a1       	ldd	r22, Y+39	; 0x27
    17de:	78 a5       	ldd	r23, Y+40	; 0x28
    17e0:	89 a5       	ldd	r24, Y+41	; 0x29
    17e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9a a3       	std	Y+34, r25	; 0x22
    1802:	89 a3       	std	Y+33, r24	; 0x21
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_voidInit+0x2f4>
    1806:	88 ec       	ldi	r24, 0xC8	; 200
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	98 a3       	std	Y+32, r25	; 0x20
    180c:	8f 8f       	std	Y+31, r24	; 0x1f
    180e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1810:	98 a1       	ldd	r25, Y+32	; 0x20
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_voidInit+0x2e2>
    1816:	98 a3       	std	Y+32, r25	; 0x20
    1818:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	89 a1       	ldd	r24, Y+33	; 0x21
    181c:	9a a1       	ldd	r25, Y+34	; 0x22
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9a a3       	std	Y+34, r25	; 0x22
    1822:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	89 a1       	ldd	r24, Y+33	; 0x21
    1826:	9a a1       	ldd	r25, Y+34	; 0x22
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_voidInit+0x2d6>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_voidInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6b a1       	ldd	r22, Y+35	; 0x23
    1830:	7c a1       	ldd	r23, Y+36	; 0x24
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
    1834:	9e a1       	ldd	r25, Y+38	; 0x26
    1836:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9a a3       	std	Y+34, r25	; 0x22
    1840:	89 a3       	std	Y+33, r24	; 0x21
    1842:	89 a1       	ldd	r24, Y+33	; 0x21
    1844:	9a a1       	ldd	r25, Y+34	; 0x22
    1846:	9e 8f       	std	Y+30, r25	; 0x1e
    1848:	8d 8f       	std	Y+29, r24	; 0x1d
    184a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_voidInit+0x31e>
    1852:	9e 8f       	std	Y+30, r25	; 0x1e
    1854:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCmd(LCD_CLEAR);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e0       	ldi	r26, 0x00	; 0
    1862:	b0 e4       	ldi	r27, 0x40	; 64
    1864:	89 8f       	std	Y+25, r24	; 0x19
    1866:	9a 8f       	std	Y+26, r25	; 0x1a
    1868:	ab 8f       	std	Y+27, r26	; 0x1b
    186a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8d 8b       	std	Y+21, r24	; 0x15
    1886:	9e 8b       	std	Y+22, r25	; 0x16
    1888:	af 8b       	std	Y+23, r26	; 0x17
    188a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    188c:	6d 89       	ldd	r22, Y+21	; 0x15
    188e:	7e 89       	ldd	r23, Y+22	; 0x16
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	2c f4       	brge	.+10     	; 0x18ae <LCD_voidInit+0x37e>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 8b       	std	Y+20, r25	; 0x14
    18aa:	8b 8b       	std	Y+19, r24	; 0x13
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <LCD_voidInit+0x3fc>
	else if (__tmp > 65535)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	3f ef       	ldi	r19, 0xFF	; 255
    18ba:	4f e7       	ldi	r20, 0x7F	; 127
    18bc:	57 e4       	ldi	r21, 0x47	; 71
    18be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18c2:	18 16       	cp	r1, r24
    18c4:	4c f5       	brge	.+82     	; 0x1918 <LCD_voidInit+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c6:	69 8d       	ldd	r22, Y+25	; 0x19
    18c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e2       	ldi	r20, 0x20	; 32
    18d4:	51 e4       	ldi	r21, 0x41	; 65
    18d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <LCD_voidInit+0x3de>
    18f0:	88 ec       	ldi	r24, 0xC8	; 200
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a 8b       	std	Y+18, r25	; 0x12
    18f6:	89 8b       	std	Y+17, r24	; 0x11
    18f8:	89 89       	ldd	r24, Y+17	; 0x11
    18fa:	9a 89       	ldd	r25, Y+18	; 0x12
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_voidInit+0x3cc>
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	69 f7       	brne	.-38     	; 0x18f0 <LCD_voidInit+0x3c0>
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <LCD_voidInit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	98 8b       	std	Y+16, r25	; 0x10
    1932:	8f 87       	std	Y+15, r24	; 0x0f
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	98 89       	ldd	r25, Y+16	; 0x10
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_voidInit+0x408>
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCmd(0x06);
    1940:	86 e0       	ldi	r24, 0x06	; 6
    1942:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e8       	ldi	r26, 0x80	; 128
    194c:	bf e3       	ldi	r27, 0x3F	; 63
    194e:	8b 87       	std	Y+11, r24	; 0x0b
    1950:	9c 87       	std	Y+12, r25	; 0x0c
    1952:	ad 87       	std	Y+13, r26	; 0x0d
    1954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a ef       	ldi	r20, 0xFA	; 250
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8f 83       	std	Y+7, r24	; 0x07
    1970:	98 87       	std	Y+8, r25	; 0x08
    1972:	a9 87       	std	Y+9, r26	; 0x09
    1974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <LCD_voidInit+0x468>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <LCD_voidInit+0x4e6>
	else if (__tmp > 65535)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <LCD_voidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <LCD_voidInit+0x4c8>
    19da:	88 ec       	ldi	r24, 0xC8	; 200
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_voidInit+0x4b6>
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <LCD_voidInit+0x4aa>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <LCD_voidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_voidInit+0x4f2>
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	

}
    1a2a:	ca 5b       	subi	r28, 0xBA	; 186
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	08 95       	ret

00001a42 <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8cmnd)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	6d 97       	sbiw	r28, 0x1d	; 29
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd>>4);
    1a6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6e:	82 95       	swap	r24
    1a70:	8f 70       	andi	r24, 0x0F	; 15
    1a72:	0e 94 ed 10 	call	0x21da	; 0x21da <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	62 e0       	ldi	r22, 0x02	; 2
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e8       	ldi	r26, 0x80	; 128
    1a86:	bf e3       	ldi	r27, 0x3F	; 63
    1a88:	89 8f       	std	Y+25, r24	; 0x19
    1a8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	69 8d       	ldd	r22, Y+25	; 0x19
    1a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	8d 8b       	std	Y+21, r24	; 0x15
    1aaa:	9e 8b       	std	Y+22, r25	; 0x16
    1aac:	af 8b       	std	Y+23, r26	; 0x17
    1aae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <LCD_voidSendCmd+0x90>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <LCD_voidSendCmd+0x10e>
	else if (__tmp > 65535)
    1ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <LCD_voidSendCmd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	69 8d       	ldd	r22, Y+25	; 0x19
    1aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <LCD_voidSendCmd+0xf0>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9a 8b       	std	Y+18, r25	; 0x12
    1b1a:	89 8b       	std	Y+17, r24	; 0x11
    1b1c:	89 89       	ldd	r24, Y+17	; 0x11
    1b1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_voidSendCmd+0xde>
    1b24:	9a 8b       	std	Y+18, r25	; 0x12
    1b26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <LCD_voidSendCmd+0xd2>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <LCD_voidSendCmd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b40:	8f 89       	ldd	r24, Y+23	; 0x17
    1b42:	98 8d       	ldd	r25, Y+24	; 0x18
    1b44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9c 8b       	std	Y+20, r25	; 0x14
    1b4e:	8b 8b       	std	Y+19, r24	; 0x13
    1b50:	8b 89       	ldd	r24, Y+19	; 0x13
    1b52:	9c 89       	ldd	r25, Y+20	; 0x14
    1b54:	98 8b       	std	Y+16, r25	; 0x10
    1b56:	8f 87       	std	Y+15, r24	; 0x0f
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	98 89       	ldd	r25, Y+16	; 0x10
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_voidSendCmd+0x11a>
    1b60:	98 8b       	std	Y+16, r25	; 0x10
    1b62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	62 e0       	ldi	r22, 0x02	; 2
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd);
    1b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b70:	0e 94 ed 10 	call	0x21da	; 0x21da <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	9c 87       	std	Y+12, r25	; 0x0c
    1b8a:	ad 87       	std	Y+13, r26	; 0x0d
    1b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    1ba8:	98 87       	std	Y+8, r25	; 0x08
    1baa:	a9 87       	std	Y+9, r26	; 0x09
    1bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_voidSendCmd+0x18e>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_voidSendCmd+0x20c>
	else if (__tmp > 65535)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_voidSendCmd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_voidSendCmd+0x1ee>
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_voidSendCmd+0x1dc>
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_voidSendCmd+0x1d0>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_voidSendCmd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_voidSendCmd+0x218>
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	62 e0       	ldi	r22, 0x02	; 2
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>


#endif

}
    1c6c:	6d 96       	adiw	r28, 0x1d	; 29
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <LCD_voidSendChar>:
void LCD_voidSendChar(u8 copy_u8data)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	6d 97       	sbiw	r28, 0x1d	; 29
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_HIGH);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data>>4);
    1ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1caa:	82 95       	swap	r24
    1cac:	8f 70       	andi	r24, 0x0F	; 15
    1cae:	0e 94 ed 10 	call	0x21da	; 0x21da <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e8       	ldi	r26, 0x80	; 128
    1cc2:	bf e3       	ldi	r27, 0x3F	; 63
    1cc4:	89 8f       	std	Y+25, r24	; 0x19
    1cc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1cca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a ef       	ldi	r20, 0xFA	; 250
    1cda:	54 e4       	ldi	r21, 0x44	; 68
    1cdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8d 8b       	std	Y+21, r24	; 0x15
    1ce6:	9e 8b       	std	Y+22, r25	; 0x16
    1ce8:	af 8b       	std	Y+23, r26	; 0x17
    1cea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cec:	6d 89       	ldd	r22, Y+21	; 0x15
    1cee:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <LCD_voidSendChar+0x90>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <LCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    1d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d10:	7e 89       	ldd	r23, Y+22	; 0x16
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	4c f5       	brge	.+82     	; 0x1d78 <LCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	69 8d       	ldd	r22, Y+25	; 0x19
    1d28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <LCD_voidSendChar+0xf0>
    1d50:	88 ec       	ldi	r24, 0xC8	; 200
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9a 8b       	std	Y+18, r25	; 0x12
    1d56:	89 8b       	std	Y+17, r24	; 0x11
    1d58:	89 89       	ldd	r24, Y+17	; 0x11
    1d5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_voidSendChar+0xde>
    1d60:	9a 8b       	std	Y+18, r25	; 0x12
    1d62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d70:	9c 89       	ldd	r25, Y+20	; 0x14
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <LCD_voidSendChar+0xd2>
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <LCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9c 8b       	std	Y+20, r25	; 0x14
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d90:	98 8b       	std	Y+16, r25	; 0x10
    1d92:	8f 87       	std	Y+15, r24	; 0x0f
    1d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d96:	98 89       	ldd	r25, Y+16	; 0x10
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_voidSendChar+0x11a>
    1d9c:	98 8b       	std	Y+16, r25	; 0x10
    1d9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data);
    1daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dac:	0e 94 ed 10 	call	0x21da	; 0x21da <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	62 e0       	ldi	r22, 0x02	; 2
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	8b 87       	std	Y+11, r24	; 0x0b
    1dc4:	9c 87       	std	Y+12, r25	; 0x0c
    1dc6:	ad 87       	std	Y+13, r26	; 0x0d
    1dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8f 83       	std	Y+7, r24	; 0x07
    1de4:	98 87       	std	Y+8, r25	; 0x08
    1de6:	a9 87       	std	Y+9, r26	; 0x09
    1de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_voidSendChar+0x18e>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_voidSendChar+0x20c>
	else if (__tmp > 65535)
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_voidSendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_voidSendChar+0x1ee>
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_voidSendChar+0x1dc>
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_voidSendChar+0x1d0>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_voidSendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_voidSendChar+0x218>
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>
#endif
}
    1ea8:	6d 96       	adiw	r28, 0x1d	; 29
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_VoidSendStr>:


void LCD_VoidSendStr(u8 * pu8_copystr)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_VoidSendStr+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	9b 83       	std	Y+3, r25	; 0x03
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    1eca:	19 82       	std	Y+1, r1	; 0x01
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <LCD_VoidSendStr+0x30>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
void LCD_VoidSendStr(u8 * pu8_copystr)
{
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	39 f7       	brne	.-50     	; 0x1ece <LCD_VoidSendStr+0x14>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
		}
   }
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_voidSendNumber>:


void LCD_voidSendNumber(u32 copy_u32data)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_voidSendNumber+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <LCD_voidSendNumber+0x8>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <LCD_voidSendNumber+0xa>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05

  u32 local_u32temp=0,reminder;
    1f1e:	1c 82       	std	Y+4, r1	; 0x04
    1f20:	1b 82       	std	Y+3, r1	; 0x03

  if(copy_u32data==0)
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	21 f4       	brne	.+8      	; 0x1f32 <LCD_voidSendNumber+0x26>
  {
	  LCD_voidSendChar('0');
    1f2a:	80 e3       	ldi	r24, 0x30	; 48
    1f2c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    1f30:	57 c0       	rjmp	.+174    	; 0x1fe0 <LCD_voidSendNumber+0xd4>
  }
  else
  {
	  copy_u32data=(copy_u32data*10)+1;
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	9c 01       	movw	r18, r24
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	c9 01       	movw	r24, r18
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	82 0f       	add	r24, r18
    1f48:	93 1f       	adc	r25, r19
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	29 c0       	rjmp	.+82     	; 0x1fa4 <LCD_voidSendNumber+0x98>
	  while(copy_u32data!=0)
	  {
	  reminder = copy_u32data %10;
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	2a e0       	ldi	r18, 0x0A	; 10
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	b9 01       	movw	r22, r18
    1f5c:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__udivmodhi4>
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
	  copy_u32data /=10;
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	2a e0       	ldi	r18, 0x0A	; 10
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__udivmodhi4>
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
	  local_u32temp *=10;
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	9c 01       	movw	r18, r24
    1f7e:	22 0f       	add	r18, r18
    1f80:	33 1f       	adc	r19, r19
    1f82:	c9 01       	movw	r24, r18
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
	  local_u32temp =local_u32temp+reminder;
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	82 0f       	add	r24, r18
    1f9e:	93 1f       	adc	r25, r19
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
	  LCD_voidSendChar('0');
  }
  else
  {
	  copy_u32data=(copy_u32data*10)+1;
	  while(copy_u32data!=0)
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	99 f6       	brne	.-90     	; 0x1f52 <LCD_voidSendNumber+0x46>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <LCD_voidSendNumber+0xca>
	  local_u32temp =local_u32temp+reminder;

	  }
	  while(local_u32temp!=1)
	  {
		  LCD_voidSendChar(local_u32temp%10+'0');
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	b9 01       	movw	r22, r18
    1fb8:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__udivmodhi4>
    1fbc:	80 5d       	subi	r24, 0xD0	; 208
    1fbe:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
		  local_u32temp /=10;
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	2a e0       	ldi	r18, 0x0A	; 10
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	b9 01       	movw	r22, r18
    1fcc:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__udivmodhi4>
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
	  copy_u32data /=10;
	  local_u32temp *=10;
	  local_u32temp =local_u32temp+reminder;

	  }
	  while(local_u32temp!=1)
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	39 f7       	brne	.-50     	; 0x1fae <LCD_voidSendNumber+0xa2>
	  }

  }


}
    1fe0:	26 96       	adiw	r28, 0x06	; 6
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <LCD_voidGotoXY>:
void LCD_voidGotoXY(u8 copy_u8line,u8 copy_u8pos)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <LCD_voidGotoXY+0x6>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <LCD_voidGotoXY+0x8>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	6a 83       	std	Y+2, r22	; 0x02

	if((copy_u8line==LCD_LINE2) || (copy_u8line==LCD_LINE1) && copy_u8pos < 16 )
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	31 f0       	breq	.+12     	; 0x2014 <LCD_voidGotoXY+0x22>
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	e1 f4       	brne	.+56     	; 0x2046 <LCD_voidGotoXY+0x54>
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	80 31       	cpi	r24, 0x10	; 16
    2012:	c8 f4       	brcc	.+50     	; 0x2046 <LCD_voidGotoXY+0x54>
	{
		switch(copy_u8line)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3c 83       	std	Y+4, r19	; 0x04
    201c:	2b 83       	std	Y+3, r18	; 0x03
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	31 f0       	breq	.+12     	; 0x2034 <LCD_voidGotoXY+0x42>
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	3c 81       	ldd	r19, Y+4	; 0x04
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	31 f0       	breq	.+12     	; 0x203e <LCD_voidGotoXY+0x4c>
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <LCD_voidGotoXY+0x54>
		{
		case(LCD_LINE1):
		     LCD_voidSendCmd(LCD_CURSOR_LINE1+copy_u8pos);
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	80 58       	subi	r24, 0x80	; 128
    2038:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <LCD_voidGotoXY+0x54>
		break;

		case(LCD_LINE2):
			LCD_voidSendCmd(LCD_CURSOR_LINE2+copy_u8pos);
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	80 54       	subi	r24, 0x40	; 64
    2042:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
		break;
		}
	}
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <LCD_Clear>:
void LCD_Clear(void)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	2e 97       	sbiw	r28, 0x0e	; 14
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e8       	ldi	r26, 0x80	; 128
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	8b 87       	std	Y+11, r24	; 0x0b
    2078:	9c 87       	std	Y+12, r25	; 0x0c
    207a:	ad 87       	std	Y+13, r26	; 0x0d
    207c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2080:	7c 85       	ldd	r23, Y+12	; 0x0c
    2082:	8d 85       	ldd	r24, Y+13	; 0x0d
    2084:	9e 85       	ldd	r25, Y+14	; 0x0e
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a ef       	ldi	r20, 0xFA	; 250
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8f 83       	std	Y+7, r24	; 0x07
    2098:	98 87       	std	Y+8, r25	; 0x08
    209a:	a9 87       	std	Y+9, r26	; 0x09
    209c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_Clear+0x6c>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	3f c0       	rjmp	.+126    	; 0x213e <LCD_Clear+0xea>
	else if (__tmp > 65535)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20da:	7c 85       	ldd	r23, Y+12	; 0x0c
    20dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20de:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_Clear+0xcc>
    2102:	88 ec       	ldi	r24, 0xC8	; 200
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_Clear+0xba>
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <LCD_Clear+0xae>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6f 81       	ldd	r22, Y+7	; 0x07
    212c:	78 85       	ldd	r23, Y+8	; 0x08
    212e:	89 85       	ldd	r24, Y+9	; 0x09
    2130:	9a 85       	ldd	r25, Y+10	; 0x0a
    2132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_Clear+0xf6>
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2152:	2e 96       	adiw	r28, 0x0e	; 14
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_voidsendPatern>:

void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <LCD_voidsendPatern+0x6>
    216a:	00 d0       	rcall	.+0      	; 0x216c <LCD_voidsendPatern+0x8>
    216c:	00 d0       	rcall	.+0      	; 0x216e <LCD_voidsendPatern+0xa>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	9b 83       	std	Y+3, r25	; 0x03
    2174:	8a 83       	std	Y+2, r24	; 0x02
    2176:	6c 83       	std	Y+4, r22	; 0x04
    2178:	4d 83       	std	Y+5, r20	; 0x05
    217a:	2e 83       	std	Y+6, r18	; 0x06
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	08 96       	adiw	r24, 0x08	; 8
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LCD_voidSendCmd>
	for(i=0;i<=ENTRY_ARRAY;i++)
    2194:	19 82       	std	Y+1, r1	; 0x01
    2196:	0e c0       	rjmp	.+28     	; 0x21b4 <LCD_voidsendPatern+0x50>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	9b 81       	ldd	r25, Y+3	; 0x03
    21a2:	fc 01       	movw	r30, r24
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	80 81       	ld	r24, Z
    21aa:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
	for(i=0;i<=ENTRY_ARRAY;i++)
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 30       	cpi	r24, 0x08	; 8
    21b8:	78 f3       	brcs	.-34     	; 0x2198 <LCD_voidsendPatern+0x34>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
	}
	LCD_voidGotoXY(copy_u8row,copy_u8col);
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	6e 81       	ldd	r22, Y+6	; 0x06
    21be:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
	LCD_voidSendChar(copy_u8location);
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>


}
    21c8:	26 96       	adiw	r28, 0x06	; 6
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <Private_voidwriteHalfPort>:

#if LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
static void Private_voidwriteHalfPort(u8 copy_u8value)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <Private_voidwriteHalfPort+0x6>
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 get_bit;

        get_bit =GET_BIT(copy_u8value,0);
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	81 70       	andi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D4_PORT,LCD_U8_D4_PIN,get_bit);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	63 e0       	ldi	r22, 0x03	; 3
    21f0:	49 81       	ldd	r20, Y+1	; 0x01
    21f2:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,1);
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	86 95       	lsr	r24
    21fa:	81 70       	andi	r24, 0x01	; 1
    21fc:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D5_PORT,LCD_U8_D5_PIN,get_bit);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	64 e0       	ldi	r22, 0x04	; 4
    2202:	49 81       	ldd	r20, Y+1	; 0x01
    2204:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,2);
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	86 95       	lsr	r24
    220c:	86 95       	lsr	r24
    220e:	81 70       	andi	r24, 0x01	; 1
    2210:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D6_PORT,LCD_U8_D6_PIN,get_bit);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	65 e0       	ldi	r22, 0x05	; 5
    2216:	49 81       	ldd	r20, Y+1	; 0x01
    2218:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,3);
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	86 95       	lsr	r24
    2220:	86 95       	lsr	r24
    2222:	86 95       	lsr	r24
    2224:	81 70       	andi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(LCD_U8_D7_PORT,LCD_U8_D7_PIN,get_bit);
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	66 e0       	ldi	r22, 0x06	; 6
    222c:	49 81       	ldd	r20, Y+1	; 0x01
    222e:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_u8SetPinValue>

}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <main>:
u8 arr1[4]={'+','-','/','*'};
s8 i=1;
s8 x=1;
s8 z=1;
int main(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	6f 97       	sbiw	r28, 0x1f	; 31
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    2250:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_voidInit>
	LCD_voidInit();
    2254:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_voidInit>

	u8 pu8_SW_UP,pu8_SW_DOWEN,pu8_SW_ENTER;

	LCD_voidSendChar('1');
    2258:	81 e3       	ldi	r24, 0x31	; 49
    225a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
	LCD_voidSendChar('+');
    225e:	8b e2       	ldi	r24, 0x2B	; 43
    2260:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
	LCD_voidSendChar('1');
    2264:	81 e3       	ldi	r24, 0x31	; 49
    2266:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
	LCD_voidSendChar('=');
    226a:	8d e3       	ldi	r24, 0x3D	; 61
    226c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
	LCD_voidSendChar('2');
    2270:	82 e3       	ldi	r24, 0x32	; 50
    2272:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
	//LCD_voidSendNumber(550);

	while(1)
	{

	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    2276:	9e 01       	movw	r18, r28
    2278:	23 5e       	subi	r18, 0xE3	; 227
    227a:	3f 4f       	sbci	r19, 0xFF	; 255
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    2286:	9e 01       	movw	r18, r28
    2288:	22 5e       	subi	r18, 0xE2	; 226
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	a9 01       	movw	r20, r18
    2292:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    2296:	9e 01       	movw	r18, r28
    2298:	21 5e       	subi	r18, 0xE1	; 225
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	62 e0       	ldi	r22, 0x02	; 2
    22a0:	a9 01       	movw	r20, r18
    22a2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a8 e4       	ldi	r26, 0x48	; 72
    22ac:	b3 e4       	ldi	r27, 0x43	; 67
    22ae:	89 8f       	std	Y+25, r24	; 0x19
    22b0:	9a 8f       	std	Y+26, r25	; 0x1a
    22b2:	ab 8f       	std	Y+27, r26	; 0x1b
    22b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	69 8d       	ldd	r22, Y+25	; 0x19
    22b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a ef       	ldi	r20, 0xFA	; 250
    22c4:	54 e4       	ldi	r21, 0x44	; 68
    22c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8d 8b       	std	Y+21, r24	; 0x15
    22d0:	9e 8b       	std	Y+22, r25	; 0x16
    22d2:	af 8b       	std	Y+23, r26	; 0x17
    22d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d6:	6d 89       	ldd	r22, Y+21	; 0x15
    22d8:	7e 89       	ldd	r23, Y+22	; 0x16
    22da:	8f 89       	ldd	r24, Y+23	; 0x17
    22dc:	98 8d       	ldd	r25, Y+24	; 0x18
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <main+0xbc>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <main+0x13a>
	else if (__tmp > 65535)
    22f8:	6d 89       	ldd	r22, Y+21	; 0x15
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <main+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	69 8d       	ldd	r22, Y+25	; 0x19
    2312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <main+0x11c>
    233a:	88 ec       	ldi	r24, 0xC8	; 200
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9a 8b       	std	Y+18, r25	; 0x12
    2340:	89 8b       	std	Y+17, r24	; 0x11
    2342:	89 89       	ldd	r24, Y+17	; 0x11
    2344:	9a 89       	ldd	r25, Y+18	; 0x12
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <main+0x10a>
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8b 89       	ldd	r24, Y+19	; 0x13
    2350:	9c 89       	ldd	r25, Y+20	; 0x14
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9c 8b       	std	Y+20, r25	; 0x14
    2356:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <main+0xfe>
    2360:	e3 c0       	rjmp	.+454    	; 0x2528 <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6d 89       	ldd	r22, Y+21	; 0x15
    2364:	7e 89       	ldd	r23, Y+22	; 0x16
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	98 8d       	ldd	r25, Y+24	; 0x18
    236a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	98 8b       	std	Y+16, r25	; 0x10
    237c:	8f 87       	std	Y+15, r24	; 0x0f
    237e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2380:	98 89       	ldd	r25, Y+16	; 0x10
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <main+0x146>
    2386:	98 8b       	std	Y+16, r25	; 0x10
    2388:	8f 87       	std	Y+15, r24	; 0x0f
    238a:	ce c0       	rjmp	.+412    	; 0x2528 <main+0x2ec>
   _delay_ms(200);
		while(pu8_SW_ENTER!=0 )
		{
		if(pu8_SW_UP==0)
    238c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238e:	88 23       	and	r24, r24
    2390:	f9 f4       	brne	.+62     	; 0x23d0 <main+0x194>
		{
	   	  if(i>=9)
    2392:	80 91 76 01 	lds	r24, 0x0176
    2396:	89 30       	cpi	r24, 0x09	; 9
    2398:	1c f0       	brlt	.+6      	; 0x23a0 <main+0x164>
	        { i=-1;}
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	80 93 76 01 	sts	0x0176, r24
		LCD_voidGotoXY(1,0);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
        i++;
    23a8:	80 91 76 01 	lds	r24, 0x0176
    23ac:	8f 5f       	subi	r24, 0xFF	; 255
    23ae:	80 93 76 01 	sts	0x0176, r24
	    LCD_Clear();
    23b2:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
     	LCD_voidSendNumber(arr[i]);
    23b6:	80 91 76 01 	lds	r24, 0x0176
    23ba:	99 27       	eor	r25, r25
    23bc:	87 fd       	sbrc	r24, 7
    23be:	90 95       	com	r25
    23c0:	fc 01       	movw	r30, r24
    23c2:	e8 59       	subi	r30, 0x98	; 152
    23c4:	fe 4f       	sbci	r31, 0xFE	; 254
    23c6:	80 81       	ld	r24, Z
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
		}
     	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    23d0:	9e 01       	movw	r18, r28
    23d2:	23 5e       	subi	r18, 0xE3	; 227
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	a9 01       	movw	r20, r18
    23dc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    23e0:	9e 01       	movw	r18, r28
    23e2:	22 5e       	subi	r18, 0xE2	; 226
    23e4:	3f 4f       	sbci	r19, 0xFF	; 255
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	a9 01       	movw	r20, r18
    23ec:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    23f0:	9e 01       	movw	r18, r28
    23f2:	21 5e       	subi	r18, 0xE1	; 225
    23f4:	3f 4f       	sbci	r19, 0xFF	; 255
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	62 e0       	ldi	r22, 0x02	; 2
    23fa:	a9 01       	movw	r20, r18
    23fc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a8 e4       	ldi	r26, 0x48	; 72
    2406:	b3 e4       	ldi	r27, 0x43	; 67
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	ad 87       	std	Y+13, r26	; 0x0d
    240e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
    242c:	a9 87       	std	Y+9, r26	; 0x09
    242e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <main+0x216>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <main+0x294>
	else if (__tmp > 65535)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <main+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <main+0x276>
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <main+0x264>
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <main+0x258>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <main+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <main+0x2a0>
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(200);
    	if(pu8_SW_DOWEN==0)
    24e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24e6:	88 23       	and	r24, r24
    24e8:	f9 f4       	brne	.+62     	; 0x2528 <main+0x2ec>
    	{
            if(i==0)
    24ea:	80 91 76 01 	lds	r24, 0x0176
    24ee:	88 23       	and	r24, r24
    24f0:	19 f4       	brne	.+6      	; 0x24f8 <main+0x2bc>
    	    { i=10;}
    24f2:	8a e0       	ldi	r24, 0x0A	; 10
    24f4:	80 93 76 01 	sts	0x0176, r24
    		i--;
    24f8:	80 91 76 01 	lds	r24, 0x0176
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	80 93 76 01 	sts	0x0176, r24
    		LCD_voidGotoXY(1,0);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
        	LCD_Clear();
    250a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
        	LCD_voidSendNumber(arr[i]);
    250e:	80 91 76 01 	lds	r24, 0x0176
    2512:	99 27       	eor	r25, r25
    2514:	87 fd       	sbrc	r24, 7
    2516:	90 95       	com	r25
    2518:	fc 01       	movw	r30, r24
    251a:	e8 59       	subi	r30, 0x98	; 152
    251c:	fe 4f       	sbci	r31, 0xFE	; 254
    251e:	80 81       	ld	r24, Z
    2520:	88 2f       	mov	r24, r24
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>

	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
   _delay_ms(200);
		while(pu8_SW_ENTER!=0 )
    2528:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252a:	88 23       	and	r24, r24
    252c:	09 f0       	breq	.+2      	; 0x2530 <main+0x2f4>
    252e:	2e cf       	rjmp	.-420    	; 0x238c <main+0x150>
        	LCD_voidSendNumber(arr[i]);

    	}
		}

	if(pu8_SW_ENTER==0)
    2530:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2532:	88 23       	and	r24, r24
    2534:	11 f4       	brne	.+4      	; 0x253a <main+0x2fe>
	{
		 selectop();
    2536:	0e 94 a9 12 	call	0x2552	; 0x2552 <selectop>

	}

  if(pu8_SW_ENTER==0)
    253a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    253c:	88 23       	and	r24, r24
    253e:	11 f4       	brne	.+4      	; 0x2544 <main+0x308>
    {
	fun();
    2540:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fun>
    }

  if(pu8_SW_ENTER==0)
    2544:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2546:	88 23       	and	r24, r24
    2548:	09 f0       	breq	.+2      	; 0x254c <main+0x310>
    254a:	95 ce       	rjmp	.-726    	; 0x2276 <main+0x3a>
  {
	  fun1();
    254c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <fun1>
    2550:	92 ce       	rjmp	.-732    	; 0x2276 <main+0x3a>

00002552 <selectop>:


}

void selectop(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	a3 97       	sbiw	r28, 0x23	; 35
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
	u8 pu8_SW_UP,pu8_SW_DOWEN,pu8_SW_ENTER;


	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    2566:	9e 01       	movw	r18, r28
    2568:	23 5e       	subi	r18, 0xE3	; 227
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	a9 01       	movw	r20, r18
    2572:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    2576:	9e 01       	movw	r18, r28
    2578:	22 5e       	subi	r18, 0xE2	; 226
    257a:	3f 4f       	sbci	r19, 0xFF	; 255
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	a9 01       	movw	r20, r18
    2582:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    2586:	9e 01       	movw	r18, r28
    2588:	21 5e       	subi	r18, 0xE1	; 225
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	62 e0       	ldi	r22, 0x02	; 2
    2590:	a9 01       	movw	r20, r18
    2592:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a8 e4       	ldi	r26, 0x48	; 72
    259c:	b3 e4       	ldi	r27, 0x43	; 67
    259e:	89 8f       	std	Y+25, r24	; 0x19
    25a0:	9a 8f       	std	Y+26, r25	; 0x1a
    25a2:	ab 8f       	std	Y+27, r26	; 0x1b
    25a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a6:	69 8d       	ldd	r22, Y+25	; 0x19
    25a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a ef       	ldi	r20, 0xFA	; 250
    25b4:	54 e4       	ldi	r21, 0x44	; 68
    25b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8d 8b       	std	Y+21, r24	; 0x15
    25c0:	9e 8b       	std	Y+22, r25	; 0x16
    25c2:	af 8b       	std	Y+23, r26	; 0x17
    25c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c6:	6d 89       	ldd	r22, Y+21	; 0x15
    25c8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ca:	8f 89       	ldd	r24, Y+23	; 0x17
    25cc:	98 8d       	ldd	r25, Y+24	; 0x18
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e8       	ldi	r20, 0x80	; 128
    25d4:	5f e3       	ldi	r21, 0x3F	; 63
    25d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25da:	88 23       	and	r24, r24
    25dc:	2c f4       	brge	.+10     	; 0x25e8 <selectop+0x96>
		__ticks = 1;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9c 8b       	std	Y+20, r25	; 0x14
    25e4:	8b 8b       	std	Y+19, r24	; 0x13
    25e6:	3f c0       	rjmp	.+126    	; 0x2666 <selectop+0x114>
	else if (__tmp > 65535)
    25e8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ea:	7e 89       	ldd	r23, Y+22	; 0x16
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	4c f5       	brge	.+82     	; 0x2652 <selectop+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	69 8d       	ldd	r22, Y+25	; 0x19
    2602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <selectop+0xf6>
    262a:	88 ec       	ldi	r24, 0xC8	; 200
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9a 8b       	std	Y+18, r25	; 0x12
    2630:	89 8b       	std	Y+17, r24	; 0x11
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <selectop+0xe4>
    263a:	9a 8b       	std	Y+18, r25	; 0x12
    263c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263e:	8b 89       	ldd	r24, Y+19	; 0x13
    2640:	9c 89       	ldd	r25, Y+20	; 0x14
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2648:	8b 89       	ldd	r24, Y+19	; 0x13
    264a:	9c 89       	ldd	r25, Y+20	; 0x14
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	69 f7       	brne	.-38     	; 0x262a <selectop+0xd8>
    2650:	bb c1       	rjmp	.+886    	; 0x29c8 <selectop+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9c 8b       	std	Y+20, r25	; 0x14
    2664:	8b 8b       	std	Y+19, r24	; 0x13
    2666:	8b 89       	ldd	r24, Y+19	; 0x13
    2668:	9c 89       	ldd	r25, Y+20	; 0x14
    266a:	98 8b       	std	Y+16, r25	; 0x10
    266c:	8f 87       	std	Y+15, r24	; 0x0f
    266e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2670:	98 89       	ldd	r25, Y+16	; 0x10
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <selectop+0x120>
    2676:	98 8b       	std	Y+16, r25	; 0x10
    2678:	8f 87       	std	Y+15, r24	; 0x0f
    267a:	a6 c1       	rjmp	.+844    	; 0x29c8 <selectop+0x476>
	_delay_ms(200);
	while(pu8_SW_ENTER !=0)
	{
		if(pu8_SW_UP==0)
    267c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267e:	88 23       	and	r24, r24
    2680:	09 f0       	breq	.+2      	; 0x2684 <selectop+0x132>
    2682:	8a c0       	rjmp	.+276    	; 0x2798 <selectop+0x246>
		{
			if(x==4)
    2684:	80 91 77 01 	lds	r24, 0x0177
    2688:	84 30       	cpi	r24, 0x04	; 4
    268a:	19 f4       	brne	.+6      	; 0x2692 <selectop+0x140>
			{x=-1;}
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	80 93 77 01 	sts	0x0177, r24
			x++;
    2692:	80 91 77 01 	lds	r24, 0x0177
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	80 93 77 01 	sts	0x0177, r24
			switch(x)
    269c:	80 91 77 01 	lds	r24, 0x0177
    26a0:	28 2f       	mov	r18, r24
    26a2:	33 27       	eor	r19, r19
    26a4:	27 fd       	sbrc	r18, 7
    26a6:	30 95       	com	r19
    26a8:	3b a3       	std	Y+35, r19	; 0x23
    26aa:	2a a3       	std	Y+34, r18	; 0x22
    26ac:	8a a1       	ldd	r24, Y+34	; 0x22
    26ae:	9b a1       	ldd	r25, Y+35	; 0x23
    26b0:	81 30       	cpi	r24, 0x01	; 1
    26b2:	91 05       	cpc	r25, r1
    26b4:	69 f1       	breq	.+90     	; 0x2710 <selectop+0x1be>
    26b6:	2a a1       	ldd	r18, Y+34	; 0x22
    26b8:	3b a1       	ldd	r19, Y+35	; 0x23
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	2c f4       	brge	.+10     	; 0x26ca <selectop+0x178>
    26c0:	8a a1       	ldd	r24, Y+34	; 0x22
    26c2:	9b a1       	ldd	r25, Y+35	; 0x23
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f0       	breq	.+26     	; 0x26e2 <selectop+0x190>
    26c8:	67 c0       	rjmp	.+206    	; 0x2798 <selectop+0x246>
    26ca:	2a a1       	ldd	r18, Y+34	; 0x22
    26cc:	3b a1       	ldd	r19, Y+35	; 0x23
    26ce:	22 30       	cpi	r18, 0x02	; 2
    26d0:	31 05       	cpc	r19, r1
    26d2:	a9 f1       	breq	.+106    	; 0x273e <selectop+0x1ec>
    26d4:	8a a1       	ldd	r24, Y+34	; 0x22
    26d6:	9b a1       	ldd	r25, Y+35	; 0x23
    26d8:	83 30       	cpi	r24, 0x03	; 3
    26da:	91 05       	cpc	r25, r1
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <selectop+0x18e>
    26de:	46 c0       	rjmp	.+140    	; 0x276c <selectop+0x21a>
    26e0:	5b c0       	rjmp	.+182    	; 0x2798 <selectop+0x246>
						{
						case 0:
				    		LCD_voidGotoXY(1,0);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				        	LCD_Clear();
    26ea:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				        	LCD_voidSendNumber(arr[i]);
    26ee:	80 91 76 01 	lds	r24, 0x0176
    26f2:	99 27       	eor	r25, r25
    26f4:	87 fd       	sbrc	r24, 7
    26f6:	90 95       	com	r25
    26f8:	fc 01       	movw	r30, r24
    26fa:	e8 59       	subi	r30, 0x98	; 152
    26fc:	fe 4f       	sbci	r31, 0xFE	; 254
    26fe:	80 81       	ld	r24, Z
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
							LCD_voidSendChar('+');
    2708:	8b e2       	ldi	r24, 0x2B	; 43
    270a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    270e:	44 c0       	rjmp	.+136    	; 0x2798 <selectop+0x246>
							break;
						case 1:
				    		LCD_voidGotoXY(1,0);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				        	LCD_Clear();
    2718:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				        	LCD_voidSendNumber(arr[i]);
    271c:	80 91 76 01 	lds	r24, 0x0176
    2720:	99 27       	eor	r25, r25
    2722:	87 fd       	sbrc	r24, 7
    2724:	90 95       	com	r25
    2726:	fc 01       	movw	r30, r24
    2728:	e8 59       	subi	r30, 0x98	; 152
    272a:	fe 4f       	sbci	r31, 0xFE	; 254
    272c:	80 81       	ld	r24, Z
    272e:	88 2f       	mov	r24, r24
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
							LCD_voidSendChar('-');
    2736:	8d e2       	ldi	r24, 0x2D	; 45
    2738:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    273c:	2d c0       	rjmp	.+90     	; 0x2798 <selectop+0x246>
							break;
						case 2:
				    		LCD_voidGotoXY(1,0);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				        	LCD_Clear();
    2746:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				        	LCD_voidSendNumber(arr[i]);
    274a:	80 91 76 01 	lds	r24, 0x0176
    274e:	99 27       	eor	r25, r25
    2750:	87 fd       	sbrc	r24, 7
    2752:	90 95       	com	r25
    2754:	fc 01       	movw	r30, r24
    2756:	e8 59       	subi	r30, 0x98	; 152
    2758:	fe 4f       	sbci	r31, 0xFE	; 254
    275a:	80 81       	ld	r24, Z
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
							LCD_voidSendChar('/');
    2764:	8f e2       	ldi	r24, 0x2F	; 47
    2766:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    276a:	16 c0       	rjmp	.+44     	; 0x2798 <selectop+0x246>
							break;
						case 3:
				    		LCD_voidGotoXY(1,0);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				        	LCD_Clear();
    2774:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				        	LCD_voidSendNumber(arr[i]);
    2778:	80 91 76 01 	lds	r24, 0x0176
    277c:	99 27       	eor	r25, r25
    277e:	87 fd       	sbrc	r24, 7
    2780:	90 95       	com	r25
    2782:	fc 01       	movw	r30, r24
    2784:	e8 59       	subi	r30, 0x98	; 152
    2786:	fe 4f       	sbci	r31, 0xFE	; 254
    2788:	80 81       	ld	r24, Z
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
							LCD_voidSendChar('*');
    2792:	8a e2       	ldi	r24, 0x2A	; 42
    2794:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
							break;
						}
		}
		if(pu8_SW_DOWEN==0)
    2798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    279a:	88 23       	and	r24, r24
    279c:	09 f0       	breq	.+2      	; 0x27a0 <selectop+0x24e>
    279e:	8a c0       	rjmp	.+276    	; 0x28b4 <selectop+0x362>
		{
			if(x==0)
    27a0:	80 91 77 01 	lds	r24, 0x0177
    27a4:	88 23       	and	r24, r24
    27a6:	19 f4       	brne	.+6      	; 0x27ae <selectop+0x25c>
			{x=4;}
    27a8:	84 e0       	ldi	r24, 0x04	; 4
    27aa:	80 93 77 01 	sts	0x0177, r24
			x--;
    27ae:	80 91 77 01 	lds	r24, 0x0177
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	80 93 77 01 	sts	0x0177, r24
			switch(x)
    27b8:	80 91 77 01 	lds	r24, 0x0177
    27bc:	28 2f       	mov	r18, r24
    27be:	33 27       	eor	r19, r19
    27c0:	27 fd       	sbrc	r18, 7
    27c2:	30 95       	com	r19
    27c4:	39 a3       	std	Y+33, r19	; 0x21
    27c6:	28 a3       	std	Y+32, r18	; 0x20
    27c8:	88 a1       	ldd	r24, Y+32	; 0x20
    27ca:	99 a1       	ldd	r25, Y+33	; 0x21
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	91 05       	cpc	r25, r1
    27d0:	69 f1       	breq	.+90     	; 0x282c <selectop+0x2da>
    27d2:	28 a1       	ldd	r18, Y+32	; 0x20
    27d4:	39 a1       	ldd	r19, Y+33	; 0x21
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	2c f4       	brge	.+10     	; 0x27e6 <selectop+0x294>
    27dc:	88 a1       	ldd	r24, Y+32	; 0x20
    27de:	99 a1       	ldd	r25, Y+33	; 0x21
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f0       	breq	.+26     	; 0x27fe <selectop+0x2ac>
    27e4:	67 c0       	rjmp	.+206    	; 0x28b4 <selectop+0x362>
    27e6:	28 a1       	ldd	r18, Y+32	; 0x20
    27e8:	39 a1       	ldd	r19, Y+33	; 0x21
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	a9 f1       	breq	.+106    	; 0x285a <selectop+0x308>
    27f0:	88 a1       	ldd	r24, Y+32	; 0x20
    27f2:	99 a1       	ldd	r25, Y+33	; 0x21
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	09 f4       	brne	.+2      	; 0x27fc <selectop+0x2aa>
    27fa:	46 c0       	rjmp	.+140    	; 0x2888 <selectop+0x336>
    27fc:	5b c0       	rjmp	.+182    	; 0x28b4 <selectop+0x362>
			{
			case 0:
	   		  LCD_voidGotoXY(1,0);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
        	  LCD_Clear();
    2806:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
			  LCD_voidSendNumber(arr[i]);
    280a:	80 91 76 01 	lds	r24, 0x0176
    280e:	99 27       	eor	r25, r25
    2810:	87 fd       	sbrc	r24, 7
    2812:	90 95       	com	r25
    2814:	fc 01       	movw	r30, r24
    2816:	e8 59       	subi	r30, 0x98	; 152
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	80 81       	ld	r24, Z
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
			  LCD_voidSendChar('+');
    2824:	8b e2       	ldi	r24, 0x2B	; 43
    2826:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    282a:	44 c0       	rjmp	.+136    	; 0x28b4 <selectop+0x362>
			break;
			case 1:
		      	     LCD_voidGotoXY(1,0);
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				      LCD_Clear();
    2834:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				      LCD_voidSendNumber(arr[i]);
    2838:	80 91 76 01 	lds	r24, 0x0176
    283c:	99 27       	eor	r25, r25
    283e:	87 fd       	sbrc	r24, 7
    2840:	90 95       	com	r25
    2842:	fc 01       	movw	r30, r24
    2844:	e8 59       	subi	r30, 0x98	; 152
    2846:	fe 4f       	sbci	r31, 0xFE	; 254
    2848:	80 81       	ld	r24, Z
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
				      LCD_voidSendChar('-');
    2852:	8d e2       	ldi	r24, 0x2D	; 45
    2854:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    2858:	2d c0       	rjmp	.+90     	; 0x28b4 <selectop+0x362>
			break;
						case 2:
				    		LCD_voidGotoXY(1,0);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				        	LCD_Clear();
    2862:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				        	LCD_voidSendNumber(arr[i]);
    2866:	80 91 76 01 	lds	r24, 0x0176
    286a:	99 27       	eor	r25, r25
    286c:	87 fd       	sbrc	r24, 7
    286e:	90 95       	com	r25
    2870:	fc 01       	movw	r30, r24
    2872:	e8 59       	subi	r30, 0x98	; 152
    2874:	fe 4f       	sbci	r31, 0xFE	; 254
    2876:	80 81       	ld	r24, Z
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
							LCD_voidSendChar('/');
    2880:	8f e2       	ldi	r24, 0x2F	; 47
    2882:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    2886:	16 c0       	rjmp	.+44     	; 0x28b4 <selectop+0x362>
							break;
						case 3:
				    		LCD_voidGotoXY(1,0);
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				        	LCD_Clear();
    2890:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
				        	LCD_voidSendNumber(arr[i]);
    2894:	80 91 76 01 	lds	r24, 0x0176
    2898:	99 27       	eor	r25, r25
    289a:	87 fd       	sbrc	r24, 7
    289c:	90 95       	com	r25
    289e:	fc 01       	movw	r30, r24
    28a0:	e8 59       	subi	r30, 0x98	; 152
    28a2:	fe 4f       	sbci	r31, 0xFE	; 254
    28a4:	80 81       	ld	r24, Z
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
							LCD_voidSendChar('*');
    28ae:	8a e2       	ldi	r24, 0x2A	; 42
    28b0:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
							break;
						}
			}

		DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    28b4:	9e 01       	movw	r18, r28
    28b6:	23 5e       	subi	r18, 0xE3	; 227
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	a9 01       	movw	r20, r18
    28c0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    28c4:	9e 01       	movw	r18, r28
    28c6:	22 5e       	subi	r18, 0xE2	; 226
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	a9 01       	movw	r20, r18
    28d0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    28d4:	9e 01       	movw	r18, r28
    28d6:	21 5e       	subi	r18, 0xE1	; 225
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	a9 01       	movw	r20, r18
    28e0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a8 e4       	ldi	r26, 0x48	; 72
    28ea:	b3 e4       	ldi	r27, 0x43	; 67
    28ec:	8b 87       	std	Y+11, r24	; 0x0b
    28ee:	9c 87       	std	Y+12, r25	; 0x0c
    28f0:	ad 87       	std	Y+13, r26	; 0x0d
    28f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	8f 83       	std	Y+7, r24	; 0x07
    290e:	98 87       	std	Y+8, r25	; 0x08
    2910:	a9 87       	std	Y+9, r26	; 0x09
    2912:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	2c f4       	brge	.+10     	; 0x2936 <selectop+0x3e4>
		__ticks = 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
    2934:	3f c0       	rjmp	.+126    	; 0x29b4 <selectop+0x462>
	else if (__tmp > 65535)
    2936:	6f 81       	ldd	r22, Y+7	; 0x07
    2938:	78 85       	ldd	r23, Y+8	; 0x08
    293a:	89 85       	ldd	r24, Y+9	; 0x09
    293c:	9a 85       	ldd	r25, Y+10	; 0x0a
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	3f ef       	ldi	r19, 0xFF	; 255
    2942:	4f e7       	ldi	r20, 0x7F	; 127
    2944:	57 e4       	ldi	r21, 0x47	; 71
    2946:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    294a:	18 16       	cp	r1, r24
    294c:	4c f5       	brge	.+82     	; 0x29a0 <selectop+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2950:	7c 85       	ldd	r23, Y+12	; 0x0c
    2952:	8d 85       	ldd	r24, Y+13	; 0x0d
    2954:	9e 85       	ldd	r25, Y+14	; 0x0e
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	9e 83       	std	Y+6, r25	; 0x06
    2974:	8d 83       	std	Y+5, r24	; 0x05
    2976:	0f c0       	rjmp	.+30     	; 0x2996 <selectop+0x444>
    2978:	88 ec       	ldi	r24, 0xC8	; 200
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	9c 81       	ldd	r25, Y+4	; 0x04
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <selectop+0x432>
    2988:	9c 83       	std	Y+4, r25	; 0x04
    298a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	69 f7       	brne	.-38     	; 0x2978 <selectop+0x426>
    299e:	14 c0       	rjmp	.+40     	; 0x29c8 <selectop+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	9a 81       	ldd	r25, Y+2	; 0x02
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <selectop+0x46e>
    29c4:	9a 83       	std	Y+2, r25	; 0x02
    29c6:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
	_delay_ms(200);
	while(pu8_SW_ENTER !=0)
    29c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ca:	88 23       	and	r24, r24
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <selectop+0x47e>
    29ce:	56 ce       	rjmp	.-852    	; 0x267c <selectop+0x12a>
		_delay_ms(200);
	}



}
    29d0:	a3 96       	adiw	r28, 0x23	; 35
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <fun>:
void fun(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	61 97       	sbiw	r28, 0x11	; 17
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
	u8 pu8_SW_UP,pu8_SW_DOWEN,pu8_SW_ENTER;


	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    29f6:	9e 01       	movw	r18, r28
    29f8:	21 5f       	subi	r18, 0xF1	; 241
    29fa:	3f 4f       	sbci	r19, 0xFF	; 255
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	a9 01       	movw	r20, r18
    2a02:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    2a06:	9e 01       	movw	r18, r28
    2a08:	20 5f       	subi	r18, 0xF0	; 240
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	a9 01       	movw	r20, r18
    2a12:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    2a16:	9e 01       	movw	r18, r28
    2a18:	2f 5e       	subi	r18, 0xEF	; 239
    2a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	62 e0       	ldi	r22, 0x02	; 2
    2a20:	a9 01       	movw	r20, r18
    2a22:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    2a26:	fe c0       	rjmp	.+508    	; 0x2c24 <fun+0x242>
	while(pu8_SW_ENTER!=0 )
	{
	if(pu8_SW_UP==0)
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	88 23       	and	r24, r24
    2a2c:	b9 f5       	brne	.+110    	; 0x2a9c <fun+0xba>
	{
   	  if(z>=9)
    2a2e:	80 91 78 01 	lds	r24, 0x0178
    2a32:	89 30       	cpi	r24, 0x09	; 9
    2a34:	1c f0       	brlt	.+6      	; 0x2a3c <fun+0x5a>
        { z=-1;}
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	80 93 78 01 	sts	0x0178, r24
	LCD_voidGotoXY(1,0);
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
    z++;
    2a44:	80 91 78 01 	lds	r24, 0x0178
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	80 93 78 01 	sts	0x0178, r24
    LCD_Clear();
    2a4e:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
	LCD_voidSendNumber(arr[i]);
    2a52:	80 91 76 01 	lds	r24, 0x0176
    2a56:	99 27       	eor	r25, r25
    2a58:	87 fd       	sbrc	r24, 7
    2a5a:	90 95       	com	r25
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	e8 59       	subi	r30, 0x98	; 152
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	80 81       	ld	r24, Z
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
	LCD_voidSendChar(arr1[x]);
    2a6c:	80 91 77 01 	lds	r24, 0x0177
    2a70:	99 27       	eor	r25, r25
    2a72:	87 fd       	sbrc	r24, 7
    2a74:	90 95       	com	r25
    2a76:	fc 01       	movw	r30, r24
    2a78:	ee 58       	subi	r30, 0x8E	; 142
    2a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7c:	80 81       	ld	r24, Z
    2a7e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
	LCD_voidSendNumber(arr[z]);
    2a82:	80 91 78 01 	lds	r24, 0x0178
    2a86:	99 27       	eor	r25, r25
    2a88:	87 fd       	sbrc	r24, 7
    2a8a:	90 95       	com	r25
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e8 59       	subi	r30, 0x98	; 152
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	80 81       	ld	r24, Z
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
	}
 	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    2a9c:	9e 01       	movw	r18, r28
    2a9e:	21 5f       	subi	r18, 0xF1	; 241
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	a9 01       	movw	r20, r18
    2aa8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    2aac:	9e 01       	movw	r18, r28
    2aae:	20 5f       	subi	r18, 0xF0	; 240
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	a9 01       	movw	r20, r18
    2ab8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    2abc:	9e 01       	movw	r18, r28
    2abe:	2f 5e       	subi	r18, 0xEF	; 239
    2ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	62 e0       	ldi	r22, 0x02	; 2
    2ac6:	a9 01       	movw	r20, r18
    2ac8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a8 e4       	ldi	r26, 0x48	; 72
    2ad2:	b3 e4       	ldi	r27, 0x43	; 67
    2ad4:	8b 87       	std	Y+11, r24	; 0x0b
    2ad6:	9c 87       	std	Y+12, r25	; 0x0c
    2ad8:	ad 87       	std	Y+13, r26	; 0x0d
    2ada:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4a ef       	ldi	r20, 0xFA	; 250
    2aea:	54 e4       	ldi	r21, 0x44	; 68
    2aec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	8f 83       	std	Y+7, r24	; 0x07
    2af6:	98 87       	std	Y+8, r25	; 0x08
    2af8:	a9 87       	std	Y+9, r26	; 0x09
    2afa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2afc:	6f 81       	ldd	r22, Y+7	; 0x07
    2afe:	78 85       	ldd	r23, Y+8	; 0x08
    2b00:	89 85       	ldd	r24, Y+9	; 0x09
    2b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	2c f4       	brge	.+10     	; 0x2b1e <fun+0x13c>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
    2b1c:	3f c0       	rjmp	.+126    	; 0x2b9c <fun+0x1ba>
	else if (__tmp > 65535)
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	57 e4       	ldi	r21, 0x47	; 71
    2b2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	4c f5       	brge	.+82     	; 0x2b88 <fun+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <fun+0x19c>
    2b60:	88 ec       	ldi	r24, 0xC8	; 200
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9c 83       	std	Y+4, r25	; 0x04
    2b66:	8b 83       	std	Y+3, r24	; 0x03
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <fun+0x18a>
    2b70:	9c 83       	std	Y+4, r25	; 0x04
    2b72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	9e 81       	ldd	r25, Y+6	; 0x06
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	69 f7       	brne	.-38     	; 0x2b60 <fun+0x17e>
    2b86:	14 c0       	rjmp	.+40     	; 0x2bb0 <fun+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b88:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8a:	78 85       	ldd	r23, Y+8	; 0x08
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba0:	9a 83       	std	Y+2, r25	; 0x02
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <fun+0x1c6>
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	if(pu8_SW_DOWEN==0)
    2bb0:	88 89       	ldd	r24, Y+16	; 0x10
    2bb2:	88 23       	and	r24, r24
    2bb4:	b9 f5       	brne	.+110    	; 0x2c24 <fun+0x242>
	{
        if(z==0)
    2bb6:	80 91 78 01 	lds	r24, 0x0178
    2bba:	88 23       	and	r24, r24
    2bbc:	19 f4       	brne	.+6      	; 0x2bc4 <fun+0x1e2>
	    { z=10;}
    2bbe:	8a e0       	ldi	r24, 0x0A	; 10
    2bc0:	80 93 78 01 	sts	0x0178, r24
		z--;
    2bc4:	80 91 78 01 	lds	r24, 0x0178
    2bc8:	81 50       	subi	r24, 0x01	; 1
    2bca:	80 93 78 01 	sts	0x0178, r24
		LCD_voidGotoXY(1,0);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
    	LCD_Clear();
    2bd6:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
    	LCD_voidSendNumber(arr[i]);
    2bda:	80 91 76 01 	lds	r24, 0x0176
    2bde:	99 27       	eor	r25, r25
    2be0:	87 fd       	sbrc	r24, 7
    2be2:	90 95       	com	r25
    2be4:	fc 01       	movw	r30, r24
    2be6:	e8 59       	subi	r30, 0x98	; 152
    2be8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bea:	80 81       	ld	r24, Z
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
    	LCD_voidSendChar(arr1[x]);
    2bf4:	80 91 77 01 	lds	r24, 0x0177
    2bf8:	99 27       	eor	r25, r25
    2bfa:	87 fd       	sbrc	r24, 7
    2bfc:	90 95       	com	r25
    2bfe:	fc 01       	movw	r30, r24
    2c00:	ee 58       	subi	r30, 0x8E	; 142
    2c02:	fe 4f       	sbci	r31, 0xFE	; 254
    2c04:	80 81       	ld	r24, Z
    2c06:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
    	LCD_voidSendNumber(arr[z]);
    2c0a:	80 91 78 01 	lds	r24, 0x0178
    2c0e:	99 27       	eor	r25, r25
    2c10:	87 fd       	sbrc	r24, 7
    2c12:	90 95       	com	r25
    2c14:	fc 01       	movw	r30, r24
    2c16:	e8 59       	subi	r30, 0x98	; 152
    2c18:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 2f       	mov	r24, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>


	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
	DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
	while(pu8_SW_ENTER!=0 )
    2c24:	89 89       	ldd	r24, Y+17	; 0x11
    2c26:	88 23       	and	r24, r24
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <fun+0x24a>
    2c2a:	fe ce       	rjmp	.-516    	; 0x2a28 <fun+0x46>

	}
	}


}
    2c2c:	61 96       	adiw	r28, 0x11	; 17
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <fun1>:
void fun1()
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	29 97       	sbiw	r28, 0x09	; 9
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
	f64 res;
	u8 pu8_SW_UP,pu8_SW_DOWEN,pu8_SW_ENTER;


		switch(x)
    2c52:	80 91 77 01 	lds	r24, 0x0177
    2c56:	28 2f       	mov	r18, r24
    2c58:	33 27       	eor	r19, r19
    2c5a:	27 fd       	sbrc	r18, 7
    2c5c:	30 95       	com	r19
    2c5e:	39 87       	std	Y+9, r19	; 0x09
    2c60:	28 87       	std	Y+8, r18	; 0x08
    2c62:	48 85       	ldd	r20, Y+8	; 0x08
    2c64:	59 85       	ldd	r21, Y+9	; 0x09
    2c66:	41 30       	cpi	r20, 0x01	; 1
    2c68:	51 05       	cpc	r21, r1
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <fun1+0x30>
    2c6c:	3f c0       	rjmp	.+126    	; 0x2cec <fun1+0xae>
    2c6e:	88 85       	ldd	r24, Y+8	; 0x08
    2c70:	99 85       	ldd	r25, Y+9	; 0x09
    2c72:	82 30       	cpi	r24, 0x02	; 2
    2c74:	91 05       	cpc	r25, r1
    2c76:	34 f4       	brge	.+12     	; 0x2c84 <fun1+0x46>
    2c78:	28 85       	ldd	r18, Y+8	; 0x08
    2c7a:	39 85       	ldd	r19, Y+9	; 0x09
    2c7c:	21 15       	cp	r18, r1
    2c7e:	31 05       	cpc	r19, r1
    2c80:	71 f0       	breq	.+28     	; 0x2c9e <fun1+0x60>
    2c82:	b0 c0       	rjmp	.+352    	; 0x2de4 <fun1+0x1a6>
    2c84:	48 85       	ldd	r20, Y+8	; 0x08
    2c86:	59 85       	ldd	r21, Y+9	; 0x09
    2c88:	42 30       	cpi	r20, 0x02	; 2
    2c8a:	51 05       	cpc	r21, r1
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <fun1+0x52>
    2c8e:	57 c0       	rjmp	.+174    	; 0x2d3e <fun1+0x100>
    2c90:	88 85       	ldd	r24, Y+8	; 0x08
    2c92:	99 85       	ldd	r25, Y+9	; 0x09
    2c94:	83 30       	cpi	r24, 0x03	; 3
    2c96:	91 05       	cpc	r25, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <fun1+0x5e>
    2c9a:	78 c0       	rjmp	.+240    	; 0x2d8c <fun1+0x14e>
    2c9c:	a3 c0       	rjmp	.+326    	; 0x2de4 <fun1+0x1a6>
	{
	  case 0:
		  res =arr[i] +arr[z];
    2c9e:	80 91 76 01 	lds	r24, 0x0176
    2ca2:	99 27       	eor	r25, r25
    2ca4:	87 fd       	sbrc	r24, 7
    2ca6:	90 95       	com	r25
    2ca8:	fc 01       	movw	r30, r24
    2caa:	e8 59       	subi	r30, 0x98	; 152
    2cac:	fe 4f       	sbci	r31, 0xFE	; 254
    2cae:	80 81       	ld	r24, Z
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	80 91 78 01 	lds	r24, 0x0178
    2cb8:	99 27       	eor	r25, r25
    2cba:	87 fd       	sbrc	r24, 7
    2cbc:	90 95       	com	r25
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	e8 59       	subi	r30, 0x98	; 152
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	80 81       	ld	r24, Z
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	82 0f       	add	r24, r18
    2ccc:	93 1f       	adc	r25, r19
    2cce:	aa 27       	eor	r26, r26
    2cd0:	97 fd       	sbrc	r25, 7
    2cd2:	a0 95       	com	r26
    2cd4:	ba 2f       	mov	r27, r26
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	ab 83       	std	Y+3, r26	; 0x03
    2ce8:	bc 83       	std	Y+4, r27	; 0x04
    2cea:	7c c0       	rjmp	.+248    	; 0x2de4 <fun1+0x1a6>

		  break;
	   case 1:
		  res =arr[i] - arr[z];
    2cec:	80 91 76 01 	lds	r24, 0x0176
    2cf0:	99 27       	eor	r25, r25
    2cf2:	87 fd       	sbrc	r24, 7
    2cf4:	90 95       	com	r25
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e8 59       	subi	r30, 0x98	; 152
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	80 81       	ld	r24, Z
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	80 91 78 01 	lds	r24, 0x0178
    2d06:	99 27       	eor	r25, r25
    2d08:	87 fd       	sbrc	r24, 7
    2d0a:	90 95       	com	r25
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	e8 59       	subi	r30, 0x98	; 152
    2d10:	fe 4f       	sbci	r31, 0xFE	; 254
    2d12:	80 81       	ld	r24, Z
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a9 01       	movw	r20, r18
    2d1a:	48 1b       	sub	r20, r24
    2d1c:	59 0b       	sbc	r21, r25
    2d1e:	ca 01       	movw	r24, r20
    2d20:	aa 27       	eor	r26, r26
    2d22:	97 fd       	sbrc	r25, 7
    2d24:	a0 95       	com	r26
    2d26:	ba 2f       	mov	r27, r26
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	ab 83       	std	Y+3, r26	; 0x03
    2d3a:	bc 83       	std	Y+4, r27	; 0x04
    2d3c:	53 c0       	rjmp	.+166    	; 0x2de4 <fun1+0x1a6>

		  break;
		  case 2:
			  res =arr[i] /arr[z];
    2d3e:	80 91 76 01 	lds	r24, 0x0176
    2d42:	99 27       	eor	r25, r25
    2d44:	87 fd       	sbrc	r24, 7
    2d46:	90 95       	com	r25
    2d48:	fc 01       	movw	r30, r24
    2d4a:	e8 59       	subi	r30, 0x98	; 152
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	20 81       	ld	r18, Z
    2d50:	80 91 78 01 	lds	r24, 0x0178
    2d54:	99 27       	eor	r25, r25
    2d56:	87 fd       	sbrc	r24, 7
    2d58:	90 95       	com	r25
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e8 59       	subi	r30, 0x98	; 152
    2d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d60:	90 81       	ld	r25, Z
    2d62:	82 2f       	mov	r24, r18
    2d64:	69 2f       	mov	r22, r25
    2d66:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__udivmodqi4>
    2d6a:	88 2f       	mov	r24, r24
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	aa 27       	eor	r26, r26
    2d70:	97 fd       	sbrc	r25, 7
    2d72:	a0 95       	com	r26
    2d74:	ba 2f       	mov	r27, r26
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	ab 83       	std	Y+3, r26	; 0x03
    2d88:	bc 83       	std	Y+4, r27	; 0x04
    2d8a:	2c c0       	rjmp	.+88     	; 0x2de4 <fun1+0x1a6>

		  break;
		  case 3:
			  res =arr[i] *arr[z];
    2d8c:	80 91 76 01 	lds	r24, 0x0176
    2d90:	99 27       	eor	r25, r25
    2d92:	87 fd       	sbrc	r24, 7
    2d94:	90 95       	com	r25
    2d96:	fc 01       	movw	r30, r24
    2d98:	e8 59       	subi	r30, 0x98	; 152
    2d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9c:	80 81       	ld	r24, Z
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	80 91 78 01 	lds	r24, 0x0178
    2da6:	99 27       	eor	r25, r25
    2da8:	87 fd       	sbrc	r24, 7
    2daa:	90 95       	com	r25
    2dac:	fc 01       	movw	r30, r24
    2dae:	e8 59       	subi	r30, 0x98	; 152
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	80 81       	ld	r24, Z
    2db4:	88 2f       	mov	r24, r24
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	ac 01       	movw	r20, r24
    2dba:	24 9f       	mul	r18, r20
    2dbc:	c0 01       	movw	r24, r0
    2dbe:	25 9f       	mul	r18, r21
    2dc0:	90 0d       	add	r25, r0
    2dc2:	34 9f       	mul	r19, r20
    2dc4:	90 0d       	add	r25, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	aa 27       	eor	r26, r26
    2dca:	97 fd       	sbrc	r25, 7
    2dcc:	a0 95       	com	r26
    2dce:	ba 2f       	mov	r27, r26
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	ab 83       	std	Y+3, r26	; 0x03
    2de2:	bc 83       	std	Y+4, r27	; 0x04

		 break;

	}
		LCD_Clear();
    2de4:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_Clear>
    2de8:	4e c0       	rjmp	.+156    	; 0x2e86 <fun1+0x248>
		while(pu8_SW_ENTER!=0 )
		{
		        LCD_voidGotoXY(1,0);
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_voidGotoXY>
				LCD_voidSendNumber(arr[i]);
    2df2:	80 91 76 01 	lds	r24, 0x0176
    2df6:	99 27       	eor	r25, r25
    2df8:	87 fd       	sbrc	r24, 7
    2dfa:	90 95       	com	r25
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e8 59       	subi	r30, 0x98	; 152
    2e00:	fe 4f       	sbci	r31, 0xFE	; 254
    2e02:	80 81       	ld	r24, Z
    2e04:	88 2f       	mov	r24, r24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
				LCD_voidSendChar(arr1[x]);
    2e0c:	80 91 77 01 	lds	r24, 0x0177
    2e10:	99 27       	eor	r25, r25
    2e12:	87 fd       	sbrc	r24, 7
    2e14:	90 95       	com	r25
    2e16:	fc 01       	movw	r30, r24
    2e18:	ee 58       	subi	r30, 0x8E	; 142
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	80 81       	ld	r24, Z
    2e1e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
				LCD_voidSendNumber(arr[z]);
    2e22:	80 91 78 01 	lds	r24, 0x0178
    2e26:	99 27       	eor	r25, r25
    2e28:	87 fd       	sbrc	r24, 7
    2e2a:	90 95       	com	r25
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e8 59       	subi	r30, 0x98	; 152
    2e30:	fe 4f       	sbci	r31, 0xFE	; 254
    2e32:	80 81       	ld	r24, Z
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
				LCD_voidSendChar('=');
    2e3c:	8d e3       	ldi	r24, 0x3D	; 61
    2e3e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <LCD_voidSendChar>
				LCD_voidSendNumber(res);
    2e42:	69 81       	ldd	r22, Y+1	; 0x01
    2e44:	7a 81       	ldd	r23, Y+2	; 0x02
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_voidSendNumber>
				DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
    2e56:	9e 01       	movw	r18, r28
    2e58:	2b 5f       	subi	r18, 0xFB	; 251
    2e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	a9 01       	movw	r20, r18
    2e62:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
    2e66:	9e 01       	movw	r18, r28
    2e68:	2a 5f       	subi	r18, 0xFA	; 250
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	61 e0       	ldi	r22, 0x01	; 1
    2e70:	a9 01       	movw	r20, r18
    2e72:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);
    2e76:	9e 01       	movw	r18, r28
    2e78:	29 5f       	subi	r18, 0xF9	; 249
    2e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	62 e0       	ldi	r22, 0x02	; 2
    2e80:	a9 01       	movw	r20, r18
    2e82:	0e 94 54 08 	call	0x10a8	; 0x10a8 <DIO_u8GetPinValue>

		 break;

	}
		LCD_Clear();
		while(pu8_SW_ENTER!=0 )
    2e86:	8f 81       	ldd	r24, Y+7	; 0x07
    2e88:	88 23       	and	r24, r24
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <fun1+0x250>
    2e8c:	ae cf       	rjmp	.-164    	; 0x2dea <fun1+0x1ac>
				DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,&pu8_SW_UP);
				DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN1,&pu8_SW_DOWEN);
				DIO_u8GetPinValue(DIO_U8_PORTB,DIO_U8_PIN2,&pu8_SW_ENTER);

		}
}
    2e8e:	29 96       	adiw	r28, 0x09	; 9
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <__udivmodqi4>:
    2ea0:	99 1b       	sub	r25, r25
    2ea2:	79 e0       	ldi	r23, 0x09	; 9
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <__udivmodqi4_ep>

00002ea6 <__udivmodqi4_loop>:
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	96 17       	cp	r25, r22
    2eaa:	08 f0       	brcs	.+2      	; 0x2eae <__udivmodqi4_ep>
    2eac:	96 1b       	sub	r25, r22

00002eae <__udivmodqi4_ep>:
    2eae:	88 1f       	adc	r24, r24
    2eb0:	7a 95       	dec	r23
    2eb2:	c9 f7       	brne	.-14     	; 0x2ea6 <__udivmodqi4_loop>
    2eb4:	80 95       	com	r24
    2eb6:	08 95       	ret

00002eb8 <__udivmodhi4>:
    2eb8:	aa 1b       	sub	r26, r26
    2eba:	bb 1b       	sub	r27, r27
    2ebc:	51 e1       	ldi	r21, 0x11	; 17
    2ebe:	07 c0       	rjmp	.+14     	; 0x2ece <__udivmodhi4_ep>

00002ec0 <__udivmodhi4_loop>:
    2ec0:	aa 1f       	adc	r26, r26
    2ec2:	bb 1f       	adc	r27, r27
    2ec4:	a6 17       	cp	r26, r22
    2ec6:	b7 07       	cpc	r27, r23
    2ec8:	10 f0       	brcs	.+4      	; 0x2ece <__udivmodhi4_ep>
    2eca:	a6 1b       	sub	r26, r22
    2ecc:	b7 0b       	sbc	r27, r23

00002ece <__udivmodhi4_ep>:
    2ece:	88 1f       	adc	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	5a 95       	dec	r21
    2ed4:	a9 f7       	brne	.-22     	; 0x2ec0 <__udivmodhi4_loop>
    2ed6:	80 95       	com	r24
    2ed8:	90 95       	com	r25
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	08 95       	ret

00002ee0 <__prologue_saves__>:
    2ee0:	2f 92       	push	r2
    2ee2:	3f 92       	push	r3
    2ee4:	4f 92       	push	r4
    2ee6:	5f 92       	push	r5
    2ee8:	6f 92       	push	r6
    2eea:	7f 92       	push	r7
    2eec:	8f 92       	push	r8
    2eee:	9f 92       	push	r9
    2ef0:	af 92       	push	r10
    2ef2:	bf 92       	push	r11
    2ef4:	cf 92       	push	r12
    2ef6:	df 92       	push	r13
    2ef8:	ef 92       	push	r14
    2efa:	ff 92       	push	r15
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	ca 1b       	sub	r28, r26
    2f0a:	db 0b       	sbc	r29, r27
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	09 94       	ijmp

00002f18 <__epilogue_restores__>:
    2f18:	2a 88       	ldd	r2, Y+18	; 0x12
    2f1a:	39 88       	ldd	r3, Y+17	; 0x11
    2f1c:	48 88       	ldd	r4, Y+16	; 0x10
    2f1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f20:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f22:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f24:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f26:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f28:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f2a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f2c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f2e:	df 80       	ldd	r13, Y+7	; 0x07
    2f30:	ee 80       	ldd	r14, Y+6	; 0x06
    2f32:	fd 80       	ldd	r15, Y+5	; 0x05
    2f34:	0c 81       	ldd	r16, Y+4	; 0x04
    2f36:	1b 81       	ldd	r17, Y+3	; 0x03
    2f38:	aa 81       	ldd	r26, Y+2	; 0x02
    2f3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f3c:	ce 0f       	add	r28, r30
    2f3e:	d1 1d       	adc	r29, r1
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	ed 01       	movw	r28, r26
    2f4c:	08 95       	ret

00002f4e <_exit>:
    2f4e:	f8 94       	cli

00002f50 <__stop_program>:
    2f50:	ff cf       	rjmp	.-2      	; 0x2f50 <__stop_program>
