
ASS_intrrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00003652  000036e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000c6  008000c6  0000374c  2**0
                  ALLOC
  3 .stab         00002f88  00000000  00000000  0000374c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9f  00000000  00000000  000066d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007673  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000077b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000956c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a457  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b204  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_1>
       8:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_2>
       c:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 13 	call	0x26c0	; 0x26c0 <main>
      8a:	0c 94 27 1b 	jmp	0x364e	; 0x364e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DiO_private.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_U8_DDRA_REG=conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8e ef       	ldi	r24, 0xFE	; 254
     b54:	80 83       	st	Z, r24
	               		 DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION );

    DIO_U8_DDRB_REG=conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	81 ef       	ldi	r24, 0xF1	; 241
     b5c:	80 83       	st	Z, r24
				         DIO_u8_PB4_DIRECTION,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION );

    DIO_U8_DDRC_REG=conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
				         DIO_u8_PC4_DIRECTION,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION );

    DIO_U8_DDRD_REG=conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	80 83       	st	Z, r24
				         DIO_u8_PD4_DIRECTION,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION );



    DIO_U8_PORTA_REG=conc(DIO_u8_PA7_INITTIAL_VALUE,DIO_u8_PA6_INITTIAL_VALUE,DIO_u8_PA5_INITTIAL_VALUE,
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
    		              DIO_u8_PA4_INITTIAL_VALUE,DIO_u8_PA3_INITTIAL_VALUE,DIO_u8_PA2_INITTIAL_VALUE,DIO_u8_PA1_INITTIAL_VALUE,DIO_u8_PA0_INITTIAL_VALUE);

    DIO_U8_PORTB_REG=conc(DIO_u8_PB7_INITTIAL_VALUE,DIO_u8_PB6_INITTIAL_VALUE,DIO_u8_PB5_INITTIAL_VALUE,
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 ef       	ldi	r24, 0xF0	; 240
     b7a:	80 83       	st	Z, r24
    		              DIO_u8_PB4_INITTIAL_VALUE,DIO_u8_PB3_INITTIAL_VALUE,DIO_u8_PB2_INITTIAL_VALUE,DIO_u8_PB1_INITTIAL_VALUE,DIO_u8_PB0_INITTIAL_VALUE);

	DIO_U8_PORTC_REG=conc(DIO_u8_PC7_INITTIAL_VALUE,DIO_u8_PC6_INITTIAL_VALUE,DIO_u8_PC5_INITTIAL_VALUE,
     b7c:	e5 e3       	ldi	r30, 0x35	; 53
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	10 82       	st	Z, r1
				          DIO_u8_PC4_INITTIAL_VALUE,DIO_u8_PC3_INITTIAL_VALUE,DIO_u8_PC2_INITTIAL_VALUE,DIO_u8_PC1_INITTIAL_VALUE,DIO_u8_PC0_INITTIAL_VALUE);

    DIO_U8_PORTD_REG=conc(DIO_u8_PD7_INITTIAL_VALUE,DIO_u8_PD6_INITTIAL_VALUE,DIO_u8_PD5_INITTIAL_VALUE,
     b82:	e2 e3       	ldi	r30, 0x32	; 50
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	88 e7       	ldi	r24, 0x78	; 120
     b88:	80 83       	st	Z, r24
    		              DIO_u8_PD4_INITTIAL_VALUE,DIO_u8_PD3_INITTIAL_VALUE,DIO_u8_PD2_INITTIAL_VALUE,DIO_u8_PD1_INITTIAL_VALUE,DIO_u8_PD0_INITTIAL_VALUE);


}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <DIO_u8SetPinDirction>:


u8 DIO_u8SetPinDirction(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinDirction )
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <DIO_u8SetPinDirction+0x6>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <DIO_u8SetPinDirction+0x8>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <DIO_u8SetPinDirction+0xa>
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	6b 83       	std	Y+3, r22	; 0x03
     ba2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinDirction<=DIO_U8_OUTPUT))
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_u8SetPinDirction+0x20>
     bae:	da c0       	rjmp	.+436    	; 0xd64 <DIO_u8SetPinDirction+0x1d4>
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <DIO_u8SetPinDirction+0x28>
     bb6:	d6 c0       	rjmp	.+428    	; 0xd64 <DIO_u8SetPinDirction+0x1d4>
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <DIO_u8SetPinDirction+0x30>
     bbe:	d2 c0       	rjmp	.+420    	; 0xd64 <DIO_u8SetPinDirction+0x1d4>
	{
		switch(copy_u8PortId)
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3e 83       	std	Y+6, r19	; 0x06
     bc8:	2d 83       	std	Y+5, r18	; 0x05
     bca:	8d 81       	ldd	r24, Y+5	; 0x05
     bcc:	9e 81       	ldd	r25, Y+6	; 0x06
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	91 05       	cpc	r25, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <DIO_u8SetPinDirction+0x46>
     bd4:	43 c0       	rjmp	.+134    	; 0xc5c <DIO_u8SetPinDirction+0xcc>
     bd6:	2d 81       	ldd	r18, Y+5	; 0x05
     bd8:	3e 81       	ldd	r19, Y+6	; 0x06
     bda:	22 30       	cpi	r18, 0x02	; 2
     bdc:	31 05       	cpc	r19, r1
     bde:	2c f4       	brge	.+10     	; 0xbea <DIO_u8SetPinDirction+0x5a>
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	9e 81       	ldd	r25, Y+6	; 0x06
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	71 f0       	breq	.+28     	; 0xc04 <DIO_u8SetPinDirction+0x74>
     be8:	be c0       	rjmp	.+380    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
     bea:	2d 81       	ldd	r18, Y+5	; 0x05
     bec:	3e 81       	ldd	r19, Y+6	; 0x06
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_u8SetPinDirction+0x66>
     bf4:	5f c0       	rjmp	.+190    	; 0xcb4 <DIO_u8SetPinDirction+0x124>
     bf6:	8d 81       	ldd	r24, Y+5	; 0x05
     bf8:	9e 81       	ldd	r25, Y+6	; 0x06
     bfa:	83 30       	cpi	r24, 0x03	; 3
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <DIO_u8SetPinDirction+0x72>
     c00:	85 c0       	rjmp	.+266    	; 0xd0c <DIO_u8SetPinDirction+0x17c>
     c02:	b1 c0       	rjmp	.+354    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
		{
			case DIO_U8_PORTA:
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a1 f4       	brne	.+40     	; 0xc32 <DIO_u8SetPinDirction+0xa2>
			       {
			            SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     c0a:	aa e3       	ldi	r26, 0x3A	; 58
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	ea e3       	ldi	r30, 0x3A	; 58
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_u8SetPinDirction+0x98>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_u8SetPinDirction+0x94>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	9a c0       	rjmp	.+308    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     c32:	aa e3       	ldi	r26, 0x3A	; 58
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ea e3       	ldi	r30, 0x3A	; 58
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_u8SetPinDirction+0xc0>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_u8SetPinDirction+0xbc>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	85 c0       	rjmp	.+266    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTB :
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <DIO_u8SetPinDirction+0xfa>
			       {
			            SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     c62:	a7 e3       	ldi	r26, 0x37	; 55
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_u8SetPinDirction+0xf0>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_u8SetPinDirction+0xec>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	6e c0       	rjmp	.+220    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     c8a:	a7 e3       	ldi	r26, 0x37	; 55
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e7 e3       	ldi	r30, 0x37	; 55
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_u8SetPinDirction+0x118>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_u8SetPinDirction+0x114>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	59 c0       	rjmp	.+178    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTC:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <DIO_u8SetPinDirction+0x152>
			        {
			            SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     cba:	a4 e3       	ldi	r26, 0x34	; 52
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_u8SetPinDirction+0x148>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_u8SetPinDirction+0x144>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	42 c0       	rjmp	.+132    	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
			        {
						CLE_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_u8SetPinDirction+0x170>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_u8SetPinDirction+0x16c>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	2d c0       	rjmp	.+90     	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
					}
			break;
			case DIO_U8_PORTD:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	a1 f4       	brne	.+40     	; 0xd3a <DIO_u8SetPinDirction+0x1aa>
			        {
			            SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     d12:	a1 e3       	ldi	r26, 0x31	; 49
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e1 e3       	ldi	r30, 0x31	; 49
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_u8SetPinDirction+0x1a0>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_u8SetPinDirction+0x19c>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	16 c0       	rjmp	.+44     	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
					{
                 		CLE_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     d3a:	a1 e3       	ldi	r26, 0x31	; 49
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_u8SetPinDirction+0x1c8>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_u8SetPinDirction+0x1c4>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <DIO_u8SetPinDirction+0x1d6>
			break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK; 
     d64:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
}
     d68:	26 96       	adiw	r28, 0x06	; 6
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_u8SetPinValue+0x6>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <DIO_u8SetPinValue+0x8>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <DIO_u8SetPinValue+0xa>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	8a 83       	std	Y+2, r24	; 0x02
     d8a:	6b 83       	std	Y+3, r22	; 0x03
     d8c:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErorrState = STD_TYPES_OK;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinValue<=DIO_U8_OUTPUT))
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	08 f0       	brcs	.+2      	; 0xd9a <DIO_u8SetPinValue+0x20>
     d98:	da c0       	rjmp	.+436    	; 0xf4e <DIO_u8SetPinValue+0x1d4>
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <DIO_u8SetPinValue+0x28>
     da0:	d6 c0       	rjmp	.+428    	; 0xf4e <DIO_u8SetPinValue+0x1d4>
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	08 f0       	brcs	.+2      	; 0xdaa <DIO_u8SetPinValue+0x30>
     da8:	d2 c0       	rjmp	.+420    	; 0xf4e <DIO_u8SetPinValue+0x1d4>
	{
	  switch(copy_u8PortId)
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3e 83       	std	Y+6, r19	; 0x06
     db2:	2d 83       	std	Y+5, r18	; 0x05
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <DIO_u8SetPinValue+0x46>
     dbe:	43 c0       	rjmp	.+134    	; 0xe46 <DIO_u8SetPinValue+0xcc>
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	3e 81       	ldd	r19, Y+6	; 0x06
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <DIO_u8SetPinValue+0x5a>
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	71 f0       	breq	.+28     	; 0xdee <DIO_u8SetPinValue+0x74>
     dd2:	be c0       	rjmp	.+380    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
     dd4:	2d 81       	ldd	r18, Y+5	; 0x05
     dd6:	3e 81       	ldd	r19, Y+6	; 0x06
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <DIO_u8SetPinValue+0x66>
     dde:	5f c0       	rjmp	.+190    	; 0xe9e <DIO_u8SetPinValue+0x124>
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <DIO_u8SetPinValue+0x72>
     dea:	85 c0       	rjmp	.+266    	; 0xef6 <DIO_u8SetPinValue+0x17c>
     dec:	b1 c0       	rjmp	.+354    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
	  {
		  case DIO_U8_PORTA:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	a1 f4       	brne	.+40     	; 0xe1c <DIO_u8SetPinValue+0xa2>
	       	   {
			       SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     df4:	ab e3       	ldi	r26, 0x3B	; 59
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	eb e3       	ldi	r30, 0x3B	; 59
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinValue+0x98>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinValue+0x94>
     e16:	84 2b       	or	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	9a c0       	rjmp	.+308    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     e1c:	ab e3       	ldi	r26, 0x3B	; 59
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinValue+0xc0>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinValue+0xbc>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	85 c0       	rjmp	.+266    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTB:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	a1 f4       	brne	.+40     	; 0xe74 <DIO_u8SetPinValue+0xfa>
	       	   {
			       SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     e4c:	a8 e3       	ldi	r26, 0x38	; 56
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e8 e3       	ldi	r30, 0x38	; 56
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_u8SetPinValue+0xf0>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_u8SetPinValue+0xec>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	6e c0       	rjmp	.+220    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     e74:	a8 e3       	ldi	r26, 0x38	; 56
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e3       	ldi	r30, 0x38	; 56
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_u8SetPinValue+0x118>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_u8SetPinValue+0x114>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	59 c0       	rjmp	.+178    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTC:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	a1 f4       	brne	.+40     	; 0xecc <DIO_u8SetPinValue+0x152>
	       	   {
			       SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
     ea4:	a5 e3       	ldi	r26, 0x35	; 53
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e5 e3       	ldi	r30, 0x35	; 53
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_u8SetPinValue+0x148>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_u8SetPinValue+0x144>
     ec6:	84 2b       	or	r24, r20
     ec8:	8c 93       	st	X, r24
     eca:	42 c0       	rjmp	.+132    	; 0xf50 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
     ecc:	a5 e3       	ldi	r26, 0x35	; 53
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e3       	ldi	r30, 0x35	; 53
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_u8SetPinValue+0x170>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_u8SetPinValue+0x16c>
     eee:	80 95       	com	r24
     ef0:	84 23       	and	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	2d c0       	rjmp	.+90     	; 0xf50 <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTD:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f4       	brne	.+40     	; 0xf24 <DIO_u8SetPinValue+0x1aa>
	       	   {
			       SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8SetPinValue+0x1a0>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8SetPinValue+0x19c>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
     f24:	a2 e3       	ldi	r26, 0x32	; 50
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e2 e3       	ldi	r30, 0x32	; 50
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_u8SetPinValue+0x1c8>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_u8SetPinValue+0x1c4>
     f46:	80 95       	com	r24
     f48:	84 23       	and	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <DIO_u8SetPinValue+0x1d6>
		  
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK; 
     f4e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     f52:	26 96       	adiw	r28, 0x06	; 6
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue )
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	27 97       	sbiw	r28, 0x07	; 7
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	6b 83       	std	Y+3, r22	; 0x03
     f7c:	5d 83       	std	Y+5, r21	; 0x05
     f7e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7))
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	08 f0       	brcs	.+2      	; 0xf8c <DIO_u8GetPinValue+0x28>
     f8a:	75 c0       	rjmp	.+234    	; 0x1076 <DIO_u8GetPinValue+0x112>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 30       	cpi	r24, 0x08	; 8
     f90:	08 f0       	brcs	.+2      	; 0xf94 <DIO_u8GetPinValue+0x30>
     f92:	71 c0       	rjmp	.+226    	; 0x1076 <DIO_u8GetPinValue+0x112>
	{
	 switch(copy_u8PortId)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3f 83       	std	Y+7, r19	; 0x07
     f9c:	2e 83       	std	Y+6, r18	; 0x06
     f9e:	4e 81       	ldd	r20, Y+6	; 0x06
     fa0:	5f 81       	ldd	r21, Y+7	; 0x07
     fa2:	41 30       	cpi	r20, 0x01	; 1
     fa4:	51 05       	cpc	r21, r1
     fa6:	59 f1       	breq	.+86     	; 0xffe <DIO_u8GetPinValue+0x9a>
     fa8:	8e 81       	ldd	r24, Y+6	; 0x06
     faa:	9f 81       	ldd	r25, Y+7	; 0x07
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	91 05       	cpc	r25, r1
     fb0:	34 f4       	brge	.+12     	; 0xfbe <DIO_u8GetPinValue+0x5a>
     fb2:	2e 81       	ldd	r18, Y+6	; 0x06
     fb4:	3f 81       	ldd	r19, Y+7	; 0x07
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	69 f0       	breq	.+26     	; 0xfd6 <DIO_u8GetPinValue+0x72>
     fbc:	5d c0       	rjmp	.+186    	; 0x1078 <DIO_u8GetPinValue+0x114>
     fbe:	4e 81       	ldd	r20, Y+6	; 0x06
     fc0:	5f 81       	ldd	r21, Y+7	; 0x07
     fc2:	42 30       	cpi	r20, 0x02	; 2
     fc4:	51 05       	cpc	r21, r1
     fc6:	79 f1       	breq	.+94     	; 0x1026 <DIO_u8GetPinValue+0xc2>
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <DIO_u8GetPinValue+0x70>
     fd2:	3d c0       	rjmp	.+122    	; 0x104e <DIO_u8GetPinValue+0xea>
     fd4:	51 c0       	rjmp	.+162    	; 0x1078 <DIO_u8GetPinValue+0x114>
	  {
		 case DIO_U8_PORTA:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
     fd6:	e9 e3       	ldi	r30, 0x39	; 57
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_u8GetPinValue+0x8a>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_u8GetPinValue+0x86>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	ec 81       	ldd	r30, Y+4	; 0x04
     ff8:	fd 81       	ldd	r31, Y+5	; 0x05
     ffa:	80 83       	st	Z, r24
     ffc:	3d c0       	rjmp	.+122    	; 0x1078 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTB:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
     ffe:	e6 e3       	ldi	r30, 0x36	; 54
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a9 01       	movw	r20, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_u8GetPinValue+0xb2>
    1012:	55 95       	asr	r21
    1014:	47 95       	ror	r20
    1016:	8a 95       	dec	r24
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_u8GetPinValue+0xae>
    101a:	ca 01       	movw	r24, r20
    101c:	81 70       	andi	r24, 0x01	; 1
    101e:	ec 81       	ldd	r30, Y+4	; 0x04
    1020:	fd 81       	ldd	r31, Y+5	; 0x05
    1022:	80 83       	st	Z, r24
    1024:	29 c0       	rjmp	.+82     	; 0x1078 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTC:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
    1026:	e3 e3       	ldi	r30, 0x33	; 51
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_u8GetPinValue+0xda>
    103a:	55 95       	asr	r21
    103c:	47 95       	ror	r20
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_u8GetPinValue+0xd6>
    1042:	ca 01       	movw	r24, r20
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	ec 81       	ldd	r30, Y+4	; 0x04
    1048:	fd 81       	ldd	r31, Y+5	; 0x05
    104a:	80 83       	st	Z, r24
    104c:	15 c0       	rjmp	.+42     	; 0x1078 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTD:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
    104e:	e0 e3       	ldi	r30, 0x30	; 48
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a9 01       	movw	r20, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_u8GetPinValue+0x102>
    1062:	55 95       	asr	r21
    1064:	47 95       	ror	r20
    1066:	8a 95       	dec	r24
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_u8GetPinValue+0xfe>
    106a:	ca 01       	movw	r24, r20
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	ec 81       	ldd	r30, Y+4	; 0x04
    1070:	fd 81       	ldd	r31, Y+5	; 0x05
    1072:	80 83       	st	Z, r24
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <DIO_u8GetPinValue+0x114>
		 break;
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1076:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
}
    107a:	27 96       	adiw	r28, 0x07	; 7
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <DIO_u8SetPortDirction>:

u8 DIO_u8SetPortDirction(u8 copy_u8PortId,u8 copy_u8PortDirction )
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	2d 97       	sbiw	r28, 0x0d	; 13
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortDirction<=DIO_U8_OUTPUT))
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <DIO_u8SetPortDirction+0x24>
    10ae:	6b c0       	rjmp	.+214    	; 0x1186 <DIO_u8SetPortDirction+0xfa>
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <DIO_u8SetPortDirction+0x2c>
    10b6:	67 c0       	rjmp	.+206    	; 0x1186 <DIO_u8SetPortDirction+0xfa>
	{
		switch(copy_u8PortId)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3d 87       	std	Y+13, r19	; 0x0d
    10c0:	2c 87       	std	Y+12, r18	; 0x0c
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 05       	cpc	r25, r1
    10ca:	39 f1       	breq	.+78     	; 0x111a <DIO_u8SetPortDirction+0x8e>
    10cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <DIO_u8SetPortDirction+0x54>
    10d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <DIO_u8SetPortDirction+0x6a>
    10de:	54 c0       	rjmp	.+168    	; 0x1188 <DIO_u8SetPortDirction+0xfc>
    10e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	51 f1       	breq	.+84     	; 0x113e <DIO_u8SetPortDirction+0xb2>
    10ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	b9 f1       	breq	.+110    	; 0x1162 <DIO_u8SetPortDirction+0xd6>
    10f4:	49 c0       	rjmp	.+146    	; 0x1188 <DIO_u8SetPortDirction+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	41 f4       	brne	.+16     	; 0x110c <DIO_u8SetPortDirction+0x80>
			     { 
			     SET_PORT(DIO_U8_DDRA_REG);	
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	90 81       	ld	r25, Z
    1102:	ea e3       	ldi	r30, 0x3A	; 58
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	80 83       	st	Z, r24
    110a:	3e c0       	rjmp	.+124    	; 0x1188 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRA_REG);
    110c:	ea e3       	ldi	r30, 0x3A	; 58
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	20 81       	ld	r18, Z
    1112:	ea e3       	ldi	r30, 0x3A	; 58
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	10 82       	st	Z, r1
    1118:	37 c0       	rjmp	.+110    	; 0x1188 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	41 f4       	brne	.+16     	; 0x1130 <DIO_u8SetPortDirction+0xa4>
			     { 
			     SET_PORT(DIO_U8_DDRB_REG);	
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	30 81       	ld	r19, Z
    1126:	e7 e3       	ldi	r30, 0x37	; 55
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	80 83       	st	Z, r24
    112e:	2c c0       	rjmp	.+88     	; 0x1188 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRB_REG);
    1130:	e7 e3       	ldi	r30, 0x37	; 55
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	e7 e3       	ldi	r30, 0x37	; 55
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	10 82       	st	Z, r1
    113c:	25 c0       	rjmp	.+74     	; 0x1188 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	41 f4       	brne	.+16     	; 0x1154 <DIO_u8SetPortDirction+0xc8>
			     { 
			     SET_PORT(DIO_U8_DDRC_REG);	
    1144:	e4 e3       	ldi	r30, 0x34	; 52
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	90 81       	ld	r25, Z
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	80 83       	st	Z, r24
    1152:	1a c0       	rjmp	.+52     	; 0x1188 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRC_REG);
    1154:	e4 e3       	ldi	r30, 0x34	; 52
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	20 81       	ld	r18, Z
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	10 82       	st	Z, r1
    1160:	13 c0       	rjmp	.+38     	; 0x1188 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	41 f4       	brne	.+16     	; 0x1178 <DIO_u8SetPortDirction+0xec>
			     { 
			     SET_PORT(DIO_U8_DDRD_REG);	
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	30 81       	ld	r19, Z
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	80 83       	st	Z, r24
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRD_REG);
    1178:	e1 e3       	ldi	r30, 0x31	; 49
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	e1 e3       	ldi	r30, 0x31	; 49
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	10 82       	st	Z, r1
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <DIO_u8SetPortDirction+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1186:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;	
    1188:	89 81       	ldd	r24, Y+1	; 0x01
}
    118a:	2d 96       	adiw	r28, 0x0d	; 13
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	2d 97       	sbiw	r28, 0x0d	; 13
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortValue<=DIO_U8_OUTPUT))
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_u8SetPortValue+0x24>
    11be:	6b c0       	rjmp	.+214    	; 0x1296 <DIO_u8SetPortValue+0xfa>
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <DIO_u8SetPortValue+0x2c>
    11c6:	67 c0       	rjmp	.+206    	; 0x1296 <DIO_u8SetPortValue+0xfa>
	{
		switch(copy_u8PortId)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3d 87       	std	Y+13, r19	; 0x0d
    11d0:	2c 87       	std	Y+12, r18	; 0x0c
    11d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	39 f1       	breq	.+78     	; 0x122a <DIO_u8SetPortValue+0x8e>
    11dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    11de:	3d 85       	ldd	r19, Y+13	; 0x0d
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <DIO_u8SetPortValue+0x54>
    11e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	61 f0       	breq	.+24     	; 0x1206 <DIO_u8SetPortValue+0x6a>
    11ee:	54 c0       	rjmp	.+168    	; 0x1298 <DIO_u8SetPortValue+0xfc>
    11f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	51 f1       	breq	.+84     	; 0x124e <DIO_u8SetPortValue+0xb2>
    11fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    11fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	b9 f1       	breq	.+110    	; 0x1272 <DIO_u8SetPortValue+0xd6>
    1204:	49 c0       	rjmp	.+146    	; 0x1298 <DIO_u8SetPortValue+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	41 f4       	brne	.+16     	; 0x121c <DIO_u8SetPortValue+0x80>
			     {
			     SET_PORT(DIO_U8_PORTA_REG);
    120c:	eb e3       	ldi	r30, 0x3B	; 59
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	90 81       	ld	r25, Z
    1212:	eb e3       	ldi	r30, 0x3B	; 59
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	80 83       	st	Z, r24
    121a:	3e c0       	rjmp	.+124    	; 0x1298 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTA_REG);
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	20 81       	ld	r18, Z
    1222:	eb e3       	ldi	r30, 0x3B	; 59
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	10 82       	st	Z, r1
    1228:	37 c0       	rjmp	.+110    	; 0x1298 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	41 f4       	brne	.+16     	; 0x1240 <DIO_u8SetPortValue+0xa4>
			     { 
			     SET_PORT(DIO_U8_PORTB_REG);
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	30 81       	ld	r19, Z
    1236:	e8 e3       	ldi	r30, 0x38	; 56
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	80 83       	st	Z, r24
    123e:	2c c0       	rjmp	.+88     	; 0x1298 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTB_REG);
    1240:	e8 e3       	ldi	r30, 0x38	; 56
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	e8 e3       	ldi	r30, 0x38	; 56
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	10 82       	st	Z, r1
    124c:	25 c0       	rjmp	.+74     	; 0x1298 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	41 f4       	brne	.+16     	; 0x1264 <DIO_u8SetPortValue+0xc8>
			     { 
			     SET_PORT(DIO_U8_PORTC_REG);
    1254:	e5 e3       	ldi	r30, 0x35	; 53
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	90 81       	ld	r25, Z
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 83       	st	Z, r24
    1262:	1a c0       	rjmp	.+52     	; 0x1298 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTC_REG);
    1264:	e5 e3       	ldi	r30, 0x35	; 53
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	20 81       	ld	r18, Z
    126a:	e5 e3       	ldi	r30, 0x35	; 53
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	41 f4       	brne	.+16     	; 0x1288 <DIO_u8SetPortValue+0xec>
			     { 
			     SET_PORT(DIO_U8_PORTD_REG);
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	30 81       	ld	r19, Z
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	80 83       	st	Z, r24
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTD_REG);
    1288:	e2 e3       	ldi	r30, 0x32	; 50
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	e2 e3       	ldi	r30, 0x32	; 50
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <DIO_u8SetPortValue+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1296:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
}
    129a:	2d 96       	adiw	r28, 0x0d	; 13
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8PortId, u8 *copy_pu8PortValue)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_u8GetPortValue+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_u8GetPortValue+0x8>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <DIO_u8GetPortValue+0xa>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	7c 83       	std	Y+4, r23	; 0x04
    12be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_U8_PORTD)
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	84 30       	cpi	r24, 0x04	; 4
    12c8:	d8 f5       	brcc	.+118    	; 0x1340 <DIO_u8GetPortValue+0x94>
	{
		switch(copy_u8PortId)
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3e 83       	std	Y+6, r19	; 0x06
    12d2:	2d 83       	std	Y+5, r18	; 0x05
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	e1 f0       	breq	.+56     	; 0x1316 <DIO_u8GetPortValue+0x6a>
    12de:	2d 81       	ldd	r18, Y+5	; 0x05
    12e0:	3e 81       	ldd	r19, Y+6	; 0x06
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <DIO_u8GetPortValue+0x46>
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <DIO_u8GetPortValue+0x5c>
    12f0:	28 c0       	rjmp	.+80     	; 0x1342 <DIO_u8GetPortValue+0x96>
    12f2:	2d 81       	ldd	r18, Y+5	; 0x05
    12f4:	3e 81       	ldd	r19, Y+6	; 0x06
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	a1 f0       	breq	.+40     	; 0x1324 <DIO_u8GetPortValue+0x78>
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	b1 f0       	breq	.+44     	; 0x1332 <DIO_u8GetPortValue+0x86>
    1306:	1d c0       	rjmp	.+58     	; 0x1342 <DIO_u8GetPortValue+0x96>
		{
			case DIO_U8_PORTA:
			   
			   *copy_pu8PortValue = GET_PORT(DIO_U8_PORTA_REG);
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	eb 81       	ldd	r30, Y+3	; 0x03
    1310:	fc 81       	ldd	r31, Y+4	; 0x04
    1312:	80 83       	st	Z, r24
    1314:	16 c0       	rjmp	.+44     	; 0x1342 <DIO_u8GetPortValue+0x96>
			    
     		break;
			case DIO_U8_PORTB:
			    
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTB_REG);
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	eb 81       	ldd	r30, Y+3	; 0x03
    131e:	fc 81       	ldd	r31, Y+4	; 0x04
    1320:	80 83       	st	Z, r24
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <DIO_u8GetPortValue+0x96>
			
     		break;
			case DIO_U8_PORTC:
			     
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTC_REG);
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	eb 81       	ldd	r30, Y+3	; 0x03
    132c:	fc 81       	ldd	r31, Y+4	; 0x04
    132e:	80 83       	st	Z, r24
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <DIO_u8GetPortValue+0x96>
			   
     		break;
			case DIO_U8_PORTD:
			 
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTD_REG);
    1332:	e2 e3       	ldi	r30, 0x32	; 50
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	eb 81       	ldd	r30, Y+3	; 0x03
    133a:	fc 81       	ldd	r31, Y+4	; 0x04
    133c:	80 83       	st	Z, r24
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <DIO_u8GetPortValue+0x96>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1340:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1344:	26 96       	adiw	r28, 0x06	; 6
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <DIO_u8AnalogPort>:
u8 DIO_u8AnalogPort(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_u8AnalogPort+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_u8AnalogPort+0x8>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	6b 83       	std	Y+3, r22	; 0x03
    u8	Local_u8ErorrState =STD_TYPES_OK;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD)  &&  (copy_u8PortValue<= 0xff))
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	98 f5       	brcc	.+102    	; 0x13d8 <DIO_u8AnalogPort+0x82>
	{
		switch(copy_u8PortId)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3d 83       	std	Y+5, r19	; 0x05
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	d1 f0       	breq	.+52     	; 0x13ba <DIO_u8AnalogPort+0x64>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <DIO_u8AnalogPort+0x44>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <DIO_u8AnalogPort+0x5a>
    1398:	20 c0       	rjmp	.+64     	; 0x13da <DIO_u8AnalogPort+0x84>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <DIO_u8AnalogPort+0x6e>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <DIO_u8AnalogPort+0x78>
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <DIO_u8AnalogPort+0x84>
		{
		case DIO_U8_PORTA:

			DIO_U8_PORTA_REG = copy_u8PortValue;
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	80 83       	st	Z, r24
    13b8:	10 c0       	rjmp	.+32     	; 0x13da <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTB:

			 DIO_U8_PORTB_REG = copy_u8PortValue;
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	80 83       	st	Z, r24
    13c2:	0b c0       	rjmp	.+22     	; 0x13da <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTC:

			DIO_U8_PORTC_REG = copy_u8PortValue;
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	80 83       	st	Z, r24
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTD:

			 DIO_U8_PORTD_REG = copy_u8PortValue;
    13ce:	e2 e3       	ldi	r30, 0x32	; 50
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	80 83       	st	Z, r24
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <DIO_u8AnalogPort+0x84>
		break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK;
    13d8:	19 82       	std	Y+1, r1	; 0x01
	}
		return Local_u8ErorrState;
    13da:	89 81       	ldd	r24, Y+1	; 0x01
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <EXTI_u8enable>:

static void (*EXTI_Aptrtofun[3])(void)={NULL,NULL,NULL};


u8 EXTI_u8enable(u8 num_u8ofintrrpt,u8 copy_u8edge)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <EXTI_u8enable+0x6>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	6a 83       	std	Y+2, r22	; 0x02

  
  if(num_u8ofintrrpt==EXTI_U8_INT0)
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	86 30       	cpi	r24, 0x06	; 6
    1400:	09 f0       	breq	.+2      	; 0x1404 <EXTI_u8enable+0x18>
    1402:	95 c0       	rjmp	.+298    	; 0x152e <EXTI_u8enable+0x142>
  {
   if(copy_u8edge==EXTI_U8_LOW_LEVWL)
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	11 f5       	brne	.+68     	; 0x144e <EXTI_u8enable+0x62>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
    140a:	a5 e5       	ldi	r26, 0x55	; 85
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e5       	ldi	r30, 0x55	; 85
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8e 7f       	andi	r24, 0xFE	; 254
    1416:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8d 7f       	andi	r24, 0xFD	; 253
    1424:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    1426:	ab e5       	ldi	r26, 0x5B	; 91
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	eb e5       	ldi	r30, 0x5B	; 91
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <EXTI_u8enable+0x58>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <EXTI_u8enable+0x54>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	47 c1       	rjmp	.+654    	; 0x16dc <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_ANY_LOGICAL_CHANGE)
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	11 f5       	brne	.+68     	; 0x1498 <EXTI_u8enable+0xac>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
    1454:	a5 e5       	ldi	r26, 0x55	; 85
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e5 e5       	ldi	r30, 0x55	; 85
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
    1462:	a5 e5       	ldi	r26, 0x55	; 85
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e5       	ldi	r30, 0x55	; 85
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8d 7f       	andi	r24, 0xFD	; 253
    146e:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    1470:	ab e5       	ldi	r26, 0x5B	; 91
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e5       	ldi	r30, 0x5B	; 91
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <EXTI_u8enable+0xa2>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <EXTI_u8enable+0x9e>
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	22 c1       	rjmp	.+580    	; 0x16dc <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_FALLING_EDGE)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	11 f5       	brne	.+68     	; 0x14e2 <EXTI_u8enable+0xf6>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
    149e:	a5 e5       	ldi	r26, 0x55	; 85
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8e 7f       	andi	r24, 0xFE	; 254
    14aa:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	82 60       	ori	r24, 0x02	; 2
    14b8:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    14ba:	ab e5       	ldi	r26, 0x5B	; 91
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e5       	ldi	r30, 0x5B	; 91
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <EXTI_u8enable+0xec>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <EXTI_u8enable+0xe8>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	fd c0       	rjmp	.+506    	; 0x16dc <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_RISING_EDGE)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	09 f0       	breq	.+2      	; 0x14ea <EXTI_u8enable+0xfe>
    14e8:	f9 c0       	rjmp	.+498    	; 0x16dc <EXTI_u8enable+0x2f0>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	81 60       	ori	r24, 0x01	; 1
    14f6:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
    14f8:	a5 e5       	ldi	r26, 0x55	; 85
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e5       	ldi	r30, 0x55	; 85
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	82 60       	ori	r24, 0x02	; 2
    1504:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    1506:	ab e5       	ldi	r26, 0x5B	; 91
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	eb e5       	ldi	r30, 0x5B	; 91
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <EXTI_u8enable+0x138>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <EXTI_u8enable+0x134>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	d7 c0       	rjmp	.+430    	; 0x16dc <EXTI_u8enable+0x2f0>
   }   
   }
   else if(num_u8ofintrrpt==EXTI_U8_INT1)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	87 30       	cpi	r24, 0x07	; 7
    1532:	09 f0       	breq	.+2      	; 0x1536 <EXTI_u8enable+0x14a>
    1534:	95 c0       	rjmp	.+298    	; 0x1660 <EXTI_u8enable+0x274>
   {
	 if(copy_u8edge==EXTI_U8_LOW_LEVWL)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	11 f5       	brne	.+68     	; 0x1580 <EXTI_u8enable+0x194>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
    153c:	a5 e5       	ldi	r26, 0x55	; 85
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e5       	ldi	r30, 0x55	; 85
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8b 7f       	andi	r24, 0xFB	; 251
    1548:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	87 7f       	andi	r24, 0xF7	; 247
    1556:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    1558:	ab e5       	ldi	r26, 0x5B	; 91
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e5       	ldi	r30, 0x5B	; 91
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <EXTI_u8enable+0x18a>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <EXTI_u8enable+0x186>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	ae c0       	rjmp	.+348    	; 0x16dc <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_ANY_LOGICAL_CHANGE)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	11 f5       	brne	.+68     	; 0x15ca <EXTI_u8enable+0x1de>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	84 60       	ori	r24, 0x04	; 4
    1592:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	87 7f       	andi	r24, 0xF7	; 247
    15a0:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    15a2:	ab e5       	ldi	r26, 0x5B	; 91
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e5       	ldi	r30, 0x5B	; 91
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <EXTI_u8enable+0x1d4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <EXTI_u8enable+0x1d0>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	89 c0       	rjmp	.+274    	; 0x16dc <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_FALLING_EDGE)
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	11 f5       	brne	.+68     	; 0x1614 <EXTI_u8enable+0x228>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
    15d0:	a5 e5       	ldi	r26, 0x55	; 85
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e5       	ldi	r30, 0x55	; 85
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8b 7f       	andi	r24, 0xFB	; 251
    15dc:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	88 60       	ori	r24, 0x08	; 8
    15ea:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    15ec:	ab e5       	ldi	r26, 0x5B	; 91
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	eb e5       	ldi	r30, 0x5B	; 91
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <EXTI_u8enable+0x21e>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <EXTI_u8enable+0x21a>
    160e:	84 2b       	or	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	64 c0       	rjmp	.+200    	; 0x16dc <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_RISING_EDGE)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	09 f0       	breq	.+2      	; 0x161c <EXTI_u8enable+0x230>
    161a:	60 c0       	rjmp	.+192    	; 0x16dc <EXTI_u8enable+0x2f0>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
    161c:	a5 e5       	ldi	r26, 0x55	; 85
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e5       	ldi	r30, 0x55	; 85
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	84 60       	ori	r24, 0x04	; 4
    1628:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
    162a:	a5 e5       	ldi	r26, 0x55	; 85
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e5       	ldi	r30, 0x55	; 85
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 60       	ori	r24, 0x08	; 8
    1636:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    1638:	ab e5       	ldi	r26, 0x5B	; 91
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	eb e5       	ldi	r30, 0x5B	; 91
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <EXTI_u8enable+0x26a>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <EXTI_u8enable+0x266>
    165a:	84 2b       	or	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	3e c0       	rjmp	.+124    	; 0x16dc <EXTI_u8enable+0x2f0>
   }      
   }
   else if(num_u8ofintrrpt==EXTI_U8_INT2)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	85 30       	cpi	r24, 0x05	; 5
    1664:	d9 f5       	brne	.+118    	; 0x16dc <EXTI_u8enable+0x2f0>
   {
	   if(copy_u8edge==EXTI_U8_FALLING_EDGE)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	d9 f4       	brne	.+54     	; 0x16a2 <EXTI_u8enable+0x2b6>
	   {
		   CLE_BIT(EXTI_U8_MCUCSR_REG,EXTI_U8_ISC2);
    166c:	a4 e5       	ldi	r26, 0x54	; 84
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e4 e5       	ldi	r30, 0x54	; 84
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8f 7b       	andi	r24, 0xBF	; 191
    1678:	8c 93       	st	X, r24
           SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    167a:	ab e5       	ldi	r26, 0x5B	; 91
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	eb e5       	ldi	r30, 0x5B	; 91
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <EXTI_u8enable+0x2ac>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <EXTI_u8enable+0x2a8>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	1d c0       	rjmp	.+58     	; 0x16dc <EXTI_u8enable+0x2f0>
	   }
	   else if(copy_u8edge==EXTI_U8_RISING_EDGE)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	d1 f4       	brne	.+52     	; 0x16dc <EXTI_u8enable+0x2f0>
	   {
		   SET_BIT(EXTI_U8_MCUCSR_REG,EXTI_U8_ISC2);
    16a8:	a4 e5       	ldi	r26, 0x54	; 84
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e4 e5       	ldi	r30, 0x54	; 84
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 64       	ori	r24, 0x40	; 64
    16b4:	8c 93       	st	X, r24
	       SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
    16b6:	ab e5       	ldi	r26, 0x5B	; 91
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e5       	ldi	r30, 0x5B	; 91
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <EXTI_u8enable+0x2e8>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <EXTI_u8enable+0x2e4>
    16d8:	84 2b       	or	r24, r20
    16da:	8c 93       	st	X, r24
	   }
   }
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <EXTI_u8disable>:


void EXTI_u8disable(u8 num_u8ofintrrpt)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01

	 CLE_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt);
    16f4:	ab e5       	ldi	r26, 0x5B	; 91
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	eb e5       	ldi	r30, 0x5B	; 91
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <EXTI_u8disable+0x2a>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <EXTI_u8disable+0x26>
    1716:	80 95       	com	r24
    1718:	84 23       	and	r24, r20
    171a:	8c 93       	st	X, r24
}
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <EXTI_u8EXTIsetcallback>:

u8 EXTI_u8EXTIsetcallback(u8 num_u8ofintrrpt,void(*copy_pfcallback)(void))
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <EXTI_u8EXTIsetcallback+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <EXTI_u8EXTIsetcallback+0x8>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	7c 83       	std	Y+4, r23	; 0x04
    1734:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errorstat =STD_TYPS_OK;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	89 83       	std	Y+1, r24	; 0x01
	if((num_u8ofintrrpt<=EXTI_U8_INT2_call) && (copy_pfcallback !=NULL))
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	88 f4       	brcc	.+34     	; 0x1762 <EXTI_u8EXTIsetcallback+0x3e>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f0       	breq	.+26     	; 0x1762 <EXTI_u8EXTIsetcallback+0x3e>
		{
	EXTI_Aptrtofun[num_u8ofintrrpt] = copy_pfcallback;
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	fc 01       	movw	r30, r24
    1754:	ea 53       	subi	r30, 0x3A	; 58
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <EXTI_u8EXTIsetcallback+0x40>
}
else
   {
	   local_u8errorstat = STD_TYPS_NOK;
    1762:	19 82       	std	Y+1, r1	; 0x01
   }
     return  local_u8errorstat;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <__vector_1>:

void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
  if(EXTI_Aptrtofun[EXTI_U8_INT0_call] !=NULL)
    179e:	80 91 c6 00 	lds	r24, 0x00C6
    17a2:	90 91 c7 00 	lds	r25, 0x00C7
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <__vector_1+0x40>
  {
  EXTI_Aptrtofun[EXTI_U8_INT0_call]();
    17aa:	e0 91 c6 00 	lds	r30, 0x00C6
    17ae:	f0 91 c7 00 	lds	r31, 0x00C7
    17b2:	09 95       	icall
  }
}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	ff 91       	pop	r31
    17ba:	ef 91       	pop	r30
    17bc:	bf 91       	pop	r27
    17be:	af 91       	pop	r26
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	7f 91       	pop	r23
    17c6:	6f 91       	pop	r22
    17c8:	5f 91       	pop	r21
    17ca:	4f 91       	pop	r20
    17cc:	3f 91       	pop	r19
    17ce:	2f 91       	pop	r18
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <__vector_2>:
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62

  if(EXTI_Aptrtofun[EXTI_U8_INT1_call] !=NULL)
    1804:	80 91 c8 00 	lds	r24, 0x00C8
    1808:	90 91 c9 00 	lds	r25, 0x00C9
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	29 f0       	breq	.+10     	; 0x181a <__vector_2+0x40>
  {
  EXTI_Aptrtofun[EXTI_U8_INT1_call]();
    1810:	e0 91 c8 00 	lds	r30, 0x00C8
    1814:	f0 91 c9 00 	lds	r31, 0x00C9
    1818:	09 95       	icall
  }
}
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	ff 91       	pop	r31
    1820:	ef 91       	pop	r30
    1822:	bf 91       	pop	r27
    1824:	af 91       	pop	r26
    1826:	9f 91       	pop	r25
    1828:	8f 91       	pop	r24
    182a:	7f 91       	pop	r23
    182c:	6f 91       	pop	r22
    182e:	5f 91       	pop	r21
    1830:	4f 91       	pop	r20
    1832:	3f 91       	pop	r19
    1834:	2f 91       	pop	r18
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	0f 90       	pop	r0
    183c:	1f 90       	pop	r1
    183e:	18 95       	reti

00001840 <__vector_3>:
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	2f 93       	push	r18
    184c:	3f 93       	push	r19
    184e:	4f 93       	push	r20
    1850:	5f 93       	push	r21
    1852:	6f 93       	push	r22
    1854:	7f 93       	push	r23
    1856:	8f 93       	push	r24
    1858:	9f 93       	push	r25
    185a:	af 93       	push	r26
    185c:	bf 93       	push	r27
    185e:	ef 93       	push	r30
    1860:	ff 93       	push	r31
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	
  if(EXTI_Aptrtofun[EXTI_U8_INT2_call] !=NULL)
    186a:	80 91 ca 00 	lds	r24, 0x00CA
    186e:	90 91 cb 00 	lds	r25, 0x00CB
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	29 f0       	breq	.+10     	; 0x1880 <__vector_3+0x40>
  {
  EXTI_Aptrtofun[EXTI_U8_INT2_call]();
    1876:	e0 91 ca 00 	lds	r30, 0x00CA
    187a:	f0 91 cb 00 	lds	r31, 0x00CB
    187e:	09 95       	icall
  }

}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <GINT_u8_enable>:

#include  "GINT_interface.h"
#include  "GINT_private.h"

void GINT_u8_enable(void)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_U8_STAT_REG,GINT_U8_PIN7);
    18ae:	af e5       	ldi	r26, 0x5F	; 95
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ef e5       	ldi	r30, 0x5F	; 95
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 68       	ori	r24, 0x80	; 128
    18ba:	8c 93       	st	X, r24
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <GINT_u8_desble>:

void GINT_u8_desble(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	CLE_BIT(GINT_U8_STAT_REG,GINT_U8_PIN7);
    18ca:	af e5       	ldi	r26, 0x5F	; 95
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ef e5       	ldi	r30, 0x5F	; 95
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 77       	andi	r24, 0x7F	; 127
    18d6:	8c 93       	st	X, r24
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <KPD_u8getswitch>:
#include "KPD_config.h" 



u8 KPD_u8getswitch(u8 * copy_pu8returnsw)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	27 97       	sbiw	r28, 0x07	; 7
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	9f 83       	std	Y+7, r25	; 0x07
    18f4:	8e 83       	std	Y+6, r24	; 0x06
static u8 local_au8rowspinarr[KPD_U8ROWS_NB]=KPD_ROWS_PINS;
static u8 local_au8colmspinarr[KPD_U8COLM_NB]=KPD_COLM_PINS;
static u8 local_au8keypadvalus[KPD_U8ROWS_NB][KPD_U8COLM_NB]=KPD_KEYS; 
  u8 local_u8pinvalue,local_u8flg=0;
    18f6:	1c 82       	std	Y+4, r1	; 0x04
  u8 local_u8returnstate = STD_TYPES_OK;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	8b 83       	std	Y+3, r24	; 0x03
  if(copy_pu8returnsw!=NULL)
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	09 f4       	brne	.+2      	; 0x1906 <KPD_u8getswitch+0x28>
    1904:	6e c0       	rjmp	.+220    	; 0x19e2 <KPD_u8getswitch+0x104>
  {
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
    1906:	ee 81       	ldd	r30, Y+6	; 0x06
    1908:	ff 81       	ldd	r31, Y+7	; 0x07
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	80 83       	st	Z, r24
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
    190e:	1a 82       	std	Y+2, r1	; 0x02
    1910:	63 c0       	rjmp	.+198    	; 0x19d8 <KPD_u8getswitch+0xfa>
	  {
		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_LOW); 
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	fc 01       	movw	r30, r24
    191a:	ee 53       	subi	r30, 0x3E	; 62
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	90 81       	ld	r25, Z
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	69 2f       	mov	r22, r25
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
	  /*loop*/
	  for(u8 local_u8colcounter=0;local_u8colcounter<4;local_u8colcounter++)
    192a:	19 82       	std	Y+1, r1	; 0x01
    192c:	3f c0       	rjmp	.+126    	; 0x19ac <KPD_u8getswitch+0xce>
	  {
		DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	fc 01       	movw	r30, r24
    1936:	e2 54       	subi	r30, 0x42	; 66
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	90 81       	ld	r25, Z
    193c:	9e 01       	movw	r18, r28
    193e:	2b 5f       	subi	r18, 0xFB	; 251
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	69 2f       	mov	r22, r25
    1946:	a9 01       	movw	r20, r18
    1948:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_u8GetPinValue>
        if(local_u8pinvalue==DIO_U8_LOW)       
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	88 23       	and	r24, r24
    1950:	51 f5       	brne	.+84     	; 0x19a6 <KPD_u8getswitch+0xc8>
		{
			* copy_pu8returnsw =local_au8keypadvalus[local_u8rowcounter][local_u8colcounter];
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	48 2f       	mov	r20, r24
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	ca 01       	movw	r24, r20
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	fc 01       	movw	r30, r24
    196e:	e2 55       	subi	r30, 0x52	; 82
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 81       	ld	r24, Z
    1974:	ee 81       	ldd	r30, Y+6	; 0x06
    1976:	ff 81       	ldd	r31, Y+7	; 0x07
    1978:	80 83       	st	Z, r24
    197a:	0f c0       	rjmp	.+30     	; 0x199a <KPD_u8getswitch+0xbc>

	   while(local_u8pinvalue==DIO_U8_LOW)
	   {
	   DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	fc 01       	movw	r30, r24
    1984:	e2 54       	subi	r30, 0x42	; 66
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	90 81       	ld	r25, Z
    198a:	9e 01       	movw	r18, r28
    198c:	2b 5f       	subi	r18, 0xFB	; 251
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	69 2f       	mov	r22, r25
    1994:	a9 01       	movw	r20, r18
    1996:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
        if(local_u8pinvalue==DIO_U8_LOW)       
		{
			* copy_pu8returnsw =local_au8keypadvalus[local_u8rowcounter][local_u8colcounter];

	   while(local_u8pinvalue==DIO_U8_LOW)
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	88 23       	and	r24, r24
    199e:	71 f3       	breq	.-36     	; 0x197c <KPD_u8getswitch+0x9e>
	   {
	   DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
	   }
	   local_u8flg=1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	8c 83       	std	Y+4, r24	; 0x04
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <KPD_u8getswitch+0xd6>
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
	  {
		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_LOW); 
	  /*loop*/
	  for(u8 local_u8colcounter=0;local_u8colcounter<4;local_u8colcounter++)
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <KPD_u8getswitch+0xd6>
    19b2:	bd cf       	rjmp	.-134    	; 0x192e <KPD_u8getswitch+0x50>
	   local_u8flg=1;
        break;	   
	}
	   
	  }
	  		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_HIGH);
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	fc 01       	movw	r30, r24
    19bc:	ee 53       	subi	r30, 0x3E	; 62
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	90 81       	ld	r25, Z
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	69 2f       	mov	r22, r25
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
             if(local_u8flg==1)
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	49 f0       	breq	.+18     	; 0x19e4 <KPD_u8getswitch+0x106>
  u8 local_u8pinvalue,local_u8flg=0;
  u8 local_u8returnstate = STD_TYPES_OK;
  if(copy_pu8returnsw!=NULL)
  {
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	8f 5f       	subi	r24, 0xFF	; 255
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	08 f4       	brcc	.+2      	; 0x19e0 <KPD_u8getswitch+0x102>
    19de:	99 cf       	rjmp	.-206    	; 0x1912 <KPD_u8getswitch+0x34>
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <KPD_u8getswitch+0x106>
	   }
	  
  }	  
  else
  {
	   local_u8returnstate = STD_TYPES_NOK;
    19e2:	1b 82       	std	Y+3, r1	; 0x03
  
  }
  return local_u8returnstate;
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
}
    19e6:	27 96       	adiw	r28, 0x07	; 7
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <LCD_voidInit>:
#include "LCD_config.h" 



void LCD_voidInit(void)
{
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	c6 54       	subi	r28, 0x46	; 70
    1a06:	d0 40       	sbci	r29, 0x00	; 0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	fe 01       	movw	r30, r28
    1a14:	ed 5b       	subi	r30, 0xBD	; 189
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	ac e0       	ldi	r26, 0x0C	; 12
    1a1e:	b2 e4       	ldi	r27, 0x42	; 66
    1a20:	80 83       	st	Z, r24
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	a2 83       	std	Z+2, r26	; 0x02
    1a26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	8e 01       	movw	r16, r28
    1a2a:	01 5c       	subi	r16, 0xC1	; 193
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ed 5b       	subi	r30, 0xBD	; 189
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	80 83       	st	Z, r24
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	a2 83       	std	Z+2, r26	; 0x02
    1a54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a56:	fe 01       	movw	r30, r28
    1a58:	ff 96       	adiw	r30, 0x3f	; 63
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <LCD_voidInit+0x84>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9e af       	std	Y+62, r25	; 0x3e
    1a78:	8d af       	std	Y+61, r24	; 0x3d
    1a7a:	46 c0       	rjmp	.+140    	; 0x1b08 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ff 96       	adiw	r30, 0x3f	; 63
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	64 f5       	brge	.+88     	; 0x1af0 <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ed 5b       	subi	r30, 0xBD	; 189
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e af       	std	Y+62, r25	; 0x3e
    1ac4:	8d af       	std	Y+61, r24	; 0x3d
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <LCD_voidInit+0xee>
    1ac8:	88 ec       	ldi	r24, 0xC8	; 200
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c af       	std	Y+60, r25	; 0x3c
    1ace:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ad2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <LCD_voidInit+0xdc>
    1ad8:	9c af       	std	Y+60, r25	; 0x3c
    1ada:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ade:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9e af       	std	Y+62, r25	; 0x3e
    1ae4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ae8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <LCD_voidInit+0xd0>
    1aee:	16 c0       	rjmp	.+44     	; 0x1b1c <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	fe 01       	movw	r30, r28
    1af2:	ff 96       	adiw	r30, 0x3f	; 63
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e af       	std	Y+62, r25	; 0x3e
    1b06:	8d af       	std	Y+61, r24	; 0x3d
    1b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b0c:	9a af       	std	Y+58, r25	; 0x3a
    1b0e:	89 af       	std	Y+57, r24	; 0x39
    1b10:	89 ad       	ldd	r24, Y+57	; 0x39
    1b12:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_voidInit+0x11c>
    1b18:	9a af       	std	Y+58, r25	; 0x3a
    1b1a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
#if LCD_U8_MOODE == LCD_U8_8_BIT_MOODE
	LCD_voidSendCmd(0x38);
	_delay_ms(1);
#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(0b0010);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	0e 94 2f 13 	call	0x265e	; 0x265e <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e8       	ldi	r26, 0x80	; 128
    1b46:	bf e3       	ldi	r27, 0x3F	; 63
    1b48:	8d ab       	std	Y+53, r24	; 0x35
    1b4a:	9e ab       	std	Y+54, r25	; 0x36
    1b4c:	af ab       	std	Y+55, r26	; 0x37
    1b4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6d a9       	ldd	r22, Y+53	; 0x35
    1b52:	7e a9       	ldd	r23, Y+54	; 0x36
    1b54:	8f a9       	ldd	r24, Y+55	; 0x37
    1b56:	98 ad       	ldd	r25, Y+56	; 0x38
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a ef       	ldi	r20, 0xFA	; 250
    1b5e:	54 e4       	ldi	r21, 0x44	; 68
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	89 ab       	std	Y+49, r24	; 0x31
    1b6a:	9a ab       	std	Y+50, r25	; 0x32
    1b6c:	ab ab       	std	Y+51, r26	; 0x33
    1b6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b70:	69 a9       	ldd	r22, Y+49	; 0x31
    1b72:	7a a9       	ldd	r23, Y+50	; 0x32
    1b74:	8b a9       	ldd	r24, Y+51	; 0x33
    1b76:	9c a9       	ldd	r25, Y+52	; 0x34
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_voidInit+0x19a>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	98 ab       	std	Y+48, r25	; 0x30
    1b8e:	8f a7       	std	Y+47, r24	; 0x2f
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_voidInit+0x218>
	else if (__tmp > 65535)
    1b92:	69 a9       	ldd	r22, Y+49	; 0x31
    1b94:	7a a9       	ldd	r23, Y+50	; 0x32
    1b96:	8b a9       	ldd	r24, Y+51	; 0x33
    1b98:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_voidInit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6d a9       	ldd	r22, Y+53	; 0x35
    1bac:	7e a9       	ldd	r23, Y+54	; 0x36
    1bae:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	98 ab       	std	Y+48, r25	; 0x30
    1bd0:	8f a7       	std	Y+47, r24	; 0x2f
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_voidInit+0x1fa>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9e a7       	std	Y+46, r25	; 0x2e
    1bda:	8d a7       	std	Y+45, r24	; 0x2d
    1bdc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bde:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_voidInit+0x1e8>
    1be4:	9e a7       	std	Y+46, r25	; 0x2e
    1be6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bea:	98 a9       	ldd	r25, Y+48	; 0x30
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	98 ab       	std	Y+48, r25	; 0x30
    1bf0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_voidInit+0x1dc>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_voidInit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1c00:	8b a9       	ldd	r24, Y+51	; 0x33
    1c02:	9c a9       	ldd	r25, Y+52	; 0x34
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	98 ab       	std	Y+48, r25	; 0x30
    1c0e:	8f a7       	std	Y+47, r24	; 0x2f
    1c10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c12:	98 a9       	ldd	r25, Y+48	; 0x30
    1c14:	9c a7       	std	Y+44, r25	; 0x2c
    1c16:	8b a7       	std	Y+43, r24	; 0x2b
    1c18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_voidInit+0x224>
    1c20:	9c a7       	std	Y+44, r25	; 0x2c
    1c22:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	LCD_voidSendCmd(0b00101000);
    1c2e:	88 e2       	ldi	r24, 0x28	; 40
    1c30:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
#endif
	LCD_voidSendCmd(LCD_CURSOR_OFF);
    1c34:	8c e0       	ldi	r24, 0x0C	; 12
    1c36:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	8f a3       	std	Y+39, r24	; 0x27
    1c44:	98 a7       	std	Y+40, r25	; 0x28
    1c46:	a9 a7       	std	Y+41, r26	; 0x29
    1c48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8b a3       	std	Y+35, r24	; 0x23
    1c64:	9c a3       	std	Y+36, r25	; 0x24
    1c66:	ad a3       	std	Y+37, r26	; 0x25
    1c68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c70:	9e a1       	ldd	r25, Y+38	; 0x26
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_voidInit+0x294>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_voidInit+0x312>
	else if (__tmp > 65535)
    1c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_voidInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    1caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_voidInit+0x2f4>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	98 a3       	std	Y+32, r25	; 0x20
    1cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_voidInit+0x2e2>
    1cde:	98 a3       	std	Y+32, r25	; 0x20
    1ce0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	89 a1       	ldd	r24, Y+33	; 0x21
    1cee:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_voidInit+0x2d6>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_voidInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9a a3       	std	Y+34, r25	; 0x22
    1d08:	89 a3       	std	Y+33, r24	; 0x21
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d10:	8d 8f       	std	Y+29, r24	; 0x1d
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_voidInit+0x31e>
    1d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCmd(LCD_CLEAR);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e0       	ldi	r26, 0x00	; 0
    1d2a:	b0 e4       	ldi	r27, 0x40	; 64
    1d2c:	89 8f       	std	Y+25, r24	; 0x19
    1d2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d30:	ab 8f       	std	Y+27, r26	; 0x1b
    1d32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	69 8d       	ldd	r22, Y+25	; 0x19
    1d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a ef       	ldi	r20, 0xFA	; 250
    1d42:	54 e4       	ldi	r21, 0x44	; 68
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	8d 8b       	std	Y+21, r24	; 0x15
    1d4e:	9e 8b       	std	Y+22, r25	; 0x16
    1d50:	af 8b       	std	Y+23, r26	; 0x17
    1d52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d54:	6d 89       	ldd	r22, Y+21	; 0x15
    1d56:	7e 89       	ldd	r23, Y+22	; 0x16
    1d58:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <LCD_voidInit+0x37e>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
    1d74:	3f c0       	rjmp	.+126    	; 0x1df4 <LCD_voidInit+0x3fc>
	else if (__tmp > 65535)
    1d76:	6d 89       	ldd	r22, Y+21	; 0x15
    1d78:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	4c f5       	brge	.+82     	; 0x1de0 <LCD_voidInit+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9c 8b       	std	Y+20, r25	; 0x14
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <LCD_voidInit+0x3de>
    1db8:	88 ec       	ldi	r24, 0xC8	; 200
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9a 8b       	std	Y+18, r25	; 0x12
    1dbe:	89 8b       	std	Y+17, r24	; 0x11
    1dc0:	89 89       	ldd	r24, Y+17	; 0x11
    1dc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_voidInit+0x3cc>
    1dc8:	9a 8b       	std	Y+18, r25	; 0x12
    1dca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	9c 8b       	std	Y+20, r25	; 0x14
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <LCD_voidInit+0x3c0>
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <LCD_voidInit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	6d 89       	ldd	r22, Y+21	; 0x15
    1de2:	7e 89       	ldd	r23, Y+22	; 0x16
    1de4:	8f 89       	ldd	r24, Y+23	; 0x17
    1de6:	98 8d       	ldd	r25, Y+24	; 0x18
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	98 8b       	std	Y+16, r25	; 0x10
    1dfa:	8f 87       	std	Y+15, r24	; 0x0f
    1dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfe:	98 89       	ldd	r25, Y+16	; 0x10
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_voidInit+0x408>
    1e04:	98 8b       	std	Y+16, r25	; 0x10
    1e06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCmd(0x06);
    1e08:	86 e0       	ldi	r24, 0x06	; 6
    1e0a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	ad 87       	std	Y+13, r26	; 0x0d
    1e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a ef       	ldi	r20, 0xFA	; 250
    1e2c:	54 e4       	ldi	r21, 0x44	; 68
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8f 83       	std	Y+7, r24	; 0x07
    1e38:	98 87       	std	Y+8, r25	; 0x08
    1e3a:	a9 87       	std	Y+9, r26	; 0x09
    1e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <LCD_voidInit+0x468>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <LCD_voidInit+0x4e6>
	else if (__tmp > 65535)
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <LCD_voidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <LCD_voidInit+0x4c8>
    1ea2:	88 ec       	ldi	r24, 0xC8	; 200
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_voidInit+0x4b6>
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <LCD_voidInit+0x4aa>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <LCD_voidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_voidInit+0x4f2>
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	

}
    1ef2:	ca 5b       	subi	r28, 0xBA	; 186
    1ef4:	df 4f       	sbci	r29, 0xFF	; 255
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8cmnd)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	6d 97       	sbiw	r28, 0x1d	; 29
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd>>4);
    1f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f36:	82 95       	swap	r24
    1f38:	8f 70       	andi	r24, 0x0F	; 15
    1f3a:	0e 94 2f 13 	call	0x265e	; 0x265e <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	62 e0       	ldi	r22, 0x02	; 2
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a0 e8       	ldi	r26, 0x80	; 128
    1f4e:	bf e3       	ldi	r27, 0x3F	; 63
    1f50:	89 8f       	std	Y+25, r24	; 0x19
    1f52:	9a 8f       	std	Y+26, r25	; 0x1a
    1f54:	ab 8f       	std	Y+27, r26	; 0x1b
    1f56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a ef       	ldi	r20, 0xFA	; 250
    1f66:	54 e4       	ldi	r21, 0x44	; 68
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	8d 8b       	std	Y+21, r24	; 0x15
    1f72:	9e 8b       	std	Y+22, r25	; 0x16
    1f74:	af 8b       	std	Y+23, r26	; 0x17
    1f76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_voidSendCmd+0x90>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <LCD_voidSendCmd+0x10e>
	else if (__tmp > 65535)
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <LCD_voidSendCmd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9c 8b       	std	Y+20, r25	; 0x14
    1fd8:	8b 8b       	std	Y+19, r24	; 0x13
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <LCD_voidSendCmd+0xf0>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9a 8b       	std	Y+18, r25	; 0x12
    1fe2:	89 8b       	std	Y+17, r24	; 0x11
    1fe4:	89 89       	ldd	r24, Y+17	; 0x11
    1fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_voidSendCmd+0xde>
    1fec:	9a 8b       	std	Y+18, r25	; 0x12
    1fee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9c 8b       	std	Y+20, r25	; 0x14
    1ff8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <LCD_voidSendCmd+0xd2>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <LCD_voidSendCmd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9c 8b       	std	Y+20, r25	; 0x14
    2016:	8b 8b       	std	Y+19, r24	; 0x13
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	9c 89       	ldd	r25, Y+20	; 0x14
    201c:	98 8b       	std	Y+16, r25	; 0x10
    201e:	8f 87       	std	Y+15, r24	; 0x0f
    2020:	8f 85       	ldd	r24, Y+15	; 0x0f
    2022:	98 89       	ldd	r25, Y+16	; 0x10
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_voidSendCmd+0x11a>
    2028:	98 8b       	std	Y+16, r25	; 0x10
    202a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd);
    2036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2038:	0e 94 2f 13 	call	0x265e	; 0x265e <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e8       	ldi	r26, 0x80	; 128
    204c:	bf e3       	ldi	r27, 0x3F	; 63
    204e:	8b 87       	std	Y+11, r24	; 0x0b
    2050:	9c 87       	std	Y+12, r25	; 0x0c
    2052:	ad 87       	std	Y+13, r26	; 0x0d
    2054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6b 85       	ldd	r22, Y+11	; 0x0b
    2058:	7c 85       	ldd	r23, Y+12	; 0x0c
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8f 83       	std	Y+7, r24	; 0x07
    2070:	98 87       	std	Y+8, r25	; 0x08
    2072:	a9 87       	std	Y+9, r26	; 0x09
    2074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <LCD_voidSendCmd+0x18e>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <LCD_voidSendCmd+0x20c>
	else if (__tmp > 65535)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <LCD_voidSendCmd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <LCD_voidSendCmd+0x1ee>
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_voidSendCmd+0x1dc>
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	9e 81       	ldd	r25, Y+6	; 0x06
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <LCD_voidSendCmd+0x1d0>
    2100:	14 c0       	rjmp	.+40     	; 0x212a <LCD_voidSendCmd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_voidSendCmd+0x218>
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	62 e0       	ldi	r22, 0x02	; 2
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>


#endif

}
    2134:	6d 96       	adiw	r28, 0x1d	; 29
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <LCD_voidSendChar>:
void LCD_voidSendChar(u8 copy_u8data)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	6d 97       	sbiw	r28, 0x1d	; 29
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_HIGH);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data>>4);
    2170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2172:	82 95       	swap	r24
    2174:	8f 70       	andi	r24, 0x0F	; 15
    2176:	0e 94 2f 13 	call	0x265e	; 0x265e <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e8       	ldi	r26, 0x80	; 128
    218a:	bf e3       	ldi	r27, 0x3F	; 63
    218c:	89 8f       	std	Y+25, r24	; 0x19
    218e:	9a 8f       	std	Y+26, r25	; 0x1a
    2190:	ab 8f       	std	Y+27, r26	; 0x1b
    2192:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	69 8d       	ldd	r22, Y+25	; 0x19
    2196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8d 8b       	std	Y+21, r24	; 0x15
    21ae:	9e 8b       	std	Y+22, r25	; 0x16
    21b0:	af 8b       	std	Y+23, r26	; 0x17
    21b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <LCD_voidSendChar+0x90>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 8b       	std	Y+20, r25	; 0x14
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <LCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <LCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	69 8d       	ldd	r22, Y+25	; 0x19
    21f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCD_voidSendChar+0xf0>
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a 8b       	std	Y+18, r25	; 0x12
    221e:	89 8b       	std	Y+17, r24	; 0x11
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_voidSendChar+0xde>
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8b 89       	ldd	r24, Y+19	; 0x13
    2238:	9c 89       	ldd	r25, Y+20	; 0x14
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <LCD_voidSendChar+0xd2>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <LCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	98 8b       	std	Y+16, r25	; 0x10
    225a:	8f 87       	std	Y+15, r24	; 0x0f
    225c:	8f 85       	ldd	r24, Y+15	; 0x0f
    225e:	98 89       	ldd	r25, Y+16	; 0x10
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_voidSendChar+0x11a>
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data);
    2272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2274:	0e 94 2f 13 	call	0x265e	; 0x265e <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	62 e0       	ldi	r22, 0x02	; 2
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e8       	ldi	r26, 0x80	; 128
    2288:	bf e3       	ldi	r27, 0x3F	; 63
    228a:	8b 87       	std	Y+11, r24	; 0x0b
    228c:	9c 87       	std	Y+12, r25	; 0x0c
    228e:	ad 87       	std	Y+13, r26	; 0x0d
    2290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8f 83       	std	Y+7, r24	; 0x07
    22ac:	98 87       	std	Y+8, r25	; 0x08
    22ae:	a9 87       	std	Y+9, r26	; 0x09
    22b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_voidSendChar+0x18e>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_voidSendChar+0x20c>
	else if (__tmp > 65535)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_voidSendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_voidSendChar+0x1ee>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 83       	std	Y+4, r25	; 0x04
    231c:	8b 83       	std	Y+3, r24	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_voidSendChar+0x1dc>
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_voidSendChar+0x1d0>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <LCD_voidSendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_voidSendChar+0x218>
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	62 e0       	ldi	r22, 0x02	; 2
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
#endif
}
    2370:	6d 96       	adiw	r28, 0x1d	; 29
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <LCD_VoidSendStr>:


void LCD_VoidSendStr(u8 * pu8_copystr)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <LCD_VoidSendStr+0x6>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9b 83       	std	Y+3, r25	; 0x03
    2390:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    2392:	19 82       	std	Y+1, r1	; 0x01
    2394:	0e c0       	rjmp	.+28     	; 0x23b2 <LCD_VoidSendStr+0x30>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	fc 01       	movw	r30, r24
    23a2:	e2 0f       	add	r30, r18
    23a4:	f3 1f       	adc	r31, r19
    23a6:	80 81       	ld	r24, Z
    23a8:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_voidSendChar>
void LCD_VoidSendStr(u8 * pu8_copystr)
{
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	fc 01       	movw	r30, r24
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	80 81       	ld	r24, Z
    23c4:	88 23       	and	r24, r24
    23c6:	39 f7       	brne	.-50     	; 0x2396 <LCD_VoidSendStr+0x14>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
		}
   }
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <LCD_voidSendNumber>:


void LCD_voidSendNumber(u32 copy_u32data)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	2f 97       	sbiw	r28, 0x0f	; 15
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	9f 87       	std	Y+15, r25	; 0x0f
    23ea:	8e 87       	std	Y+14, r24	; 0x0e
	u8	Local_reminder,Localarr_u8rem[MAX_ELEMENT];
    s32 Local_u8loop;

	   for(Local_u8loop=0;copy_u32data!=0;Local_u8loop++)
    23ec:	1a 82       	std	Y+2, r1	; 0x02
    23ee:	19 82       	std	Y+1, r1	; 0x01
    23f0:	21 c0       	rjmp	.+66     	; 0x2434 <LCD_voidSendNumber+0x60>
	{
		Local_reminder =((copy_u32data % DIV_NUM)+ZERO_DECIMAL);
    23f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f6:	2a e0       	ldi	r18, 0x0A	; 10
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	b9 01       	movw	r22, r18
    23fc:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__udivmodhi4>
    2400:	80 5d       	subi	r24, 0xD0	; 208
    2402:	8b 83       	std	Y+3, r24	; 0x03
		Localarr_u8rem[Local_u8loop]=Local_reminder;
    2404:	29 81       	ldd	r18, Y+1	; 0x01
    2406:	3a 81       	ldd	r19, Y+2	; 0x02
    2408:	ce 01       	movw	r24, r28
    240a:	04 96       	adiw	r24, 0x04	; 4
    240c:	fc 01       	movw	r30, r24
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	80 83       	st	Z, r24
		copy_u32data= copy_u32data/10;
    2416:	8e 85       	ldd	r24, Y+14	; 0x0e
    2418:	9f 85       	ldd	r25, Y+15	; 0x0f
    241a:	2a e0       	ldi	r18, 0x0A	; 10
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	b9 01       	movw	r22, r18
    2420:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__udivmodhi4>
    2424:	cb 01       	movw	r24, r22
    2426:	9f 87       	std	Y+15, r25	; 0x0f
    2428:	8e 87       	std	Y+14, r24	; 0x0e
void LCD_voidSendNumber(u32 copy_u32data)
{
	u8	Local_reminder,Localarr_u8rem[MAX_ELEMENT];
    s32 Local_u8loop;

	   for(Local_u8loop=0;copy_u32data!=0;Local_u8loop++)
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	8e 85       	ldd	r24, Y+14	; 0x0e
    2436:	9f 85       	ldd	r25, Y+15	; 0x0f
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	d9 f6       	brne	.-74     	; 0x23f2 <LCD_voidSendNumber+0x1e>
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_voidSendNumber+0x88>
		Localarr_u8rem[Local_u8loop]=Local_reminder;
		copy_u32data= copy_u32data/10;
	}
		       for(Local_u8loop-1;Local_u8loop>=0;Local_u8loop--)
         		{
		   		LCD_voidSendChar(Localarr_u8rem[Local_u8loop]);
    243e:	29 81       	ldd	r18, Y+1	; 0x01
    2440:	3a 81       	ldd	r19, Y+2	; 0x02
    2442:	ce 01       	movw	r24, r28
    2444:	04 96       	adiw	r24, 0x04	; 4
    2446:	fc 01       	movw	r30, r24
    2448:	e2 0f       	add	r30, r18
    244a:	f3 1f       	adc	r31, r19
    244c:	80 81       	ld	r24, Z
    244e:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_voidSendChar>
	{
		Local_reminder =((copy_u32data % DIV_NUM)+ZERO_DECIMAL);
		Localarr_u8rem[Local_u8loop]=Local_reminder;
		copy_u32data= copy_u32data/10;
	}
		       for(Local_u8loop-1;Local_u8loop>=0;Local_u8loop--)
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	99 23       	and	r25, r25
    2462:	6c f7       	brge	.-38     	; 0x243e <LCD_voidSendNumber+0x6a>
         		{
		   		LCD_voidSendChar(Localarr_u8rem[Local_u8loop]);
         		}

}
    2464:	2f 96       	adiw	r28, 0x0f	; 15
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <LCD_voidGotoXY>:
void LCD_voidGotoXY(u8 copy_u8line,u8 copy_u8pos)
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <LCD_voidGotoXY+0x6>
    247c:	00 d0       	rcall	.+0      	; 0x247e <LCD_voidGotoXY+0x8>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	6a 83       	std	Y+2, r22	; 0x02

	if((copy_u8line==LCD_LINE2) || (copy_u8line==LCD_LINE1) && copy_u8pos < 16 )
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	31 f0       	breq	.+12     	; 0x2498 <LCD_voidGotoXY+0x22>
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	e1 f4       	brne	.+56     	; 0x24ca <LCD_voidGotoXY+0x54>
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	80 31       	cpi	r24, 0x10	; 16
    2496:	c8 f4       	brcc	.+50     	; 0x24ca <LCD_voidGotoXY+0x54>
	{
		switch(copy_u8line)
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	3c 83       	std	Y+4, r19	; 0x04
    24a0:	2b 83       	std	Y+3, r18	; 0x03
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	81 30       	cpi	r24, 0x01	; 1
    24a8:	91 05       	cpc	r25, r1
    24aa:	31 f0       	breq	.+12     	; 0x24b8 <LCD_voidGotoXY+0x42>
    24ac:	2b 81       	ldd	r18, Y+3	; 0x03
    24ae:	3c 81       	ldd	r19, Y+4	; 0x04
    24b0:	22 30       	cpi	r18, 0x02	; 2
    24b2:	31 05       	cpc	r19, r1
    24b4:	31 f0       	breq	.+12     	; 0x24c2 <LCD_voidGotoXY+0x4c>
    24b6:	09 c0       	rjmp	.+18     	; 0x24ca <LCD_voidGotoXY+0x54>
		{
		case(LCD_LINE1):
		     LCD_voidSendCmd(LCD_CURSOR_LINE1+copy_u8pos);
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	80 58       	subi	r24, 0x80	; 128
    24bc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <LCD_voidGotoXY+0x54>
		break;

		case(LCD_LINE2):
			LCD_voidSendCmd(LCD_CURSOR_LINE2+copy_u8pos);
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	80 54       	subi	r24, 0x40	; 64
    24c6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
		break;
		}
	}
}
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <LCD_Clear>:
void LCD_Clear(void)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	2e 97       	sbiw	r28, 0x0e	; 14
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e8       	ldi	r26, 0x80	; 128
    24f8:	bf e3       	ldi	r27, 0x3F	; 63
    24fa:	8b 87       	std	Y+11, r24	; 0x0b
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
    24fe:	ad 87       	std	Y+13, r26	; 0x0d
    2500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a ef       	ldi	r20, 0xFA	; 250
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	98 87       	std	Y+8, r25	; 0x08
    251e:	a9 87       	std	Y+9, r26	; 0x09
    2520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <LCD_Clear+0x6c>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <LCD_Clear+0xcc>
    2586:	88 ec       	ldi	r24, 0xC8	; 200
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_Clear+0xba>
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <LCD_Clear+0xae>
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_Clear+0xf6>
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    25d6:	2e 96       	adiw	r28, 0x0e	; 14
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_voidsendPatern>:

void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <LCD_voidsendPatern+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_voidsendPatern+0x8>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <LCD_voidsendPatern+0xa>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9b 83       	std	Y+3, r25	; 0x03
    25f8:	8a 83       	std	Y+2, r24	; 0x02
    25fa:	6c 83       	std	Y+4, r22	; 0x04
    25fc:	4d 83       	std	Y+5, r20	; 0x05
    25fe:	2e 83       	std	Y+6, r18	; 0x06
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	08 96       	adiw	r24, 0x08	; 8
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_voidSendCmd>
	for(i=0;i<=ENTRY_ARRAY;i++)
    2618:	19 82       	std	Y+1, r1	; 0x01
    261a:	0e c0       	rjmp	.+28     	; 0x2638 <LCD_voidsendPatern+0x50>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	fc 01       	movw	r30, r24
    2628:	e2 0f       	add	r30, r18
    262a:	f3 1f       	adc	r31, r19
    262c:	80 81       	ld	r24, Z
    262e:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_voidSendChar>
void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
	for(i=0;i<=ENTRY_ARRAY;i++)
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	88 30       	cpi	r24, 0x08	; 8
    263c:	78 f3       	brcs	.-34     	; 0x261c <LCD_voidsendPatern+0x34>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
	}
	LCD_voidGotoXY(copy_u8row,copy_u8col);
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	6e 81       	ldd	r22, Y+6	; 0x06
    2642:	0e 94 3b 12 	call	0x2476	; 0x2476 <LCD_voidGotoXY>
	LCD_voidSendChar(copy_u8location);
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_voidSendChar>


}
    264c:	26 96       	adiw	r28, 0x06	; 6
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <Private_voidwriteHalfPort>:

#if LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
static void Private_voidwriteHalfPort(u8 copy_u8value)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	00 d0       	rcall	.+0      	; 0x2664 <Private_voidwriteHalfPort+0x6>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	8a 83       	std	Y+2, r24	; 0x02
	u8 get_bit;

        get_bit =GET_BIT(copy_u8value,0);
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	81 70       	andi	r24, 0x01	; 1
    266e:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D4_PORT,LCD_U8_D4_PIN,get_bit);
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	63 e0       	ldi	r22, 0x03	; 3
    2674:	49 81       	ldd	r20, Y+1	; 0x01
    2676:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,1);
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	86 95       	lsr	r24
    267e:	81 70       	andi	r24, 0x01	; 1
    2680:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D5_PORT,LCD_U8_D5_PIN,get_bit);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	64 e0       	ldi	r22, 0x04	; 4
    2686:	49 81       	ldd	r20, Y+1	; 0x01
    2688:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,2);
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	86 95       	lsr	r24
    2690:	86 95       	lsr	r24
    2692:	81 70       	andi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D6_PORT,LCD_U8_D6_PIN,get_bit);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	49 81       	ldd	r20, Y+1	; 0x01
    269c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,3);
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	86 95       	lsr	r24
    26a4:	86 95       	lsr	r24
    26a6:	86 95       	lsr	r24
    26a8:	81 70       	andi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(LCD_U8_D7_PORT,LCD_U8_D7_PIN,get_bit);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	66 e0       	ldi	r22, 0x06	; 6
    26b0:	49 81       	ldd	r20, Y+1	; 0x01
    26b2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <main>:
u8 CheckPassword(u8 *arr);
void Enter_Password(u8 *parr);
u8 flag =0;

int main()
{
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	cd 58       	subi	r28, 0x8D	; 141
    26ce:	d0 40       	sbci	r29, 0x00	; 0
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
	u8 check,i=0,passcheck,z=2;
    26da:	fe 01       	movw	r30, r28
    26dc:	ee 57       	subi	r30, 0x7E	; 126
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	10 82       	st	Z, r1
    26e2:	fe 01       	movw	r30, r28
    26e4:	e0 58       	subi	r30, 0x80	; 128
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	80 83       	st	Z, r24
    u8 Get_swkpd;
    u8 IDARR[5];
    u8 PassARR[5];
	DIO_voidInit();
    26ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
    LCD_voidInit();
    26f0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <LCD_voidInit>

 while(1)
 {


		EXTI_u8enable(EXTI_U8_INT0,EXTI_U8_RISING_EDGE);
    26f4:	86 e0       	ldi	r24, 0x06	; 6
    26f6:	64 e0       	ldi	r22, 0x04	; 4
    26f8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EXTI_u8enable>
	 	GINT_u8_enable();
    26fc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GINT_u8_enable>
		while(flag==1);
    2700:	80 91 cc 00 	lds	r24, 0x00CC
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	e1 f3       	breq	.-8      	; 0x2700 <main+0x40>
		EXTI_u8EXTIsetcallback(EXTI_U8_INT0_call,&App_void_set);
    2708:	2e ed       	ldi	r18, 0xDE	; 222
    270a:	39 e1       	ldi	r19, 0x19	; 25
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	b9 01       	movw	r22, r18
    2710:	0e 94 92 0b 	call	0x1724	; 0x1724 <EXTI_u8EXTIsetcallback>
		if(flag ==3)
    2714:	80 91 cc 00 	lds	r24, 0x00CC
    2718:	83 30       	cpi	r24, 0x03	; 3
    271a:	a1 f4       	brne	.+40     	; 0x2744 <main+0x84>
		{

	                LCD_Clear();
    271c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
	        	    DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_LOW);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	67 e0       	ldi	r22, 0x07	; 7
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
	                DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_LOW);
    272a:	83 e0       	ldi	r24, 0x03	; 3
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
	        	    DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN1,DIO_U8_LOW);
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	61 e0       	ldi	r22, 0x01	; 1
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>

			        flag =1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 93 cc 00 	sts	0x00CC, r24
		}
		if(flag==2)
    2744:	80 91 cc 00 	lds	r24, 0x00CC
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	a1 f6       	brne	.-88     	; 0x26f4 <main+0x34>
		{
		  LCD_Clear();
    274c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
		  LCD_voidGotoXY(1,4);
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	64 e0       	ldi	r22, 0x04	; 4
    2754:	0e 94 3b 12 	call	0x2476	; 0x2476 <LCD_voidGotoXY>
		  LCD_VoidSendStr("Welcome");
    2758:	80 e6       	ldi	r24, 0x60	; 96
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
    2760:	fe 01       	movw	r30, r28
    2762:	e5 58       	subi	r30, 0x85	; 133
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	aa e7       	ldi	r26, 0x7A	; 122
    276c:	b4 e4       	ldi	r27, 0x44	; 68
    276e:	80 83       	st	Z, r24
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	a2 83       	std	Z+2, r26	; 0x02
    2774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	8e 01       	movw	r16, r28
    2778:	09 58       	subi	r16, 0x89	; 137
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	e5 58       	subi	r30, 0x85	; 133
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4a ef       	ldi	r20, 0xFA	; 250
    2790:	54 e4       	ldi	r21, 0x44	; 68
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	f8 01       	movw	r30, r16
    279c:	80 83       	st	Z, r24
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	a2 83       	std	Z+2, r26	; 0x02
    27a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a4:	fe 01       	movw	r30, r28
    27a6:	e9 58       	subi	r30, 0x89	; 137
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	44 f4       	brge	.+16     	; 0x27d2 <main+0x112>
		__ticks = 1;
    27c2:	fe 01       	movw	r30, r28
    27c4:	eb 58       	subi	r30, 0x8B	; 139
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	64 c0       	rjmp	.+200    	; 0x289a <main+0x1da>
	else if (__tmp > 65535)
    27d2:	fe 01       	movw	r30, r28
    27d4:	e9 58       	subi	r30, 0x89	; 137
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	0c f0       	brlt	.+2      	; 0x27f2 <main+0x132>
    27f0:	43 c0       	rjmp	.+134    	; 0x2878 <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	fe 01       	movw	r30, r28
    27f4:	e5 58       	subi	r30, 0x85	; 133
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8e 01       	movw	r16, r28
    2812:	0b 58       	subi	r16, 0x8B	; 139
    2814:	1f 4f       	sbci	r17, 0xFF	; 255
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	f8 01       	movw	r30, r16
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
    2828:	1f c0       	rjmp	.+62     	; 0x2868 <main+0x1a8>
    282a:	fe 01       	movw	r30, r28
    282c:	ed 58       	subi	r30, 0x8D	; 141
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	88 ec       	ldi	r24, 0xC8	; 200
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	fe 01       	movw	r30, r28
    283a:	ed 58       	subi	r30, 0x8D	; 141
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <main+0x182>
    2846:	fe 01       	movw	r30, r28
    2848:	ed 58       	subi	r30, 0x8D	; 141
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	de 01       	movw	r26, r28
    2852:	ab 58       	subi	r26, 0x8B	; 139
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	eb 58       	subi	r30, 0x8B	; 139
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	9c 93       	st	X, r25
    2866:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	fe 01       	movw	r30, r28
    286a:	eb 58       	subi	r30, 0x8B	; 139
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	d1 f6       	brne	.-76     	; 0x282a <main+0x16a>
    2876:	27 c0       	rjmp	.+78     	; 0x28c6 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	8e 01       	movw	r16, r28
    287a:	0b 58       	subi	r16, 0x8B	; 139
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	e9 58       	subi	r30, 0x89	; 137
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
    289a:	de 01       	movw	r26, r28
    289c:	af 58       	subi	r26, 0x8F	; 143
    289e:	bf 4f       	sbci	r27, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	eb 58       	subi	r30, 0x8B	; 139
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	8d 93       	st	X+, r24
    28ac:	9c 93       	st	X, r25
    28ae:	fe 01       	movw	r30, r28
    28b0:	ef 58       	subi	r30, 0x8F	; 143
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <main+0x1f8>
    28bc:	fe 01       	movw	r30, r28
    28be:	ef 58       	subi	r30, 0x8F	; 143
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	80 83       	st	Z, r24
		  _delay_ms(1000);
		DIO_u8AnalogPort(DIO_U8_PORTC,0x4f);
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	6f e4       	ldi	r22, 0x4F	; 79
    28ca:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_u8AnalogPort>
		EnterID(IDARR);
    28ce:	ce 01       	movw	r24, r28
    28d0:	8c 57       	subi	r24, 0x7C	; 124
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <EnterID>
        check=checkID(IDARR);
    28d8:	ce 01       	movw	r24, r28
    28da:	8c 57       	subi	r24, 0x7C	; 124
    28dc:	9f 4f       	sbci	r25, 0xFF	; 255
    28de:	0e 94 22 1a 	call	0x3444	; 0x3444 <checkID>
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 57       	subi	r30, 0x7D	; 125
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 83       	st	Z, r24
       if(check== 1)
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 57       	subi	r30, 0x7D	; 125
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <main+0x238>
    28f6:	58 c5       	rjmp	.+2736   	; 0x33a8 <main+0xce8>
        {
    	  Enter_Password(PassARR);
    28f8:	ce 01       	movw	r24, r28
    28fa:	87 57       	subi	r24, 0x77	; 119
    28fc:	9f 4f       	sbci	r25, 0xFF	; 255
    28fe:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <Enter_Password>
    	  passcheck=CheckPassword(PassARR);
    2902:	ce 01       	movw	r24, r28
    2904:	87 57       	subi	r24, 0x77	; 119
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	0e 94 9b 1a 	call	0x3536	; 0x3536 <CheckPassword>
    290c:	fe 01       	movw	r30, r28
    290e:	ef 57       	subi	r30, 0x7F	; 127
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 83       	st	Z, r24
    	  if(passcheck==2)
    2914:	fe 01       	movw	r30, r28
    2916:	ef 57       	subi	r30, 0x7F	; 127
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	82 30       	cpi	r24, 0x02	; 2
    291e:	09 f0       	breq	.+2      	; 0x2922 <main+0x262>
    2920:	a4 c4       	rjmp	.+2376   	; 0x326a <main+0xbaa>
    	  {
    		  DIO_u8AnalogPort(DIO_U8_PORTC,0x5b);
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	6b e5       	ldi	r22, 0x5B	; 91
    2926:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_u8AnalogPort>
    		  LCD_Clear();
    292a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
    		  LCD_VoidSendStr("Wrong password");
    292e:	88 e6       	ldi	r24, 0x68	; 104
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
    		  DIO_u8AnalogPort(DIO_U8_PORTC,0x5b);
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	6b e5       	ldi	r22, 0x5B	; 91
    293a:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_u8AnalogPort>
    293e:	fe 01       	movw	r30, r28
    2940:	e3 59       	subi	r30, 0x93	; 147
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	aa ef       	ldi	r26, 0xFA	; 250
    294a:	b4 e4       	ldi	r27, 0x44	; 68
    294c:	80 83       	st	Z, r24
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	a2 83       	std	Z+2, r26	; 0x02
    2952:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	8e 01       	movw	r16, r28
    2956:	07 59       	subi	r16, 0x97	; 151
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	fe 01       	movw	r30, r28
    295c:	e3 59       	subi	r30, 0x93	; 147
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a ef       	ldi	r20, 0xFA	; 250
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	f8 01       	movw	r30, r16
    297a:	80 83       	st	Z, r24
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	a2 83       	std	Z+2, r26	; 0x02
    2980:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2982:	fe 01       	movw	r30, r28
    2984:	e7 59       	subi	r30, 0x97	; 151
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	44 f4       	brge	.+16     	; 0x29b0 <main+0x2f0>
		__ticks = 1;
    29a0:	fe 01       	movw	r30, r28
    29a2:	e9 59       	subi	r30, 0x99	; 153
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	80 83       	st	Z, r24
    29ae:	64 c0       	rjmp	.+200    	; 0x2a78 <main+0x3b8>
	else if (__tmp > 65535)
    29b0:	fe 01       	movw	r30, r28
    29b2:	e7 59       	subi	r30, 0x97	; 151
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <main+0x310>
    29ce:	43 c0       	rjmp	.+134    	; 0x2a56 <main+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d0:	fe 01       	movw	r30, r28
    29d2:	e3 59       	subi	r30, 0x93	; 147
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8e 01       	movw	r16, r28
    29f0:	09 59       	subi	r16, 0x99	; 153
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	f8 01       	movw	r30, r16
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    2a06:	1f c0       	rjmp	.+62     	; 0x2a46 <main+0x386>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	eb 59       	subi	r30, 0x9B	; 155
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	88 ec       	ldi	r24, 0xC8	; 200
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	80 83       	st	Z, r24
    2a16:	fe 01       	movw	r30, r28
    2a18:	eb 59       	subi	r30, 0x9B	; 155
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0x360>
    2a24:	fe 01       	movw	r30, r28
    2a26:	eb 59       	subi	r30, 0x9B	; 155
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	de 01       	movw	r26, r28
    2a30:	a9 59       	subi	r26, 0x99	; 153
    2a32:	bf 4f       	sbci	r27, 0xFF	; 255
    2a34:	fe 01       	movw	r30, r28
    2a36:	e9 59       	subi	r30, 0x99	; 153
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	11 96       	adiw	r26, 0x01	; 1
    2a42:	9c 93       	st	X, r25
    2a44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	fe 01       	movw	r30, r28
    2a48:	e9 59       	subi	r30, 0x99	; 153
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	d1 f6       	brne	.-76     	; 0x2a08 <main+0x348>
    2a54:	27 c0       	rjmp	.+78     	; 0x2aa4 <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	8e 01       	movw	r16, r28
    2a58:	09 59       	subi	r16, 0x99	; 153
    2a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e7 59       	subi	r30, 0x97	; 151
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	60 81       	ld	r22, Z
    2a64:	71 81       	ldd	r23, Z+1	; 0x01
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	f8 01       	movw	r30, r16
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
    2a78:	de 01       	movw	r26, r28
    2a7a:	ad 59       	subi	r26, 0x9D	; 157
    2a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e9 59       	subi	r30, 0x99	; 153
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	8d 93       	st	X+, r24
    2a8a:	9c 93       	st	X, r25
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ed 59       	subi	r30, 0x9D	; 157
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <main+0x3d6>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ed 59       	subi	r30, 0x9D	; 157
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    		  _delay_ms(2000);
        	  Enter_Password(PassARR);
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	87 57       	subi	r24, 0x77	; 119
    2aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aaa:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <Enter_Password>
        	  passcheck=CheckPassword(PassARR);
    2aae:	ce 01       	movw	r24, r28
    2ab0:	87 57       	subi	r24, 0x77	; 119
    2ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <CheckPassword>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ef 57       	subi	r30, 0x7F	; 127
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 83       	st	Z, r24
        	  if(passcheck==2)
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ef 57       	subi	r30, 0x7F	; 127
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	82 30       	cpi	r24, 0x02	; 2
    2aca:	09 f0       	breq	.+2      	; 0x2ace <main+0x40e>
    2acc:	2f c3       	rjmp	.+1630   	; 0x312c <main+0xa6c>
        	  {
        		  LCD_Clear();
    2ace:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
        		  LCD_VoidSendStr("Wrong password");
    2ad2:	88 e6       	ldi	r24, 0x68	; 104
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
        		  DIO_u8AnalogPort(DIO_U8_PORTC,0x06);
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	66 e0       	ldi	r22, 0x06	; 6
    2ade:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_u8AnalogPort>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e1 5a       	subi	r30, 0xA1	; 161
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	aa ef       	ldi	r26, 0xFA	; 250
    2aee:	b4 e4       	ldi	r27, 0x44	; 68
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	a2 83       	std	Z+2, r26	; 0x02
    2af6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	8e 01       	movw	r16, r28
    2afa:	05 5a       	subi	r16, 0xA5	; 165
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	e1 5a       	subi	r30, 0xA1	; 161
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	4a ef       	ldi	r20, 0xFA	; 250
    2b12:	54 e4       	ldi	r21, 0x44	; 68
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	80 83       	st	Z, r24
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	a2 83       	std	Z+2, r26	; 0x02
    2b24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b26:	fe 01       	movw	r30, r28
    2b28:	e5 5a       	subi	r30, 0xA5	; 165
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	44 f4       	brge	.+16     	; 0x2b54 <main+0x494>
		__ticks = 1;
    2b44:	fe 01       	movw	r30, r28
    2b46:	e7 5a       	subi	r30, 0xA7	; 167
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	64 c0       	rjmp	.+200    	; 0x2c1c <main+0x55c>
	else if (__tmp > 65535)
    2b54:	fe 01       	movw	r30, r28
    2b56:	e5 5a       	subi	r30, 0xA5	; 165
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	0c f0       	brlt	.+2      	; 0x2b74 <main+0x4b4>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <main+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b74:	fe 01       	movw	r30, r28
    2b76:	e1 5a       	subi	r30, 0xA1	; 161
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8e 01       	movw	r16, r28
    2b94:	07 5a       	subi	r16, 0xA7	; 167
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    2baa:	1f c0       	rjmp	.+62     	; 0x2bea <main+0x52a>
    2bac:	fe 01       	movw	r30, r28
    2bae:	e9 5a       	subi	r30, 0xA9	; 169
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	88 ec       	ldi	r24, 0xC8	; 200
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e9 5a       	subi	r30, 0xA9	; 169
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <main+0x504>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e9 5a       	subi	r30, 0xA9	; 169
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	de 01       	movw	r26, r28
    2bd4:	a7 5a       	subi	r26, 0xA7	; 167
    2bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e7 5a       	subi	r30, 0xA7	; 167
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	11 96       	adiw	r26, 0x01	; 1
    2be6:	9c 93       	st	X, r25
    2be8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 5a       	subi	r30, 0xA7	; 167
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	d1 f6       	brne	.-76     	; 0x2bac <main+0x4ec>
    2bf8:	27 c0       	rjmp	.+78     	; 0x2c48 <main+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	8e 01       	movw	r16, r28
    2bfc:	07 5a       	subi	r16, 0xA7	; 167
    2bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2c00:	fe 01       	movw	r30, r28
    2c02:	e5 5a       	subi	r30, 0xA5	; 165
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	de 01       	movw	r26, r28
    2c1e:	ab 5a       	subi	r26, 0xAB	; 171
    2c20:	bf 4f       	sbci	r27, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e7 5a       	subi	r30, 0xA7	; 167
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	91 81       	ldd	r25, Z+1	; 0x01
    2c2c:	8d 93       	st	X+, r24
    2c2e:	9c 93       	st	X, r25
    2c30:	fe 01       	movw	r30, r28
    2c32:	eb 5a       	subi	r30, 0xAB	; 171
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <main+0x57a>
    2c3e:	fe 01       	movw	r30, r28
    2c40:	eb 5a       	subi	r30, 0xAB	; 171
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
        		  _delay_ms(2000);
            	  Enter_Password(PassARR);
    2c48:	ce 01       	movw	r24, r28
    2c4a:	87 57       	subi	r24, 0x77	; 119
    2c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <Enter_Password>
            	  passcheck=CheckPassword(PassARR);
    2c52:	ce 01       	movw	r24, r28
    2c54:	87 57       	subi	r24, 0x77	; 119
    2c56:	9f 4f       	sbci	r25, 0xFF	; 255
    2c58:	0e 94 9b 1a 	call	0x3536	; 0x3536 <CheckPassword>
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ef 57       	subi	r30, 0x7F	; 127
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 83       	st	Z, r24

    	          if(passcheck==2)
    2c64:	fe 01       	movw	r30, r28
    2c66:	ef 57       	subi	r30, 0x7F	; 127
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	82 30       	cpi	r24, 0x02	; 2
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <main+0x5b2>
    2c70:	4c c1       	rjmp	.+664    	; 0x2f0a <main+0x84a>
    	          {
    	      		  LCD_Clear();
    2c72:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
    	        	  LCD_VoidSendStr("Wrong password");
    2c76:	88 e6       	ldi	r24, 0x68	; 104
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ef 5a       	subi	r30, 0xAF	; 175
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	aa ef       	ldi	r26, 0xFA	; 250
    2c8a:	b4 e4       	ldi	r27, 0x44	; 68
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	8e 01       	movw	r16, r28
    2c96:	03 5b       	subi	r16, 0xB3	; 179
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ef 5a       	subi	r30, 0xAF	; 175
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 83       	st	Z, r24
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	a2 83       	std	Z+2, r26	; 0x02
    2cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 5b       	subi	r30, 0xB3	; 179
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	44 f4       	brge	.+16     	; 0x2cf0 <main+0x630>
		__ticks = 1;
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e5 5b       	subi	r30, 0xB5	; 181
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	64 c0       	rjmp	.+200    	; 0x2db8 <main+0x6f8>
	else if (__tmp > 65535)
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e3 5b       	subi	r30, 0xB3	; 179
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <main+0x650>
    2d0e:	43 c0       	rjmp	.+134    	; 0x2d96 <main+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	fe 01       	movw	r30, r28
    2d12:	ef 5a       	subi	r30, 0xAF	; 175
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8e 01       	movw	r16, r28
    2d30:	05 5b       	subi	r16, 0xB5	; 181
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	f8 01       	movw	r30, r16
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	1f c0       	rjmp	.+62     	; 0x2d86 <main+0x6c6>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e7 5b       	subi	r30, 0xB7	; 183
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	fe 01       	movw	r30, r28
    2d58:	e7 5b       	subi	r30, 0xB7	; 183
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <main+0x6a0>
    2d64:	fe 01       	movw	r30, r28
    2d66:	e7 5b       	subi	r30, 0xB7	; 183
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	de 01       	movw	r26, r28
    2d70:	a5 5b       	subi	r26, 0xB5	; 181
    2d72:	bf 4f       	sbci	r27, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	e5 5b       	subi	r30, 0xB5	; 181
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	11 96       	adiw	r26, 0x01	; 1
    2d82:	9c 93       	st	X, r25
    2d84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	fe 01       	movw	r30, r28
    2d88:	e5 5b       	subi	r30, 0xB5	; 181
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	91 81       	ldd	r25, Z+1	; 0x01
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	d1 f6       	brne	.-76     	; 0x2d48 <main+0x688>
    2d94:	27 c0       	rjmp	.+78     	; 0x2de4 <main+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	8e 01       	movw	r16, r28
    2d98:	05 5b       	subi	r16, 0xB5	; 181
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 5b       	subi	r30, 0xB3	; 179
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	f8 01       	movw	r30, r16
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	de 01       	movw	r26, r28
    2dba:	a9 5b       	subi	r26, 0xB9	; 185
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e5 5b       	subi	r30, 0xB5	; 181
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	8d 93       	st	X+, r24
    2dca:	9c 93       	st	X, r25
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e9 5b       	subi	r30, 0xB9	; 185
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <main+0x716>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e9 5b       	subi	r30, 0xB9	; 185
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    	        	  _delay_ms(2000);
    	        	  LCD_Clear();
    2de4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
    	        	  LCD_VoidSendStr("Refused");
    2de8:	87 e7       	ldi	r24, 0x77	; 119
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
    2df0:	fe 01       	movw	r30, r28
    2df2:	ed 5b       	subi	r30, 0xBD	; 189
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	aa ef       	ldi	r26, 0xFA	; 250
    2dfc:	b4 e4       	ldi	r27, 0x44	; 68
    2dfe:	80 83       	st	Z, r24
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	a2 83       	std	Z+2, r26	; 0x02
    2e04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	8e 01       	movw	r16, r28
    2e08:	01 5c       	subi	r16, 0xC1	; 193
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ed 5b       	subi	r30, 0xBD	; 189
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a ef       	ldi	r20, 0xFA	; 250
    2e20:	54 e4       	ldi	r21, 0x44	; 68
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	80 83       	st	Z, r24
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	a2 83       	std	Z+2, r26	; 0x02
    2e32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e34:	fe 01       	movw	r30, r28
    2e36:	ff 96       	adiw	r30, 0x3f	; 63
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <main+0x79a>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9e af       	std	Y+62, r25	; 0x3e
    2e56:	8d af       	std	Y+61, r24	; 0x3d
    2e58:	46 c0       	rjmp	.+140    	; 0x2ee6 <main+0x826>
	else if (__tmp > 65535)
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ff 96       	adiw	r30, 0x3f	; 63
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	64 f5       	brge	.+88     	; 0x2ece <main+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	fe 01       	movw	r30, r28
    2e78:	ed 5b       	subi	r30, 0xBD	; 189
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	60 81       	ld	r22, Z
    2e7e:	71 81       	ldd	r23, Z+1	; 0x01
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	93 81       	ldd	r25, Z+3	; 0x03
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e2       	ldi	r20, 0x20	; 32
    2e8a:	51 e4       	ldi	r21, 0x41	; 65
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	bc 01       	movw	r22, r24
    2e96:	cd 01       	movw	r24, r26
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	9e af       	std	Y+62, r25	; 0x3e
    2ea2:	8d af       	std	Y+61, r24	; 0x3d
    2ea4:	0f c0       	rjmp	.+30     	; 0x2ec4 <main+0x804>
    2ea6:	88 ec       	ldi	r24, 0xC8	; 200
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	9c af       	std	Y+60, r25	; 0x3c
    2eac:	8b af       	std	Y+59, r24	; 0x3b
    2eae:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <main+0x7f2>
    2eb6:	9c af       	std	Y+60, r25	; 0x3c
    2eb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	9e af       	std	Y+62, r25	; 0x3e
    2ec2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	69 f7       	brne	.-38     	; 0x2ea6 <main+0x7e6>
    2ecc:	16 c0       	rjmp	.+44     	; 0x2efa <main+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ff 96       	adiw	r30, 0x3f	; 63
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9e af       	std	Y+62, r25	; 0x3e
    2ee4:	8d af       	std	Y+61, r24	; 0x3d
    2ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ee8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eea:	9a af       	std	Y+58, r25	; 0x3a
    2eec:	89 af       	std	Y+57, r24	; 0x39
    2eee:	89 ad       	ldd	r24, Y+57	; 0x39
    2ef0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <main+0x832>
    2ef6:	9a af       	std	Y+58, r25	; 0x3a
    2ef8:	89 af       	std	Y+57, r24	; 0x39
    	        	  _delay_ms(2000);
    	        	  DIO_u8AnalogPort(DIO_U8_PORTC,0x00);
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_u8AnalogPort>
    	              flag = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	80 93 cc 00 	sts	0x00CC, r24
    2f08:	f5 cb       	rjmp	.-2070   	; 0x26f4 <main+0x34>
    	          }
    	          else if(passcheck==1)
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	ef 57       	subi	r30, 0x7F	; 127
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	80 81       	ld	r24, Z
    2f12:	81 30       	cpi	r24, 0x01	; 1
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <main+0x858>
    2f16:	ee cb       	rjmp	.-2084   	; 0x26f4 <main+0x34>
    	          {
    	        	  LCD_Clear();
    2f18:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
    	        	  LCD_VoidSendStr("Right password");
    2f1c:	8f e7       	ldi	r24, 0x7F	; 127
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
    	        	  DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_HIGH);
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	67 e0       	ldi	r22, 0x07	; 7
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    2f2e:	f8 c0       	rjmp	.+496    	; 0x3120 <main+0xa60>
    	        	  while(flag==2)
    	        	  {


    	                DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_HIGH);
    2f30:	83 e0       	ldi	r24, 0x03	; 3
    2f32:	60 e0       	ldi	r22, 0x00	; 0
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    	        	    DIO_u8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,DIO_U8_LOW);
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	aa ef       	ldi	r26, 0xFA	; 250
    2f4a:	b4 e4       	ldi	r27, 0x44	; 68
    2f4c:	8d ab       	std	Y+53, r24	; 0x35
    2f4e:	9e ab       	std	Y+54, r25	; 0x36
    2f50:	af ab       	std	Y+55, r26	; 0x37
    2f52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	6d a9       	ldd	r22, Y+53	; 0x35
    2f56:	7e a9       	ldd	r23, Y+54	; 0x36
    2f58:	8f a9       	ldd	r24, Y+55	; 0x37
    2f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a ef       	ldi	r20, 0xFA	; 250
    2f62:	54 e4       	ldi	r21, 0x44	; 68
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	89 ab       	std	Y+49, r24	; 0x31
    2f6e:	9a ab       	std	Y+50, r25	; 0x32
    2f70:	ab ab       	std	Y+51, r26	; 0x33
    2f72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f74:	69 a9       	ldd	r22, Y+49	; 0x31
    2f76:	7a a9       	ldd	r23, Y+50	; 0x32
    2f78:	8b a9       	ldd	r24, Y+51	; 0x33
    2f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <main+0x8d6>
		__ticks = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	98 ab       	std	Y+48, r25	; 0x30
    2f92:	8f a7       	std	Y+47, r24	; 0x2f
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <main+0x954>
	else if (__tmp > 65535)
    2f96:	69 a9       	ldd	r22, Y+49	; 0x31
    2f98:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	4c f5       	brge	.+82     	; 0x3000 <main+0x940>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	6d a9       	ldd	r22, Y+53	; 0x35
    2fb0:	7e a9       	ldd	r23, Y+54	; 0x36
    2fb2:	8f a9       	ldd	r24, Y+55	; 0x37
    2fb4:	98 ad       	ldd	r25, Y+56	; 0x38
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	98 ab       	std	Y+48, r25	; 0x30
    2fd4:	8f a7       	std	Y+47, r24	; 0x2f
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <main+0x936>
    2fd8:	88 ec       	ldi	r24, 0xC8	; 200
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	9e a7       	std	Y+46, r25	; 0x2e
    2fde:	8d a7       	std	Y+45, r24	; 0x2d
    2fe0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fe2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <main+0x924>
    2fe8:	9e a7       	std	Y+46, r25	; 0x2e
    2fea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fee:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	98 ab       	std	Y+48, r25	; 0x30
    2ff4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff8:	98 a9       	ldd	r25, Y+48	; 0x30
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	69 f7       	brne	.-38     	; 0x2fd8 <main+0x918>
    2ffe:	14 c0       	rjmp	.+40     	; 0x3028 <main+0x968>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3000:	69 a9       	ldd	r22, Y+49	; 0x31
    3002:	7a a9       	ldd	r23, Y+50	; 0x32
    3004:	8b a9       	ldd	r24, Y+51	; 0x33
    3006:	9c a9       	ldd	r25, Y+52	; 0x34
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	98 ab       	std	Y+48, r25	; 0x30
    3012:	8f a7       	std	Y+47, r24	; 0x2f
    3014:	8f a5       	ldd	r24, Y+47	; 0x2f
    3016:	98 a9       	ldd	r25, Y+48	; 0x30
    3018:	9c a7       	std	Y+44, r25	; 0x2c
    301a:	8b a7       	std	Y+43, r24	; 0x2b
    301c:	8b a5       	ldd	r24, Y+43	; 0x2b
    301e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <main+0x960>
    3024:	9c a7       	std	Y+44, r25	; 0x2c
    3026:	8b a7       	std	Y+43, r24	; 0x2b

    	        	    _delay_ms(2000);

    	  	        	DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_LOW);
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	60 e0       	ldi	r22, 0x00	; 0
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    	    	        DIO_u8SetPinValue(DIO_U8_PORTB,DIO_U8_PIN0,DIO_U8_HIGH);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	aa ef       	ldi	r26, 0xFA	; 250
    3042:	b4 e4       	ldi	r27, 0x44	; 68
    3044:	8f a3       	std	Y+39, r24	; 0x27
    3046:	98 a7       	std	Y+40, r25	; 0x28
    3048:	a9 a7       	std	Y+41, r26	; 0x29
    304a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304c:	6f a1       	ldd	r22, Y+39	; 0x27
    304e:	78 a5       	ldd	r23, Y+40	; 0x28
    3050:	89 a5       	ldd	r24, Y+41	; 0x29
    3052:	9a a5       	ldd	r25, Y+42	; 0x2a
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a ef       	ldi	r20, 0xFA	; 250
    305a:	54 e4       	ldi	r21, 0x44	; 68
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	8b a3       	std	Y+35, r24	; 0x23
    3066:	9c a3       	std	Y+36, r25	; 0x24
    3068:	ad a3       	std	Y+37, r26	; 0x25
    306a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    306c:	6b a1       	ldd	r22, Y+35	; 0x23
    306e:	7c a1       	ldd	r23, Y+36	; 0x24
    3070:	8d a1       	ldd	r24, Y+37	; 0x25
    3072:	9e a1       	ldd	r25, Y+38	; 0x26
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e8       	ldi	r20, 0x80	; 128
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3080:	88 23       	and	r24, r24
    3082:	2c f4       	brge	.+10     	; 0x308e <main+0x9ce>
		__ticks = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9a a3       	std	Y+34, r25	; 0x22
    308a:	89 a3       	std	Y+33, r24	; 0x21
    308c:	3f c0       	rjmp	.+126    	; 0x310c <main+0xa4c>
	else if (__tmp > 65535)
    308e:	6b a1       	ldd	r22, Y+35	; 0x23
    3090:	7c a1       	ldd	r23, Y+36	; 0x24
    3092:	8d a1       	ldd	r24, Y+37	; 0x25
    3094:	9e a1       	ldd	r25, Y+38	; 0x26
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	3f ef       	ldi	r19, 0xFF	; 255
    309a:	4f e7       	ldi	r20, 0x7F	; 127
    309c:	57 e4       	ldi	r21, 0x47	; 71
    309e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a2:	18 16       	cp	r1, r24
    30a4:	4c f5       	brge	.+82     	; 0x30f8 <main+0xa38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a6:	6f a1       	ldd	r22, Y+39	; 0x27
    30a8:	78 a5       	ldd	r23, Y+40	; 0x28
    30aa:	89 a5       	ldd	r24, Y+41	; 0x29
    30ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e2       	ldi	r20, 0x20	; 32
    30b4:	51 e4       	ldi	r21, 0x41	; 65
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	9a a3       	std	Y+34, r25	; 0x22
    30cc:	89 a3       	std	Y+33, r24	; 0x21
    30ce:	0f c0       	rjmp	.+30     	; 0x30ee <main+0xa2e>
    30d0:	88 ec       	ldi	r24, 0xC8	; 200
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	98 a3       	std	Y+32, r25	; 0x20
    30d6:	8f 8f       	std	Y+31, r24	; 0x1f
    30d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30da:	98 a1       	ldd	r25, Y+32	; 0x20
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <main+0xa1c>
    30e0:	98 a3       	std	Y+32, r25	; 0x20
    30e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e4:	89 a1       	ldd	r24, Y+33	; 0x21
    30e6:	9a a1       	ldd	r25, Y+34	; 0x22
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	9a a3       	std	Y+34, r25	; 0x22
    30ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ee:	89 a1       	ldd	r24, Y+33	; 0x21
    30f0:	9a a1       	ldd	r25, Y+34	; 0x22
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <main+0xa10>
    30f6:	14 c0       	rjmp	.+40     	; 0x3120 <main+0xa60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f8:	6b a1       	ldd	r22, Y+35	; 0x23
    30fa:	7c a1       	ldd	r23, Y+36	; 0x24
    30fc:	8d a1       	ldd	r24, Y+37	; 0x25
    30fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	9a a3       	std	Y+34, r25	; 0x22
    310a:	89 a3       	std	Y+33, r24	; 0x21
    310c:	89 a1       	ldd	r24, Y+33	; 0x21
    310e:	9a a1       	ldd	r25, Y+34	; 0x22
    3110:	9e 8f       	std	Y+30, r25	; 0x1e
    3112:	8d 8f       	std	Y+29, r24	; 0x1d
    3114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3116:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <main+0xa58>
    311c:	9e 8f       	std	Y+30, r25	; 0x1e
    311e:	8d 8f       	std	Y+29, r24	; 0x1d
    	          else if(passcheck==1)
    	          {
    	        	  LCD_Clear();
    	        	  LCD_VoidSendStr("Right password");
    	        	  DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_HIGH);
    	        	  while(flag==2)
    3120:	80 91 cc 00 	lds	r24, 0x00CC
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	09 f4       	brne	.+2      	; 0x312a <main+0xa6a>
    3128:	03 cf       	rjmp	.-506    	; 0x2f30 <main+0x870>
    312a:	e4 ca       	rjmp	.-2616   	; 0x26f4 <main+0x34>
                         }


    	          }
        	  }
        	  else if(passcheck==1)
    312c:	fe 01       	movw	r30, r28
    312e:	ef 57       	subi	r30, 0x7F	; 127
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	80 81       	ld	r24, Z
    3134:	81 30       	cpi	r24, 0x01	; 1
    3136:	09 f0       	breq	.+2      	; 0x313a <main+0xa7a>
    3138:	dd ca       	rjmp	.-2630   	; 0x26f4 <main+0x34>
        	     	  {
	        	  LCD_Clear();
    313a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
	        	  LCD_VoidSendStr("Right password");
    313e:	8f e7       	ldi	r24, 0x7F	; 127
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
	        	  DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_HIGH);
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	67 e0       	ldi	r22, 0x07	; 7
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    3150:	86 c0       	rjmp	.+268    	; 0x325e <main+0xb9e>
	        	  while(flag==2)
	        	  {

	                DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_HIGH);
    3152:	83 e0       	ldi	r24, 0x03	; 3
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	41 e0       	ldi	r20, 0x01	; 1
    3158:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
	        	    DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN1,DIO_U8_LOW);
    315c:	83 e0       	ldi	r24, 0x03	; 3
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	40 e0       	ldi	r20, 0x00	; 0
    3162:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e8       	ldi	r25, 0x80	; 128
    316a:	ab e3       	ldi	r26, 0x3B	; 59
    316c:	b5 e4       	ldi	r27, 0x45	; 69
    316e:	89 8f       	std	Y+25, r24	; 0x19
    3170:	9a 8f       	std	Y+26, r25	; 0x1a
    3172:	ab 8f       	std	Y+27, r26	; 0x1b
    3174:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3176:	69 8d       	ldd	r22, Y+25	; 0x19
    3178:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4a ef       	ldi	r20, 0xFA	; 250
    3184:	54 e4       	ldi	r21, 0x44	; 68
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	8d 8b       	std	Y+21, r24	; 0x15
    3190:	9e 8b       	std	Y+22, r25	; 0x16
    3192:	af 8b       	std	Y+23, r26	; 0x17
    3194:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3196:	6d 89       	ldd	r22, Y+21	; 0x15
    3198:	7e 89       	ldd	r23, Y+22	; 0x16
    319a:	8f 89       	ldd	r24, Y+23	; 0x17
    319c:	98 8d       	ldd	r25, Y+24	; 0x18
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e8       	ldi	r20, 0x80	; 128
    31a4:	5f e3       	ldi	r21, 0x3F	; 63
    31a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31aa:	88 23       	and	r24, r24
    31ac:	2c f4       	brge	.+10     	; 0x31b8 <main+0xaf8>
		__ticks = 1;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
    31b6:	3f c0       	rjmp	.+126    	; 0x3236 <main+0xb76>
	else if (__tmp > 65535)
    31b8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ba:	7e 89       	ldd	r23, Y+22	; 0x16
    31bc:	8f 89       	ldd	r24, Y+23	; 0x17
    31be:	98 8d       	ldd	r25, Y+24	; 0x18
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	3f ef       	ldi	r19, 0xFF	; 255
    31c4:	4f e7       	ldi	r20, 0x7F	; 127
    31c6:	57 e4       	ldi	r21, 0x47	; 71
    31c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31cc:	18 16       	cp	r1, r24
    31ce:	4c f5       	brge	.+82     	; 0x3222 <main+0xb62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d0:	69 8d       	ldd	r22, Y+25	; 0x19
    31d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9c 8b       	std	Y+20, r25	; 0x14
    31f6:	8b 8b       	std	Y+19, r24	; 0x13
    31f8:	0f c0       	rjmp	.+30     	; 0x3218 <main+0xb58>
    31fa:	88 ec       	ldi	r24, 0xC8	; 200
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	9a 8b       	std	Y+18, r25	; 0x12
    3200:	89 8b       	std	Y+17, r24	; 0x11
    3202:	89 89       	ldd	r24, Y+17	; 0x11
    3204:	9a 89       	ldd	r25, Y+18	; 0x12
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <main+0xb46>
    320a:	9a 8b       	std	Y+18, r25	; 0x12
    320c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320e:	8b 89       	ldd	r24, Y+19	; 0x13
    3210:	9c 89       	ldd	r25, Y+20	; 0x14
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	9c 8b       	std	Y+20, r25	; 0x14
    3216:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3218:	8b 89       	ldd	r24, Y+19	; 0x13
    321a:	9c 89       	ldd	r25, Y+20	; 0x14
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	69 f7       	brne	.-38     	; 0x31fa <main+0xb3a>
    3220:	14 c0       	rjmp	.+40     	; 0x324a <main+0xb8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3222:	6d 89       	ldd	r22, Y+21	; 0x15
    3224:	7e 89       	ldd	r23, Y+22	; 0x16
    3226:	8f 89       	ldd	r24, Y+23	; 0x17
    3228:	98 8d       	ldd	r25, Y+24	; 0x18
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9c 8b       	std	Y+20, r25	; 0x14
    3234:	8b 8b       	std	Y+19, r24	; 0x13
    3236:	8b 89       	ldd	r24, Y+19	; 0x13
    3238:	9c 89       	ldd	r25, Y+20	; 0x14
    323a:	98 8b       	std	Y+16, r25	; 0x10
    323c:	8f 87       	std	Y+15, r24	; 0x0f
    323e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3240:	98 89       	ldd	r25, Y+16	; 0x10
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	f1 f7       	brne	.-4      	; 0x3242 <main+0xb82>
    3246:	98 8b       	std	Y+16, r25	; 0x10
    3248:	8f 87       	std	Y+15, r24	; 0x0f
	        	    _delay_ms(3000);
	  	        	DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_LOW);
    324a:	83 e0       	ldi	r24, 0x03	; 3
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
	    	        DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN1,DIO_U8_HIGH);
    3254:	83 e0       	ldi	r24, 0x03	; 3
    3256:	61 e0       	ldi	r22, 0x01	; 1
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
        	  else if(passcheck==1)
        	     	  {
	        	  LCD_Clear();
	        	  LCD_VoidSendStr("Right password");
	        	  DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_HIGH);
	        	  while(flag==2)
    325e:	80 91 cc 00 	lds	r24, 0x00CC
    3262:	82 30       	cpi	r24, 0x02	; 2
    3264:	09 f4       	brne	.+2      	; 0x3268 <main+0xba8>
    3266:	75 cf       	rjmp	.-278    	; 0x3152 <main+0xa92>
    3268:	45 ca       	rjmp	.-2934   	; 0x26f4 <main+0x34>
	  	        	DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_LOW);
	    	        DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN1,DIO_U8_HIGH);
	        	  }
        	 }
    	  }
    	  else if(passcheck==1)
    326a:	fe 01       	movw	r30, r28
    326c:	ef 57       	subi	r30, 0x7F	; 127
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	81 30       	cpi	r24, 0x01	; 1
    3274:	09 f0       	breq	.+2      	; 0x3278 <main+0xbb8>
    3276:	3e ca       	rjmp	.-2948   	; 0x26f4 <main+0x34>
    	  {
        	  LCD_Clear();
    3278:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
        	  LCD_VoidSendStr("Right password");
    327c:	8f e7       	ldi	r24, 0x7F	; 127
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
        	  DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_HIGH);
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	67 e0       	ldi	r22, 0x07	; 7
    3288:	41 e0       	ldi	r20, 0x01	; 1
    328a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    328e:	86 c0       	rjmp	.+268    	; 0x339c <main+0xcdc>
        	  while(flag==2)
        	  {

                DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_HIGH);
    3290:	83 e0       	ldi	r24, 0x03	; 3
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
        	    DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN1,DIO_U8_LOW);
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e8       	ldi	r25, 0x80	; 128
    32a8:	ab e3       	ldi	r26, 0x3B	; 59
    32aa:	b5 e4       	ldi	r27, 0x45	; 69
    32ac:	8b 87       	std	Y+11, r24	; 0x0b
    32ae:	9c 87       	std	Y+12, r25	; 0x0c
    32b0:	ad 87       	std	Y+13, r26	; 0x0d
    32b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a ef       	ldi	r20, 0xFA	; 250
    32c2:	54 e4       	ldi	r21, 0x44	; 68
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8f 83       	std	Y+7, r24	; 0x07
    32ce:	98 87       	std	Y+8, r25	; 0x08
    32d0:	a9 87       	std	Y+9, r26	; 0x09
    32d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d4:	6f 81       	ldd	r22, Y+7	; 0x07
    32d6:	78 85       	ldd	r23, Y+8	; 0x08
    32d8:	89 85       	ldd	r24, Y+9	; 0x09
    32da:	9a 85       	ldd	r25, Y+10	; 0x0a
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <main+0xc36>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <main+0xcb4>
	else if (__tmp > 65535)
    32f6:	6f 81       	ldd	r22, Y+7	; 0x07
    32f8:	78 85       	ldd	r23, Y+8	; 0x08
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <main+0xca0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3310:	7c 85       	ldd	r23, Y+12	; 0x0c
    3312:	8d 85       	ldd	r24, Y+13	; 0x0d
    3314:	9e 85       	ldd	r25, Y+14	; 0x0e
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <main+0xc96>
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	9c 81       	ldd	r25, Y+4	; 0x04
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <main+0xc84>
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <main+0xc78>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <main+0xcc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9e 83       	std	Y+6, r25	; 0x06
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <main+0xcc0>
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
        	    _delay_ms(3000);
  	        	DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN0,DIO_U8_LOW);
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    	        DIO_u8SetPinValue(DIO_U8_PORTD,DIO_U8_PIN1,DIO_U8_HIGH);
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_u8SetPinValue>
    	  else if(passcheck==1)
    	  {
        	  LCD_Clear();
        	  LCD_VoidSendStr("Right password");
        	  DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,DIO_U8_HIGH);
        	  while(flag==2)
    339c:	80 91 cc 00 	lds	r24, 0x00CC
    33a0:	82 30       	cpi	r24, 0x02	; 2
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <main+0xce6>
    33a4:	75 cf       	rjmp	.-278    	; 0x3290 <main+0xbd0>
    33a6:	a6 c9       	rjmp	.-3252   	; 0x26f4 <main+0x34>
        	  }
    	  }
      }
      else
      {
        flag=1;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	80 93 cc 00 	sts	0x00CC, r24
        LCD_Clear();
    33ae:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
        DIO_u8AnalogPort(DIO_U8_PORTC,0x00);
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_u8AnalogPort>
    33ba:	9c c9       	rjmp	.-3272   	; 0x26f4 <main+0x34>

000033bc <App_void_set>:
      }
}
 }
}
void App_void_set(void)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62

  flag++;
    33c4:	80 91 cc 00 	lds	r24, 0x00CC
    33c8:	8f 5f       	subi	r24, 0xFF	; 255
    33ca:	80 93 cc 00 	sts	0x00CC, r24
}
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <EnterID>:

void EnterID(u8 *parr)
{
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	00 d0       	rcall	.+0      	; 0x33da <EnterID+0x6>
    33da:	00 d0       	rcall	.+0      	; 0x33dc <EnterID+0x8>
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Get_swkpd,i=0;
    33e4:	19 82       	std	Y+1, r1	; 0x01
    LCD_Clear();
    33e6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
    LCD_VoidSendStr("Enter ID");
    33ea:	8e e8       	ldi	r24, 0x8E	; 142
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
    LCD_voidGotoXY(1,9);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	69 e0       	ldi	r22, 0x09	; 9
    33f6:	0e 94 3b 12 	call	0x2476	; 0x2476 <LCD_voidGotoXY>
    33fa:	1a c0       	rjmp	.+52     	; 0x3430 <EnterID+0x5c>
 while(Get_swkpd != '%')
 {
    KPD_u8getswitch(&Get_swkpd);
    33fc:	ce 01       	movw	r24, r28
    33fe:	02 96       	adiw	r24, 0x02	; 2
    3400:	0e 94 6f 0c 	call	0x18de	; 0x18de <KPD_u8getswitch>
    if(Get_swkpd !=KPD_U8_NOT_PRESSED )
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	8f 3f       	cpi	r24, 0xFF	; 255
    3408:	99 f0       	breq	.+38     	; 0x3430 <EnterID+0x5c>
    {
   	 parr[i]=Get_swkpd;
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	fc 01       	movw	r30, r24
    3416:	e2 0f       	add	r30, r18
    3418:	f3 1f       	adc	r31, r19
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
    341c:	80 83       	st	Z, r24
   	 i++;
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	8f 5f       	subi	r24, 0xFF	; 255
    3422:	89 83       	std	Y+1, r24	; 0x01
   	 if(Get_swkpd != '%')
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	85 32       	cpi	r24, 0x25	; 37
    3428:	19 f0       	breq	.+6      	; 0x3430 <EnterID+0x5c>
   	 {
   	 LCD_voidSendChar(Get_swkpd);
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_voidSendChar>
{
	u8 Get_swkpd,i=0;
    LCD_Clear();
    LCD_VoidSendStr("Enter ID");
    LCD_voidGotoXY(1,9);
 while(Get_swkpd != '%')
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	85 32       	cpi	r24, 0x25	; 37
    3434:	19 f7       	brne	.-58     	; 0x33fc <EnterID+0x28>
    }

}


}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <checkID>:



u8 checkID(u8 *arr)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	00 d0       	rcall	.+0      	; 0x344a <checkID+0x6>
    344a:	0f 92       	push	r0
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	9b 83       	std	Y+3, r25	; 0x03
    3452:	8a 83       	std	Y+2, r24	; 0x02
   u8 local_ret ;

		if(arr[0]== '1')
    3454:	ea 81       	ldd	r30, Y+2	; 0x02
    3456:	fb 81       	ldd	r31, Y+3	; 0x03
    3458:	80 81       	ld	r24, Z
    345a:	81 33       	cpi	r24, 0x31	; 49
    345c:	59 f5       	brne	.+86     	; 0x34b4 <checkID+0x70>
		{
			if(arr[1] =='2')
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	fc 01       	movw	r30, r24
    3464:	31 96       	adiw	r30, 0x01	; 1
    3466:	80 81       	ld	r24, Z
    3468:	82 33       	cpi	r24, 0x32	; 50
    346a:	09 f5       	brne	.+66     	; 0x34ae <checkID+0x6a>
			{
				if(arr[2]=='3')
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	fc 01       	movw	r30, r24
    3472:	32 96       	adiw	r30, 0x02	; 2
    3474:	80 81       	ld	r24, Z
    3476:	83 33       	cpi	r24, 0x33	; 51
    3478:	b9 f4       	brne	.+46     	; 0x34a8 <checkID+0x64>
				{
					if(arr[3]=='4')
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	9b 81       	ldd	r25, Y+3	; 0x03
    347e:	fc 01       	movw	r30, r24
    3480:	33 96       	adiw	r30, 0x03	; 3
    3482:	80 81       	ld	r24, Z
    3484:	84 33       	cpi	r24, 0x34	; 52
    3486:	69 f4       	brne	.+26     	; 0x34a2 <checkID+0x5e>
					{
						if(arr[4]== '%')
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	fc 01       	movw	r30, r24
    348e:	34 96       	adiw	r30, 0x04	; 4
    3490:	80 81       	ld	r24, Z
    3492:	85 32       	cpi	r24, 0x25	; 37
    3494:	19 f4       	brne	.+6      	; 0x349c <checkID+0x58>
						{
							local_ret = 1;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	0e c0       	rjmp	.+28     	; 0x34b8 <checkID+0x74>
						}
						else
						{
							local_ret = 2;
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	0b c0       	rjmp	.+22     	; 0x34b8 <checkID+0x74>
						}
					}
					else
					{
						local_ret = 2;
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <checkID+0x74>
					}
				}
				else
				{
					local_ret = 2;
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	89 83       	std	Y+1, r24	; 0x01
    34ac:	05 c0       	rjmp	.+10     	; 0x34b8 <checkID+0x74>
				}
			}
			else
			{
				local_ret = 2;
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	89 83       	std	Y+1, r24	; 0x01
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <checkID+0x74>
			}
		}
		else
		{
			local_ret = 2;
    34b4:	82 e0       	ldi	r24, 0x02	; 2
    34b6:	89 83       	std	Y+1, r24	; 0x01
		}

  return  local_ret;
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <Enter_Password>:

void Enter_Password(u8 *parr)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <Enter_Password+0x6>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <Enter_Password+0x8>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	9c 83       	std	Y+4, r25	; 0x04
    34d4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Get_swkpd,x=0;
    34d6:	19 82       	std	Y+1, r1	; 0x01
	  LCD_Clear();
    34d8:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_Clear>
	  LCD_VoidSendStr("Enter Password");
    34dc:	87 e9       	ldi	r24, 0x97	; 151
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_VoidSendStr>
	  LCD_voidGotoXY(2,0);
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	0e 94 3b 12 	call	0x2476	; 0x2476 <LCD_voidGotoXY>
    34ec:	1a c0       	rjmp	.+52     	; 0x3522 <Enter_Password+0x5c>
	  while(Get_swkpd != '%')
	       {
	          KPD_u8getswitch(&Get_swkpd);
    34ee:	ce 01       	movw	r24, r28
    34f0:	02 96       	adiw	r24, 0x02	; 2
    34f2:	0e 94 6f 0c 	call	0x18de	; 0x18de <KPD_u8getswitch>
	          if(Get_swkpd !=KPD_U8_NOT_PRESSED )
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	8f 3f       	cpi	r24, 0xFF	; 255
    34fa:	99 f0       	breq	.+38     	; 0x3522 <Enter_Password+0x5c>
	          {
	         	 parr[x]=Get_swkpd;
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	fc 01       	movw	r30, r24
    3508:	e2 0f       	add	r30, r18
    350a:	f3 1f       	adc	r31, r19
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	80 83       	st	Z, r24
	         	 x++;
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	8f 5f       	subi	r24, 0xFF	; 255
    3514:	89 83       	std	Y+1, r24	; 0x01
	         	 if(Get_swkpd != '%')
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	85 32       	cpi	r24, 0x25	; 37
    351a:	19 f0       	breq	.+6      	; 0x3522 <Enter_Password+0x5c>
	         	   	 {
	         	   	 LCD_voidSendChar('*');
    351c:	8a e2       	ldi	r24, 0x2A	; 42
    351e:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_voidSendChar>
{
	u8 Get_swkpd,x=0;
	  LCD_Clear();
	  LCD_VoidSendStr("Enter Password");
	  LCD_voidGotoXY(2,0);
	  while(Get_swkpd != '%')
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	85 32       	cpi	r24, 0x25	; 37
    3526:	19 f7       	brne	.-58     	; 0x34ee <Enter_Password+0x28>
	         	   	 LCD_voidSendChar('*');
	         	   	 }

	          }
	       }
}
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <CheckPassword>:

u8 CheckPassword(u8 *arr)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <CheckPassword+0x6>
    353c:	0f 92       	push	r0
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9b 83       	std	Y+3, r25	; 0x03
    3544:	8a 83       	std	Y+2, r24	; 0x02
	   u8 local_ret ;

			if(arr[0]== '1')
    3546:	ea 81       	ldd	r30, Y+2	; 0x02
    3548:	fb 81       	ldd	r31, Y+3	; 0x03
    354a:	80 81       	ld	r24, Z
    354c:	81 33       	cpi	r24, 0x31	; 49
    354e:	59 f5       	brne	.+86     	; 0x35a6 <CheckPassword+0x70>
			{
				if(arr[1] =='2')
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	9b 81       	ldd	r25, Y+3	; 0x03
    3554:	fc 01       	movw	r30, r24
    3556:	31 96       	adiw	r30, 0x01	; 1
    3558:	80 81       	ld	r24, Z
    355a:	82 33       	cpi	r24, 0x32	; 50
    355c:	09 f5       	brne	.+66     	; 0x35a0 <CheckPassword+0x6a>
				{
					if(arr[2]=='3')
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	9b 81       	ldd	r25, Y+3	; 0x03
    3562:	fc 01       	movw	r30, r24
    3564:	32 96       	adiw	r30, 0x02	; 2
    3566:	80 81       	ld	r24, Z
    3568:	83 33       	cpi	r24, 0x33	; 51
    356a:	b9 f4       	brne	.+46     	; 0x359a <CheckPassword+0x64>
					{
						if(arr[3]=='4')
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	9b 81       	ldd	r25, Y+3	; 0x03
    3570:	fc 01       	movw	r30, r24
    3572:	33 96       	adiw	r30, 0x03	; 3
    3574:	80 81       	ld	r24, Z
    3576:	84 33       	cpi	r24, 0x34	; 52
    3578:	69 f4       	brne	.+26     	; 0x3594 <CheckPassword+0x5e>
						{
							if(arr[4]== '%')
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	fc 01       	movw	r30, r24
    3580:	34 96       	adiw	r30, 0x04	; 4
    3582:	80 81       	ld	r24, Z
    3584:	85 32       	cpi	r24, 0x25	; 37
    3586:	19 f4       	brne	.+6      	; 0x358e <CheckPassword+0x58>
							{
								local_ret = 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	0e c0       	rjmp	.+28     	; 0x35aa <CheckPassword+0x74>
							}
							else
							{
								local_ret = 2;
    358e:	82 e0       	ldi	r24, 0x02	; 2
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	0b c0       	rjmp	.+22     	; 0x35aa <CheckPassword+0x74>
							}
						}
						else
						{
							local_ret = 2;
    3594:	82 e0       	ldi	r24, 0x02	; 2
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	08 c0       	rjmp	.+16     	; 0x35aa <CheckPassword+0x74>
						}
					}
					else
					{
						local_ret = 2;
    359a:	82 e0       	ldi	r24, 0x02	; 2
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	05 c0       	rjmp	.+10     	; 0x35aa <CheckPassword+0x74>
					}
				}
				else
				{
					local_ret = 2;
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	02 c0       	rjmp	.+4      	; 0x35aa <CheckPassword+0x74>
				}
			}
			else
			{
				local_ret = 2;
    35a6:	82 e0       	ldi	r24, 0x02	; 2
    35a8:	89 83       	std	Y+1, r24	; 0x01
			}

	  return  local_ret;
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
	}
    35ac:	0f 90       	pop	r0
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	cf 91       	pop	r28
    35b4:	df 91       	pop	r29
    35b6:	08 95       	ret

000035b8 <__udivmodhi4>:
    35b8:	aa 1b       	sub	r26, r26
    35ba:	bb 1b       	sub	r27, r27
    35bc:	51 e1       	ldi	r21, 0x11	; 17
    35be:	07 c0       	rjmp	.+14     	; 0x35ce <__udivmodhi4_ep>

000035c0 <__udivmodhi4_loop>:
    35c0:	aa 1f       	adc	r26, r26
    35c2:	bb 1f       	adc	r27, r27
    35c4:	a6 17       	cp	r26, r22
    35c6:	b7 07       	cpc	r27, r23
    35c8:	10 f0       	brcs	.+4      	; 0x35ce <__udivmodhi4_ep>
    35ca:	a6 1b       	sub	r26, r22
    35cc:	b7 0b       	sbc	r27, r23

000035ce <__udivmodhi4_ep>:
    35ce:	88 1f       	adc	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	5a 95       	dec	r21
    35d4:	a9 f7       	brne	.-22     	; 0x35c0 <__udivmodhi4_loop>
    35d6:	80 95       	com	r24
    35d8:	90 95       	com	r25
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	08 95       	ret

000035e0 <__prologue_saves__>:
    35e0:	2f 92       	push	r2
    35e2:	3f 92       	push	r3
    35e4:	4f 92       	push	r4
    35e6:	5f 92       	push	r5
    35e8:	6f 92       	push	r6
    35ea:	7f 92       	push	r7
    35ec:	8f 92       	push	r8
    35ee:	9f 92       	push	r9
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	ca 1b       	sub	r28, r26
    360a:	db 0b       	sbc	r29, r27
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    3616:	09 94       	ijmp

00003618 <__epilogue_restores__>:
    3618:	2a 88       	ldd	r2, Y+18	; 0x12
    361a:	39 88       	ldd	r3, Y+17	; 0x11
    361c:	48 88       	ldd	r4, Y+16	; 0x10
    361e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3620:	6e 84       	ldd	r6, Y+14	; 0x0e
    3622:	7d 84       	ldd	r7, Y+13	; 0x0d
    3624:	8c 84       	ldd	r8, Y+12	; 0x0c
    3626:	9b 84       	ldd	r9, Y+11	; 0x0b
    3628:	aa 84       	ldd	r10, Y+10	; 0x0a
    362a:	b9 84       	ldd	r11, Y+9	; 0x09
    362c:	c8 84       	ldd	r12, Y+8	; 0x08
    362e:	df 80       	ldd	r13, Y+7	; 0x07
    3630:	ee 80       	ldd	r14, Y+6	; 0x06
    3632:	fd 80       	ldd	r15, Y+5	; 0x05
    3634:	0c 81       	ldd	r16, Y+4	; 0x04
    3636:	1b 81       	ldd	r17, Y+3	; 0x03
    3638:	aa 81       	ldd	r26, Y+2	; 0x02
    363a:	b9 81       	ldd	r27, Y+1	; 0x01
    363c:	ce 0f       	add	r28, r30
    363e:	d1 1d       	adc	r29, r1
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	ed 01       	movw	r28, r26
    364c:	08 95       	ret

0000364e <_exit>:
    364e:	f8 94       	cli

00003650 <__stop_program>:
    3650:	ff cf       	rjmp	.-2      	; 0x3650 <__stop_program>
