
timer_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00002d32  00002dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800190  00800190  00002ef6  2**0
                  ALLOC
  3 .stab         00002658  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faf  00000000  00000000  00005550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000064ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000213  00000000  00000000  000066bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002495  00000000  00000000  000068d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001412  00000000  00000000  00008d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001209  00000000  00000000  0000a179  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b384  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002da  00000000  00000000  0000b564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000996  00000000  00000000  0000b83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_10>
      2c:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 14 	call	0x286c	; 0x286c <main>
      8a:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__+0x20>

00000916 <__floatunsisf>:
     916:	a8 e0       	ldi	r26, 0x08	; 8
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x10>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	61 15       	cp	r22, r1
     928:	71 05       	cpc	r23, r1
     92a:	81 05       	cpc	r24, r1
     92c:	91 05       	cpc	r25, r1
     92e:	19 f4       	brne	.+6      	; 0x936 <__floatunsisf+0x20>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <__floatunsisf+0xe0>
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	8e e1       	ldi	r24, 0x1E	; 30
     93c:	c8 2e       	mov	r12, r24
     93e:	d1 2c       	mov	r13, r1
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 01       	movw	r24, r16
     94e:	b7 01       	movw	r22, r14
     950:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     954:	fc 01       	movw	r30, r24
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f7 ff       	sbrs	r31, 7
     95a:	3b c0       	rjmp	.+118    	; 0x9d2 <__floatunsisf+0xbc>
     95c:	22 27       	eor	r18, r18
     95e:	33 27       	eor	r19, r19
     960:	2e 1b       	sub	r18, r30
     962:	3f 0b       	sbc	r19, r31
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	02 2e       	mov	r0, r18
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__floatunsisf+0x5e>
     96c:	d6 94       	lsr	r13
     96e:	c7 94       	ror	r12
     970:	b7 94       	ror	r11
     972:	a7 94       	ror	r10
     974:	0a 94       	dec	r0
     976:	d2 f7       	brpl	.-12     	; 0x96c <__floatunsisf+0x56>
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__floatunsisf+0x7c>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	aa 1f       	adc	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	2a 95       	dec	r18
     994:	d2 f7       	brpl	.-12     	; 0x98a <__floatunsisf+0x74>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	a1 09       	sbc	r26, r1
     99a:	b1 09       	sbc	r27, r1
     99c:	8e 21       	and	r24, r14
     99e:	9f 21       	and	r25, r15
     9a0:	a0 23       	and	r26, r16
     9a2:	b1 23       	and	r27, r17
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatunsisf+0x9e>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	4a 29       	or	r20, r10
     9b6:	5b 29       	or	r21, r11
     9b8:	6c 29       	or	r22, r12
     9ba:	7d 29       	or	r23, r13
     9bc:	4d 83       	std	Y+5, r20	; 0x05
     9be:	5e 83       	std	Y+6, r21	; 0x06
     9c0:	6f 83       	std	Y+7, r22	; 0x07
     9c2:	78 87       	std	Y+8, r23	; 0x08
     9c4:	8e e1       	ldi	r24, 0x1E	; 30
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8e 1b       	sub	r24, r30
     9ca:	9f 0b       	sbc	r25, r31
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__floatunsisf+0xe0>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <__floatunsisf+0xe0>
     9d6:	0e 2e       	mov	r0, r30
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__floatunsisf+0xcc>
     9da:	ee 0c       	add	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	00 1f       	adc	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	0a 94       	dec	r0
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__floatunsisf+0xc4>
     9e6:	ed 82       	std	Y+5, r14	; 0x05
     9e8:	fe 82       	std	Y+6, r15	; 0x06
     9ea:	0f 83       	std	Y+7, r16	; 0x07
     9ec:	18 87       	std	Y+8, r17	; 0x08
     9ee:	ce 1a       	sub	r12, r30
     9f0:	df 0a       	sbc	r13, r31
     9f2:	dc 82       	std	Y+4, r13	; 0x04
     9f4:	cb 82       	std	Y+3, r12	; 0x03
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     a00:	28 96       	adiw	r28, 0x08	; 8
     a02:	ea e0       	ldi	r30, 0x0A	; 10
     a04:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x10>

00000a08 <__clzsi2>:
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	7b 01       	movw	r14, r22
     a12:	8c 01       	movw	r16, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	e8 16       	cp	r14, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	f8 06       	cpc	r15, r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 07       	cpc	r16, r24
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	18 07       	cpc	r17, r24
     a24:	88 f4       	brcc	.+34     	; 0xa48 <__clzsi2+0x40>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	e8 16       	cp	r14, r24
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 05       	cpc	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	31 f0       	breq	.+12     	; 0xa3e <__clzsi2+0x36>
     a32:	28 f0       	brcs	.+10     	; 0xa3e <__clzsi2+0x36>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <__clzsi2+0x64>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	e8 16       	cp	r14, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	f8 06       	cpc	r15, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 07       	cpc	r16, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	18 07       	cpc	r17, r24
     a58:	28 f0       	brcs	.+10     	; 0xa64 <__clzsi2+0x5c>
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__clzsi2+0x64>
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	20 e2       	ldi	r18, 0x20	; 32
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	28 1b       	sub	r18, r24
     a76:	39 0b       	sbc	r19, r25
     a78:	4a 0b       	sbc	r20, r26
     a7a:	5b 0b       	sbc	r21, r27
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__clzsi2+0x7e>
     a7e:	16 95       	lsr	r17
     a80:	07 95       	ror	r16
     a82:	f7 94       	ror	r15
     a84:	e7 94       	ror	r14
     a86:	8a 95       	dec	r24
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__clzsi2+0x76>
     a8a:	f7 01       	movw	r30, r14
     a8c:	ef 58       	subi	r30, 0x8F	; 143
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	28 1b       	sub	r18, r24
     a94:	31 09       	sbc	r19, r1
     a96:	41 09       	sbc	r20, r1
     a98:	51 09       	sbc	r21, r1
     a9a:	c9 01       	movw	r24, r18
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <__pack_f>:
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	fc 01       	movw	r30, r24
     ab2:	e4 80       	ldd	r14, Z+4	; 0x04
     ab4:	f5 80       	ldd	r15, Z+5	; 0x05
     ab6:	06 81       	ldd	r16, Z+6	; 0x06
     ab8:	17 81       	ldd	r17, Z+7	; 0x07
     aba:	d1 80       	ldd	r13, Z+1	; 0x01
     abc:	80 81       	ld	r24, Z
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	48 f4       	brcc	.+18     	; 0xad4 <__pack_f+0x2e>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e1       	ldi	r26, 0x10	; 16
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 2a       	or	r14, r24
     acc:	f9 2a       	or	r15, r25
     ace:	0a 2b       	or	r16, r26
     ad0:	1b 2b       	or	r17, r27
     ad2:	a5 c0       	rjmp	.+330    	; 0xc1e <__pack_f+0x178>
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	09 f4       	brne	.+2      	; 0xada <__pack_f+0x34>
     ad8:	9f c0       	rjmp	.+318    	; 0xc18 <__pack_f+0x172>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	21 f4       	brne	.+8      	; 0xae6 <__pack_f+0x40>
     ade:	ee 24       	eor	r14, r14
     ae0:	ff 24       	eor	r15, r15
     ae2:	87 01       	movw	r16, r14
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__pack_f+0x4a>
     ae6:	e1 14       	cp	r14, r1
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	19 f4       	brne	.+6      	; 0xaf6 <__pack_f+0x50>
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	96 c0       	rjmp	.+300    	; 0xc22 <__pack_f+0x17c>
     af6:	62 81       	ldd	r22, Z+2	; 0x02
     af8:	73 81       	ldd	r23, Z+3	; 0x03
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	62 38       	cpi	r22, 0x82	; 130
     afe:	79 07       	cpc	r23, r25
     b00:	0c f0       	brlt	.+2      	; 0xb04 <__pack_f+0x5e>
     b02:	5b c0       	rjmp	.+182    	; 0xbba <__pack_f+0x114>
     b04:	22 e8       	ldi	r18, 0x82	; 130
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	26 1b       	sub	r18, r22
     b0a:	37 0b       	sbc	r19, r23
     b0c:	2a 31       	cpi	r18, 0x1A	; 26
     b0e:	31 05       	cpc	r19, r1
     b10:	2c f0       	brlt	.+10     	; 0xb1c <__pack_f+0x76>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	2a c0       	rjmp	.+84     	; 0xb70 <__pack_f+0xca>
     b1c:	b8 01       	movw	r22, r16
     b1e:	a7 01       	movw	r20, r14
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0x86>
     b24:	76 95       	lsr	r23
     b26:	67 95       	ror	r22
     b28:	57 95       	ror	r21
     b2a:	47 95       	ror	r20
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__pack_f+0x7e>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0x9c>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	2a 95       	dec	r18
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__pack_f+0x94>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	8e 21       	and	r24, r14
     b4e:	9f 21       	and	r25, r15
     b50:	a0 23       	and	r26, r16
     b52:	b1 23       	and	r27, r17
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	21 f0       	breq	.+8      	; 0xb64 <__pack_f+0xbe>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	9a 01       	movw	r18, r20
     b66:	ab 01       	movw	r20, r22
     b68:	28 2b       	or	r18, r24
     b6a:	39 2b       	or	r19, r25
     b6c:	4a 2b       	or	r20, r26
     b6e:	5b 2b       	or	r21, r27
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	a0 70       	andi	r26, 0x00	; 0
     b7a:	b0 70       	andi	r27, 0x00	; 0
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	39 f4       	brne	.+14     	; 0xb94 <__pack_f+0xee>
     b86:	27 ff       	sbrs	r18, 7
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__pack_f+0xf6>
     b8a:	20 5c       	subi	r18, 0xC0	; 192
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <__pack_f+0xf6>
     b94:	21 5c       	subi	r18, 0xC1	; 193
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	3a 07       	cpc	r19, r26
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	4a 07       	cpc	r20, r26
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	5a 07       	cpc	r21, r26
     bae:	10 f0       	brcs	.+4      	; 0xbb4 <__pack_f+0x10e>
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	27 c0       	rjmp	.+78     	; 0xc08 <__pack_f+0x162>
     bba:	60 38       	cpi	r22, 0x80	; 128
     bbc:	71 05       	cpc	r23, r1
     bbe:	64 f5       	brge	.+88     	; 0xc18 <__pack_f+0x172>
     bc0:	fb 01       	movw	r30, r22
     bc2:	e1 58       	subi	r30, 0x81	; 129
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	d8 01       	movw	r26, r16
     bc8:	c7 01       	movw	r24, r14
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0x144>
     bdc:	e7 fe       	sbrs	r14, 7
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <__pack_f+0x154>
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x14c>
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e8 0e       	add	r14, r24
     bf4:	f9 1e       	adc	r15, r25
     bf6:	0a 1f       	adc	r16, r26
     bf8:	1b 1f       	adc	r17, r27
     bfa:	17 ff       	sbrs	r17, 7
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__pack_f+0x162>
     bfe:	16 95       	lsr	r17
     c00:	07 95       	ror	r16
     c02:	f7 94       	ror	r15
     c04:	e7 94       	ror	r14
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	16 95       	lsr	r17
     c0c:	07 95       	ror	r16
     c0e:	f7 94       	ror	r15
     c10:	e7 94       	ror	r14
     c12:	8a 95       	dec	r24
     c14:	d1 f7       	brne	.-12     	; 0xc0a <__pack_f+0x164>
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <__pack_f+0x17c>
     c18:	ee 24       	eor	r14, r14
     c1a:	ff 24       	eor	r15, r15
     c1c:	87 01       	movw	r16, r14
     c1e:	ef ef       	ldi	r30, 0xFF	; 255
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	6e 2f       	mov	r22, r30
     c24:	67 95       	ror	r22
     c26:	66 27       	eor	r22, r22
     c28:	67 95       	ror	r22
     c2a:	90 2f       	mov	r25, r16
     c2c:	9f 77       	andi	r25, 0x7F	; 127
     c2e:	d7 94       	ror	r13
     c30:	dd 24       	eor	r13, r13
     c32:	d7 94       	ror	r13
     c34:	8e 2f       	mov	r24, r30
     c36:	86 95       	lsr	r24
     c38:	49 2f       	mov	r20, r25
     c3a:	46 2b       	or	r20, r22
     c3c:	58 2f       	mov	r21, r24
     c3e:	5d 29       	or	r21, r13
     c40:	b7 01       	movw	r22, r14
     c42:	ca 01       	movw	r24, r20
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <__unpack_f>:
     c50:	fc 01       	movw	r30, r24
     c52:	db 01       	movw	r26, r22
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	22 81       	ldd	r18, Z+2	; 0x02
     c5a:	62 2f       	mov	r22, r18
     c5c:	6f 77       	andi	r22, 0x7F	; 127
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	22 1f       	adc	r18, r18
     c62:	22 27       	eor	r18, r18
     c64:	22 1f       	adc	r18, r18
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	89 2f       	mov	r24, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	99 1f       	adc	r25, r25
     c74:	99 27       	eor	r25, r25
     c76:	99 1f       	adc	r25, r25
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	a9 f5       	brne	.+106    	; 0xcee <__unpack_f+0x9e>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	11 f4       	brne	.+4      	; 0xc92 <__unpack_f+0x42>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	37 c0       	rjmp	.+110    	; 0xd00 <__unpack_f+0xb0>
     c92:	82 e8       	ldi	r24, 0x82	; 130
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	13 96       	adiw	r26, 0x03	; 3
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	9a 01       	movw	r18, r20
     ca0:	ab 01       	movw	r20, r22
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	44 1f       	adc	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	6a 95       	dec	r22
     cae:	d1 f7       	brne	.-12     	; 0xca4 <__unpack_f+0x54>
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__unpack_f+0x80>
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	20 30       	cpi	r18, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	38 07       	cpc	r19, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	48 07       	cpc	r20, r24
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	58 07       	cpc	r21, r24
     cde:	58 f3       	brcs	.-42     	; 0xcb6 <__unpack_f+0x66>
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	2d 93       	st	X+, r18
     ce4:	3d 93       	st	X+, r19
     ce6:	4d 93       	st	X+, r20
     ce8:	5c 93       	st	X, r21
     cea:	17 97       	sbiw	r26, 0x07	; 7
     cec:	08 95       	ret
     cee:	2f 3f       	cpi	r18, 0xFF	; 255
     cf0:	31 05       	cpc	r19, r1
     cf2:	79 f4       	brne	.+30     	; 0xd12 <__unpack_f+0xc2>
     cf4:	41 15       	cp	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	61 05       	cpc	r22, r1
     cfa:	71 05       	cpc	r23, r1
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__unpack_f+0xb4>
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
     d02:	08 95       	ret
     d04:	64 ff       	sbrs	r22, 4
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__unpack_f+0xbe>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	8c 93       	st	X, r24
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <__unpack_f+0xe2>
     d0e:	1c 92       	st	X, r1
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <__unpack_f+0xe2>
     d12:	2f 57       	subi	r18, 0x7F	; 127
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	3c 93       	st	X, r19
     d1a:	2e 93       	st	-X, r18
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 93       	st	X, r24
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	66 1f       	adc	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <__unpack_f+0xd4>
     d30:	70 64       	ori	r23, 0x40	; 64
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	4d 93       	st	X+, r20
     d36:	5d 93       	st	X+, r21
     d38:	6d 93       	st	X+, r22
     d3a:	7c 93       	st	X, r23
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	08 95       	ret

00000d40 <__fpcmp_parts_f>:
     d40:	1f 93       	push	r17
     d42:	dc 01       	movw	r26, r24
     d44:	fb 01       	movw	r30, r22
     d46:	9c 91       	ld	r25, X
     d48:	92 30       	cpi	r25, 0x02	; 2
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <__fpcmp_parts_f+0xe>
     d4c:	47 c0       	rjmp	.+142    	; 0xddc <__fpcmp_parts_f+0x9c>
     d4e:	80 81       	ld	r24, Z
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__fpcmp_parts_f+0x16>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <__fpcmp_parts_f+0x9c>
     d56:	94 30       	cpi	r25, 0x04	; 4
     d58:	51 f4       	brne	.+20     	; 0xd6e <__fpcmp_parts_f+0x2e>
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	1c 91       	ld	r17, X
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	99 f5       	brne	.+102    	; 0xdc8 <__fpcmp_parts_f+0x88>
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	68 2f       	mov	r22, r24
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	61 1b       	sub	r22, r17
     d6a:	71 09       	sbc	r23, r1
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <__fpcmp_parts_f+0xac>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	21 f0       	breq	.+8      	; 0xd7a <__fpcmp_parts_f+0x3a>
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	31 f4       	brne	.+12     	; 0xd82 <__fpcmp_parts_f+0x42>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	b9 f1       	breq	.+110    	; 0xde8 <__fpcmp_parts_f+0xa8>
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	88 23       	and	r24, r24
     d7e:	89 f1       	breq	.+98     	; 0xde2 <__fpcmp_parts_f+0xa2>
     d80:	2d c0       	rjmp	.+90     	; 0xddc <__fpcmp_parts_f+0x9c>
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	1c 91       	ld	r17, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	f1 f0       	breq	.+60     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	18 17       	cp	r17, r24
     d90:	d9 f4       	brne	.+54     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	2d 91       	ld	r18, X+
     d96:	3c 91       	ld	r19, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	94 f0       	brlt	.+36     	; 0xdc8 <__fpcmp_parts_f+0x88>
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	bc f0       	brlt	.+46     	; 0xdd8 <__fpcmp_parts_f+0x98>
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	8d 91       	ld	r24, X+
     dae:	9d 91       	ld	r25, X+
     db0:	0d 90       	ld	r0, X+
     db2:	bc 91       	ld	r27, X
     db4:	a0 2d       	mov	r26, r0
     db6:	24 81       	ldd	r18, Z+4	; 0x04
     db8:	35 81       	ldd	r19, Z+5	; 0x05
     dba:	46 81       	ldd	r20, Z+6	; 0x06
     dbc:	57 81       	ldd	r21, Z+7	; 0x07
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	4a 07       	cpc	r20, r26
     dc4:	5b 07       	cpc	r21, r27
     dc6:	18 f4       	brcc	.+6      	; 0xdce <__fpcmp_parts_f+0x8e>
     dc8:	11 23       	and	r17, r17
     dca:	41 f0       	breq	.+16     	; 0xddc <__fpcmp_parts_f+0x9c>
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <__fpcmp_parts_f+0xa2>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	a4 07       	cpc	r26, r20
     dd4:	b5 07       	cpc	r27, r21
     dd6:	40 f4       	brcc	.+16     	; 0xde8 <__fpcmp_parts_f+0xa8>
     dd8:	11 23       	and	r17, r17
     dda:	19 f0       	breq	.+6      	; 0xde2 <__fpcmp_parts_f+0xa2>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__fpcmp_parts_f+0xac>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__fpcmp_parts_f+0xac>
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	cb 01       	movw	r24, r22
     dee:	1f 91       	pop	r17
     df0:	08 95       	ret

00000df2 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DiO_private.h"

void DIO_voidInit(void)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	DIO_U8_DDRA_REG=conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
     dfa:	ea e3       	ldi	r30, 0x3A	; 58
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 83       	st	Z, r24
	               		 DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION );

    DIO_U8_DDRB_REG=conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,
     e02:	e7 e3       	ldi	r30, 0x37	; 55
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	88 ef       	ldi	r24, 0xF8	; 248
     e08:	80 83       	st	Z, r24
				         DIO_u8_PB4_DIRECTION,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION );

    DIO_U8_DDRC_REG=conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,
     e0a:	e4 e3       	ldi	r30, 0x34	; 52
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	8f e7       	ldi	r24, 0x7F	; 127
     e10:	80 83       	st	Z, r24
				         DIO_u8_PC4_DIRECTION,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION );

    DIO_U8_DDRD_REG=conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,
     e12:	e1 e3       	ldi	r30, 0x31	; 49
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	10 82       	st	Z, r1
				         DIO_u8_PD4_DIRECTION,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION );



    DIO_U8_PORTA_REG=conc(DIO_u8_PA7_INITTIAL_VALUE,DIO_u8_PA6_INITTIAL_VALUE,DIO_u8_PA5_INITTIAL_VALUE,
     e18:	eb e3       	ldi	r30, 0x3B	; 59
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	10 82       	st	Z, r1
    		              DIO_u8_PA4_INITTIAL_VALUE,DIO_u8_PA3_INITTIAL_VALUE,DIO_u8_PA2_INITTIAL_VALUE,DIO_u8_PA1_INITTIAL_VALUE,DIO_u8_PA0_INITTIAL_VALUE);

    DIO_U8_PORTB_REG=conc(DIO_u8_PB7_INITTIAL_VALUE,DIO_u8_PB6_INITTIAL_VALUE,DIO_u8_PB5_INITTIAL_VALUE,
     e1e:	e8 e3       	ldi	r30, 0x38	; 56
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	81 ef       	ldi	r24, 0xF1	; 241
     e24:	80 83       	st	Z, r24
    		              DIO_u8_PB4_INITTIAL_VALUE,DIO_u8_PB3_INITTIAL_VALUE,DIO_u8_PB2_INITTIAL_VALUE,DIO_u8_PB1_INITTIAL_VALUE,DIO_u8_PB0_INITTIAL_VALUE);

	DIO_U8_PORTC_REG=conc(DIO_u8_PC7_INITTIAL_VALUE,DIO_u8_PC6_INITTIAL_VALUE,DIO_u8_PC5_INITTIAL_VALUE,
     e26:	e5 e3       	ldi	r30, 0x35	; 53
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	10 82       	st	Z, r1
				          DIO_u8_PC4_INITTIAL_VALUE,DIO_u8_PC3_INITTIAL_VALUE,DIO_u8_PC2_INITTIAL_VALUE,DIO_u8_PC1_INITTIAL_VALUE,DIO_u8_PC0_INITTIAL_VALUE);

    DIO_U8_PORTD_REG=conc(DIO_u8_PD7_INITTIAL_VALUE,DIO_u8_PD6_INITTIAL_VALUE,DIO_u8_PD5_INITTIAL_VALUE,
     e2c:	e2 e3       	ldi	r30, 0x32	; 50
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	8c e3       	ldi	r24, 0x3C	; 60
     e32:	80 83       	st	Z, r24
    		              DIO_u8_PD4_INITTIAL_VALUE,DIO_u8_PD3_INITTIAL_VALUE,DIO_u8_PD2_INITTIAL_VALUE,DIO_u8_PD1_INITTIAL_VALUE,DIO_u8_PD0_INITTIAL_VALUE);


}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <DIO_u8SetPinDirction>:


u8 DIO_u8SetPinDirction(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinDirction )
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_u8SetPinDirction+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_u8SetPinDirction+0x8>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_u8SetPinDirction+0xa>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	6b 83       	std	Y+3, r22	; 0x03
     e4c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinDirction<=DIO_U8_OUTPUT))
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	08 f0       	brcs	.+2      	; 0xe5a <DIO_u8SetPinDirction+0x20>
     e58:	da c0       	rjmp	.+436    	; 0x100e <DIO_u8SetPinDirction+0x1d4>
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	88 30       	cpi	r24, 0x08	; 8
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <DIO_u8SetPinDirction+0x28>
     e60:	d6 c0       	rjmp	.+428    	; 0x100e <DIO_u8SetPinDirction+0x1d4>
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	08 f0       	brcs	.+2      	; 0xe6a <DIO_u8SetPinDirction+0x30>
     e68:	d2 c0       	rjmp	.+420    	; 0x100e <DIO_u8SetPinDirction+0x1d4>
	{
		switch(copy_u8PortId)
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	3e 83       	std	Y+6, r19	; 0x06
     e72:	2d 83       	std	Y+5, r18	; 0x05
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <DIO_u8SetPinDirction+0x46>
     e7e:	43 c0       	rjmp	.+134    	; 0xf06 <DIO_u8SetPinDirction+0xcc>
     e80:	2d 81       	ldd	r18, Y+5	; 0x05
     e82:	3e 81       	ldd	r19, Y+6	; 0x06
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_u8SetPinDirction+0x5a>
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	71 f0       	breq	.+28     	; 0xeae <DIO_u8SetPinDirction+0x74>
     e92:	be c0       	rjmp	.+380    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <DIO_u8SetPinDirction+0x66>
     e9e:	5f c0       	rjmp	.+190    	; 0xf5e <DIO_u8SetPinDirction+0x124>
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <DIO_u8SetPinDirction+0x72>
     eaa:	85 c0       	rjmp	.+266    	; 0xfb6 <DIO_u8SetPinDirction+0x17c>
     eac:	b1 c0       	rjmp	.+354    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
		{
			case DIO_U8_PORTA:
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	a1 f4       	brne	.+40     	; 0xedc <DIO_u8SetPinDirction+0xa2>
			       {
			            SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     eb4:	aa e3       	ldi	r26, 0x3A	; 58
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e3       	ldi	r30, 0x3A	; 58
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_u8SetPinDirction+0x98>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_u8SetPinDirction+0x94>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	9a c0       	rjmp	.+308    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     edc:	aa e3       	ldi	r26, 0x3A	; 58
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ea e3       	ldi	r30, 0x3A	; 58
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinDirction+0xc0>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinDirction+0xbc>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	85 c0       	rjmp	.+266    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTB :
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	a1 f4       	brne	.+40     	; 0xf34 <DIO_u8SetPinDirction+0xfa>
			       {
			            SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     f0c:	a7 e3       	ldi	r26, 0x37	; 55
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e3       	ldi	r30, 0x37	; 55
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_u8SetPinDirction+0xf0>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_u8SetPinDirction+0xec>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	6e c0       	rjmp	.+220    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     f34:	a7 e3       	ldi	r26, 0x37	; 55
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e7 e3       	ldi	r30, 0x37	; 55
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_u8SetPinDirction+0x118>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_u8SetPinDirction+0x114>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	59 c0       	rjmp	.+178    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTC:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	a1 f4       	brne	.+40     	; 0xf8c <DIO_u8SetPinDirction+0x152>
			        {
			            SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     f64:	a4 e3       	ldi	r26, 0x34	; 52
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e4 e3       	ldi	r30, 0x34	; 52
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8SetPinDirction+0x148>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8SetPinDirction+0x144>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	42 c0       	rjmp	.+132    	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
			        {
						CLE_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     f8c:	a4 e3       	ldi	r26, 0x34	; 52
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e4 e3       	ldi	r30, 0x34	; 52
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_u8SetPinDirction+0x170>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_u8SetPinDirction+0x16c>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	2d c0       	rjmp	.+90     	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
					}
			break;
			case DIO_U8_PORTD:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	a1 f4       	brne	.+40     	; 0xfe4 <DIO_u8SetPinDirction+0x1aa>
			        {
			            SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     fbc:	a1 e3       	ldi	r26, 0x31	; 49
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e1 e3       	ldi	r30, 0x31	; 49
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_u8SetPinDirction+0x1a0>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_u8SetPinDirction+0x19c>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	16 c0       	rjmp	.+44     	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
					{
                 		CLE_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     fe4:	a1 e3       	ldi	r26, 0x31	; 49
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e3       	ldi	r30, 0x31	; 49
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_u8SetPinDirction+0x1c8>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_u8SetPinDirction+0x1c4>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <DIO_u8SetPinDirction+0x1d6>
			break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK; 
    100e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
}
    1012:	26 96       	adiw	r28, 0x06	; 6
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <DIO_u8SetPinValue+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <DIO_u8SetPinValue+0x8>
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_u8SetPinValue+0xa>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	6b 83       	std	Y+3, r22	; 0x03
    1036:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErorrState = STD_TYPES_OK;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinValue<=DIO_U8_OUTPUT))
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	08 f0       	brcs	.+2      	; 0x1044 <DIO_u8SetPinValue+0x20>
    1042:	da c0       	rjmp	.+436    	; 0x11f8 <DIO_u8SetPinValue+0x1d4>
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 30       	cpi	r24, 0x08	; 8
    1048:	08 f0       	brcs	.+2      	; 0x104c <DIO_u8SetPinValue+0x28>
    104a:	d6 c0       	rjmp	.+428    	; 0x11f8 <DIO_u8SetPinValue+0x1d4>
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_u8SetPinValue+0x30>
    1052:	d2 c0       	rjmp	.+420    	; 0x11f8 <DIO_u8SetPinValue+0x1d4>
	{
	  switch(copy_u8PortId)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3e 83       	std	Y+6, r19	; 0x06
    105c:	2d 83       	std	Y+5, r18	; 0x05
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_u8SetPinValue+0x46>
    1068:	43 c0       	rjmp	.+134    	; 0x10f0 <DIO_u8SetPinValue+0xcc>
    106a:	2d 81       	ldd	r18, Y+5	; 0x05
    106c:	3e 81       	ldd	r19, Y+6	; 0x06
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <DIO_u8SetPinValue+0x5a>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	71 f0       	breq	.+28     	; 0x1098 <DIO_u8SetPinValue+0x74>
    107c:	be c0       	rjmp	.+380    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
    107e:	2d 81       	ldd	r18, Y+5	; 0x05
    1080:	3e 81       	ldd	r19, Y+6	; 0x06
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <DIO_u8SetPinValue+0x66>
    1088:	5f c0       	rjmp	.+190    	; 0x1148 <DIO_u8SetPinValue+0x124>
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <DIO_u8SetPinValue+0x72>
    1094:	85 c0       	rjmp	.+266    	; 0x11a0 <DIO_u8SetPinValue+0x17c>
    1096:	b1 c0       	rjmp	.+354    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
	  {
		  case DIO_U8_PORTA:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	a1 f4       	brne	.+40     	; 0x10c6 <DIO_u8SetPinValue+0xa2>
	       	   {
			       SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8SetPinValue+0x98>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8SetPinValue+0x94>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	9a c0       	rjmp	.+308    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
    10c6:	ab e3       	ldi	r26, 0x3B	; 59
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	eb e3       	ldi	r30, 0x3B	; 59
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_u8SetPinValue+0xc0>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_u8SetPinValue+0xbc>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	85 c0       	rjmp	.+266    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTB:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	a1 f4       	brne	.+40     	; 0x111e <DIO_u8SetPinValue+0xfa>
	       	   {
			       SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
    10f6:	a8 e3       	ldi	r26, 0x38	; 56
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e3       	ldi	r30, 0x38	; 56
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_u8SetPinValue+0xf0>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_u8SetPinValue+0xec>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	6e c0       	rjmp	.+220    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
    111e:	a8 e3       	ldi	r26, 0x38	; 56
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e8 e3       	ldi	r30, 0x38	; 56
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_u8SetPinValue+0x118>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_u8SetPinValue+0x114>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	59 c0       	rjmp	.+178    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTC:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	a1 f4       	brne	.+40     	; 0x1176 <DIO_u8SetPinValue+0x152>
	       	   {
			       SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    114e:	a5 e3       	ldi	r26, 0x35	; 53
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e3       	ldi	r30, 0x35	; 53
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8SetPinValue+0x148>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8SetPinValue+0x144>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	42 c0       	rjmp	.+132    	; 0x11fa <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    1176:	a5 e3       	ldi	r26, 0x35	; 53
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e3       	ldi	r30, 0x35	; 53
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_u8SetPinValue+0x170>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_u8SetPinValue+0x16c>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	2d c0       	rjmp	.+90     	; 0x11fa <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTD:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <DIO_u8SetPinValue+0x1aa>
	       	   {
			       SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    11a6:	a2 e3       	ldi	r26, 0x32	; 50
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e2 e3       	ldi	r30, 0x32	; 50
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_u8SetPinValue+0x1a0>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_u8SetPinValue+0x19c>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	16 c0       	rjmp	.+44     	; 0x11fa <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    11ce:	a2 e3       	ldi	r26, 0x32	; 50
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_u8SetPinValue+0x1c8>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_u8SetPinValue+0x1c4>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <DIO_u8SetPinValue+0x1d6>
		  
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK; 
    11f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    11fc:	26 96       	adiw	r28, 0x06	; 6
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue )
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	27 97       	sbiw	r28, 0x07	; 7
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	6b 83       	std	Y+3, r22	; 0x03
    1226:	5d 83       	std	Y+5, r21	; 0x05
    1228:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7))
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	08 f0       	brcs	.+2      	; 0x1236 <DIO_u8GetPinValue+0x28>
    1234:	75 c0       	rjmp	.+234    	; 0x1320 <DIO_u8GetPinValue+0x112>
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 30       	cpi	r24, 0x08	; 8
    123a:	08 f0       	brcs	.+2      	; 0x123e <DIO_u8GetPinValue+0x30>
    123c:	71 c0       	rjmp	.+226    	; 0x1320 <DIO_u8GetPinValue+0x112>
	{
	 switch(copy_u8PortId)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3f 83       	std	Y+7, r19	; 0x07
    1246:	2e 83       	std	Y+6, r18	; 0x06
    1248:	4e 81       	ldd	r20, Y+6	; 0x06
    124a:	5f 81       	ldd	r21, Y+7	; 0x07
    124c:	41 30       	cpi	r20, 0x01	; 1
    124e:	51 05       	cpc	r21, r1
    1250:	59 f1       	breq	.+86     	; 0x12a8 <DIO_u8GetPinValue+0x9a>
    1252:	8e 81       	ldd	r24, Y+6	; 0x06
    1254:	9f 81       	ldd	r25, Y+7	; 0x07
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	91 05       	cpc	r25, r1
    125a:	34 f4       	brge	.+12     	; 0x1268 <DIO_u8GetPinValue+0x5a>
    125c:	2e 81       	ldd	r18, Y+6	; 0x06
    125e:	3f 81       	ldd	r19, Y+7	; 0x07
    1260:	21 15       	cp	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	69 f0       	breq	.+26     	; 0x1280 <DIO_u8GetPinValue+0x72>
    1266:	5d c0       	rjmp	.+186    	; 0x1322 <DIO_u8GetPinValue+0x114>
    1268:	4e 81       	ldd	r20, Y+6	; 0x06
    126a:	5f 81       	ldd	r21, Y+7	; 0x07
    126c:	42 30       	cpi	r20, 0x02	; 2
    126e:	51 05       	cpc	r21, r1
    1270:	79 f1       	breq	.+94     	; 0x12d0 <DIO_u8GetPinValue+0xc2>
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <DIO_u8GetPinValue+0x70>
    127c:	3d c0       	rjmp	.+122    	; 0x12f8 <DIO_u8GetPinValue+0xea>
    127e:	51 c0       	rjmp	.+162    	; 0x1322 <DIO_u8GetPinValue+0x114>
	  {
		 case DIO_U8_PORTA:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8GetPinValue+0x8a>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8GetPinValue+0x86>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	ec 81       	ldd	r30, Y+4	; 0x04
    12a2:	fd 81       	ldd	r31, Y+5	; 0x05
    12a4:	80 83       	st	Z, r24
    12a6:	3d c0       	rjmp	.+122    	; 0x1322 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTB:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
    12a8:	e6 e3       	ldi	r30, 0x36	; 54
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8GetPinValue+0xb2>
    12bc:	55 95       	asr	r21
    12be:	47 95       	ror	r20
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8GetPinValue+0xae>
    12c4:	ca 01       	movw	r24, r20
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ca:	fd 81       	ldd	r31, Y+5	; 0x05
    12cc:	80 83       	st	Z, r24
    12ce:	29 c0       	rjmp	.+82     	; 0x1322 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTC:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
    12d0:	e3 e3       	ldi	r30, 0x33	; 51
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8GetPinValue+0xda>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8GetPinValue+0xd6>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	ec 81       	ldd	r30, Y+4	; 0x04
    12f2:	fd 81       	ldd	r31, Y+5	; 0x05
    12f4:	80 83       	st	Z, r24
    12f6:	15 c0       	rjmp	.+42     	; 0x1322 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTD:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
    12f8:	e0 e3       	ldi	r30, 0x30	; 48
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8GetPinValue+0x102>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8GetPinValue+0xfe>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	80 83       	st	Z, r24
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <DIO_u8GetPinValue+0x114>
		 break;
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1320:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	27 96       	adiw	r28, 0x07	; 7
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <DIO_u8SetPortDirction>:

u8 DIO_u8SetPortDirction(u8 copy_u8PortId,u8 copy_u8PortDirction )
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	2d 97       	sbiw	r28, 0x0d	; 13
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	8a 83       	std	Y+2, r24	; 0x02
    134c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortDirction<=DIO_U8_OUTPUT))
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	08 f0       	brcs	.+2      	; 0x135a <DIO_u8SetPortDirction+0x24>
    1358:	6b c0       	rjmp	.+214    	; 0x1430 <DIO_u8SetPortDirction+0xfa>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	08 f0       	brcs	.+2      	; 0x1362 <DIO_u8SetPortDirction+0x2c>
    1360:	67 c0       	rjmp	.+206    	; 0x1430 <DIO_u8SetPortDirction+0xfa>
	{
		switch(copy_u8PortId)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3d 87       	std	Y+13, r19	; 0x0d
    136a:	2c 87       	std	Y+12, r18	; 0x0c
    136c:	8c 85       	ldd	r24, Y+12	; 0x0c
    136e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	39 f1       	breq	.+78     	; 0x13c4 <DIO_u8SetPortDirction+0x8e>
    1376:	2c 85       	ldd	r18, Y+12	; 0x0c
    1378:	3d 85       	ldd	r19, Y+13	; 0x0d
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <DIO_u8SetPortDirction+0x54>
    1380:	8c 85       	ldd	r24, Y+12	; 0x0c
    1382:	9d 85       	ldd	r25, Y+13	; 0x0d
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 f0       	breq	.+24     	; 0x13a0 <DIO_u8SetPortDirction+0x6a>
    1388:	54 c0       	rjmp	.+168    	; 0x1432 <DIO_u8SetPortDirction+0xfc>
    138a:	2c 85       	ldd	r18, Y+12	; 0x0c
    138c:	3d 85       	ldd	r19, Y+13	; 0x0d
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	51 f1       	breq	.+84     	; 0x13e8 <DIO_u8SetPortDirction+0xb2>
    1394:	8c 85       	ldd	r24, Y+12	; 0x0c
    1396:	9d 85       	ldd	r25, Y+13	; 0x0d
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	b9 f1       	breq	.+110    	; 0x140c <DIO_u8SetPortDirction+0xd6>
    139e:	49 c0       	rjmp	.+146    	; 0x1432 <DIO_u8SetPortDirction+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	41 f4       	brne	.+16     	; 0x13b6 <DIO_u8SetPortDirction+0x80>
			     { 
			     SET_PORT(DIO_U8_DDRA_REG);	
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	90 81       	ld	r25, Z
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	80 83       	st	Z, r24
    13b4:	3e c0       	rjmp	.+124    	; 0x1432 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRA_REG);
    13b6:	ea e3       	ldi	r30, 0x3A	; 58
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	20 81       	ld	r18, Z
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	10 82       	st	Z, r1
    13c2:	37 c0       	rjmp	.+110    	; 0x1432 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	41 f4       	brne	.+16     	; 0x13da <DIO_u8SetPortDirction+0xa4>
			     { 
			     SET_PORT(DIO_U8_DDRB_REG);	
    13ca:	e7 e3       	ldi	r30, 0x37	; 55
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	30 81       	ld	r19, Z
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	80 83       	st	Z, r24
    13d8:	2c c0       	rjmp	.+88     	; 0x1432 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRB_REG);
    13da:	e7 e3       	ldi	r30, 0x37	; 55
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	e7 e3       	ldi	r30, 0x37	; 55
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	10 82       	st	Z, r1
    13e6:	25 c0       	rjmp	.+74     	; 0x1432 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	41 f4       	brne	.+16     	; 0x13fe <DIO_u8SetPortDirction+0xc8>
			     { 
			     SET_PORT(DIO_U8_DDRC_REG);	
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	90 81       	ld	r25, Z
    13f4:	e4 e3       	ldi	r30, 0x34	; 52
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	80 83       	st	Z, r24
    13fc:	1a c0       	rjmp	.+52     	; 0x1432 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRC_REG);
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	20 81       	ld	r18, Z
    1404:	e4 e3       	ldi	r30, 0x34	; 52
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
    140a:	13 c0       	rjmp	.+38     	; 0x1432 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	41 f4       	brne	.+16     	; 0x1422 <DIO_u8SetPortDirction+0xec>
			     { 
			     SET_PORT(DIO_U8_DDRD_REG);	
    1412:	e1 e3       	ldi	r30, 0x31	; 49
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	30 81       	ld	r19, Z
    1418:	e1 e3       	ldi	r30, 0x31	; 49
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	80 83       	st	Z, r24
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRD_REG);
    1422:	e1 e3       	ldi	r30, 0x31	; 49
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	e1 e3       	ldi	r30, 0x31	; 49
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	10 82       	st	Z, r1
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <DIO_u8SetPortDirction+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1430:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;	
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	2d 96       	adiw	r28, 0x0d	; 13
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2d 97       	sbiw	r28, 0x0d	; 13
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortValue<=DIO_U8_OUTPUT))
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	08 f0       	brcs	.+2      	; 0x146a <DIO_u8SetPortValue+0x24>
    1468:	6b c0       	rjmp	.+214    	; 0x1540 <DIO_u8SetPortValue+0xfa>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	08 f0       	brcs	.+2      	; 0x1472 <DIO_u8SetPortValue+0x2c>
    1470:	67 c0       	rjmp	.+206    	; 0x1540 <DIO_u8SetPortValue+0xfa>
	{
		switch(copy_u8PortId)
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3d 87       	std	Y+13, r19	; 0x0d
    147a:	2c 87       	std	Y+12, r18	; 0x0c
    147c:	8c 85       	ldd	r24, Y+12	; 0x0c
    147e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	91 05       	cpc	r25, r1
    1484:	39 f1       	breq	.+78     	; 0x14d4 <DIO_u8SetPortValue+0x8e>
    1486:	2c 85       	ldd	r18, Y+12	; 0x0c
    1488:	3d 85       	ldd	r19, Y+13	; 0x0d
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	2c f4       	brge	.+10     	; 0x149a <DIO_u8SetPortValue+0x54>
    1490:	8c 85       	ldd	r24, Y+12	; 0x0c
    1492:	9d 85       	ldd	r25, Y+13	; 0x0d
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_u8SetPortValue+0x6a>
    1498:	54 c0       	rjmp	.+168    	; 0x1542 <DIO_u8SetPortValue+0xfc>
    149a:	2c 85       	ldd	r18, Y+12	; 0x0c
    149c:	3d 85       	ldd	r19, Y+13	; 0x0d
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	51 f1       	breq	.+84     	; 0x14f8 <DIO_u8SetPortValue+0xb2>
    14a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	91 05       	cpc	r25, r1
    14ac:	b9 f1       	breq	.+110    	; 0x151c <DIO_u8SetPortValue+0xd6>
    14ae:	49 c0       	rjmp	.+146    	; 0x1542 <DIO_u8SetPortValue+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	41 f4       	brne	.+16     	; 0x14c6 <DIO_u8SetPortValue+0x80>
			     {
			     SET_PORT(DIO_U8_PORTA_REG);
    14b6:	eb e3       	ldi	r30, 0x3B	; 59
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	90 81       	ld	r25, Z
    14bc:	eb e3       	ldi	r30, 0x3B	; 59
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	80 83       	st	Z, r24
    14c4:	3e c0       	rjmp	.+124    	; 0x1542 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTA_REG);
    14c6:	eb e3       	ldi	r30, 0x3B	; 59
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	20 81       	ld	r18, Z
    14cc:	eb e3       	ldi	r30, 0x3B	; 59
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	10 82       	st	Z, r1
    14d2:	37 c0       	rjmp	.+110    	; 0x1542 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	41 f4       	brne	.+16     	; 0x14ea <DIO_u8SetPortValue+0xa4>
			     { 
			     SET_PORT(DIO_U8_PORTB_REG);
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	30 81       	ld	r19, Z
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	80 83       	st	Z, r24
    14e8:	2c c0       	rjmp	.+88     	; 0x1542 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTB_REG);
    14ea:	e8 e3       	ldi	r30, 0x38	; 56
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	e8 e3       	ldi	r30, 0x38	; 56
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	10 82       	st	Z, r1
    14f6:	25 c0       	rjmp	.+74     	; 0x1542 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	41 f4       	brne	.+16     	; 0x150e <DIO_u8SetPortValue+0xc8>
			     { 
			     SET_PORT(DIO_U8_PORTC_REG);
    14fe:	e5 e3       	ldi	r30, 0x35	; 53
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	90 81       	ld	r25, Z
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	80 83       	st	Z, r24
    150c:	1a c0       	rjmp	.+52     	; 0x1542 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTC_REG);
    150e:	e5 e3       	ldi	r30, 0x35	; 53
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	20 81       	ld	r18, Z
    1514:	e5 e3       	ldi	r30, 0x35	; 53
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	10 82       	st	Z, r1
    151a:	13 c0       	rjmp	.+38     	; 0x1542 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	41 f4       	brne	.+16     	; 0x1532 <DIO_u8SetPortValue+0xec>
			     { 
			     SET_PORT(DIO_U8_PORTD_REG);
    1522:	e2 e3       	ldi	r30, 0x32	; 50
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	30 81       	ld	r19, Z
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	80 83       	st	Z, r24
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTD_REG);
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	e2 e3       	ldi	r30, 0x32	; 50
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	10 82       	st	Z, r1
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <DIO_u8SetPortValue+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    1540:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	2d 96       	adiw	r28, 0x0d	; 13
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8PortId, u8 *copy_pu8PortValue)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <DIO_u8GetPortValue+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <DIO_u8GetPortValue+0x8>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <DIO_u8GetPortValue+0xa>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	7c 83       	std	Y+4, r23	; 0x04
    1568:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_U8_PORTD)
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	d8 f5       	brcc	.+118    	; 0x15ea <DIO_u8GetPortValue+0x94>
	{
		switch(copy_u8PortId)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3e 83       	std	Y+6, r19	; 0x06
    157c:	2d 83       	std	Y+5, r18	; 0x05
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	e1 f0       	breq	.+56     	; 0x15c0 <DIO_u8GetPortValue+0x6a>
    1588:	2d 81       	ldd	r18, Y+5	; 0x05
    158a:	3e 81       	ldd	r19, Y+6	; 0x06
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	2c f4       	brge	.+10     	; 0x159c <DIO_u8GetPortValue+0x46>
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 f0       	breq	.+24     	; 0x15b2 <DIO_u8GetPortValue+0x5c>
    159a:	28 c0       	rjmp	.+80     	; 0x15ec <DIO_u8GetPortValue+0x96>
    159c:	2d 81       	ldd	r18, Y+5	; 0x05
    159e:	3e 81       	ldd	r19, Y+6	; 0x06
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <DIO_u8GetPortValue+0x78>
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	b1 f0       	breq	.+44     	; 0x15dc <DIO_u8GetPortValue+0x86>
    15b0:	1d c0       	rjmp	.+58     	; 0x15ec <DIO_u8GetPortValue+0x96>
		{
			case DIO_U8_PORTA:
			   
			   *copy_pu8PortValue = GET_PORT(DIO_U8_PORTA_REG);
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ba:	fc 81       	ldd	r31, Y+4	; 0x04
    15bc:	80 83       	st	Z, r24
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <DIO_u8GetPortValue+0x96>
			    
     		break;
			case DIO_U8_PORTB:
			    
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTB_REG);
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	eb 81       	ldd	r30, Y+3	; 0x03
    15c8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ca:	80 83       	st	Z, r24
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <DIO_u8GetPortValue+0x96>
			
     		break;
			case DIO_U8_PORTC:
			     
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTC_REG);
    15ce:	e5 e3       	ldi	r30, 0x35	; 53
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	80 83       	st	Z, r24
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <DIO_u8GetPortValue+0x96>
			   
     		break;
			case DIO_U8_PORTD:
			 
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTD_REG);
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	eb 81       	ldd	r30, Y+3	; 0x03
    15e4:	fc 81       	ldd	r31, Y+4	; 0x04
    15e6:	80 83       	st	Z, r24
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <DIO_u8GetPortValue+0x96>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
    15ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    15ee:	26 96       	adiw	r28, 0x06	; 6
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <DIO_u8AnalogPort>:
u8 DIO_u8AnalogPort(u8 copy_u8PortId,u8 copy_u8PortValue)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <DIO_u8AnalogPort+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_u8AnalogPort+0x8>
    1608:	0f 92       	push	r0
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	8a 83       	std	Y+2, r24	; 0x02
    1610:	6b 83       	std	Y+3, r22	; 0x03
    u8	Local_u8ErorrState =STD_TYPES_OK;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD)  &&  (copy_u8PortValue<= 0xff))
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	98 f5       	brcc	.+102    	; 0x1682 <DIO_u8AnalogPort+0x82>
	{
		switch(copy_u8PortId)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3d 83       	std	Y+5, r19	; 0x05
    1624:	2c 83       	std	Y+4, r18	; 0x04
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	d1 f0       	breq	.+52     	; 0x1664 <DIO_u8AnalogPort+0x64>
    1630:	2c 81       	ldd	r18, Y+4	; 0x04
    1632:	3d 81       	ldd	r19, Y+5	; 0x05
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <DIO_u8AnalogPort+0x44>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 f0       	breq	.+24     	; 0x165a <DIO_u8AnalogPort+0x5a>
    1642:	20 c0       	rjmp	.+64     	; 0x1684 <DIO_u8AnalogPort+0x84>
    1644:	2c 81       	ldd	r18, Y+4	; 0x04
    1646:	3d 81       	ldd	r19, Y+5	; 0x05
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	81 f0       	breq	.+32     	; 0x166e <DIO_u8AnalogPort+0x6e>
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <DIO_u8AnalogPort+0x78>
    1658:	15 c0       	rjmp	.+42     	; 0x1684 <DIO_u8AnalogPort+0x84>
		{
		case DIO_U8_PORTA:

			DIO_U8_PORTA_REG = copy_u8PortValue;
    165a:	eb e3       	ldi	r30, 0x3B	; 59
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	80 83       	st	Z, r24
    1662:	10 c0       	rjmp	.+32     	; 0x1684 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTB:

			 DIO_U8_PORTB_REG = copy_u8PortValue;
    1664:	e8 e3       	ldi	r30, 0x38	; 56
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	80 83       	st	Z, r24
    166c:	0b c0       	rjmp	.+22     	; 0x1684 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTC:

			DIO_U8_PORTC_REG = copy_u8PortValue;
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	80 83       	st	Z, r24
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTD:

			 DIO_U8_PORTD_REG = copy_u8PortValue;
    1678:	e2 e3       	ldi	r30, 0x32	; 50
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	80 83       	st	Z, r24
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <DIO_u8AnalogPort+0x84>
		break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK;
    1682:	19 82       	std	Y+1, r1	; 0x01
	}
		return Local_u8ErorrState;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <GINT_u8_enable>:

#include  "GINT_interface.h"
#include  "GINT_private.h"

void GINT_u8_enable(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_U8_STAT_REG,GINT_U8_PIN7);
    169e:	af e5       	ldi	r26, 0x5F	; 95
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ef e5       	ldi	r30, 0x5F	; 95
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 68       	ori	r24, 0x80	; 128
    16aa:	8c 93       	st	X, r24
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <GINT_u8_desble>:

void GINT_u8_desble(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	CLE_BIT(GINT_U8_STAT_REG,GINT_U8_PIN7);
    16ba:	af e5       	ldi	r26, 0x5F	; 95
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e5       	ldi	r30, 0x5F	; 95
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 77       	andi	r24, 0x7F	; 127
    16c6:	8c 93       	st	X, r24
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <KPD_u8getswitch>:
#include "KPD_config.h" 



u8 KPD_u8getswitch(u8 * copy_pu8returnsw)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	27 97       	sbiw	r28, 0x07	; 7
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	9f 83       	std	Y+7, r25	; 0x07
    16e4:	8e 83       	std	Y+6, r24	; 0x06
static u8 local_au8rowspinarr[KPD_U8ROWS_NB]=KPD_ROWS_PINS;
static u8 local_au8colmspinarr[KPD_U8COLM_NB]=KPD_COLM_PINS;
static u8 local_au8keypadvalus[KPD_U8ROWS_NB][KPD_U8COLM_NB]=KPD_KEYS; 
  u8 local_u8pinvalue,local_u8flg=0;
    16e6:	1c 82       	std	Y+4, r1	; 0x04
  u8 local_u8returnstate = STD_TYPES_OK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	8b 83       	std	Y+3, r24	; 0x03
  if(copy_pu8returnsw!=NULL)
    16ec:	8e 81       	ldd	r24, Y+6	; 0x06
    16ee:	9f 81       	ldd	r25, Y+7	; 0x07
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <KPD_u8getswitch+0x28>
    16f4:	6e c0       	rjmp	.+220    	; 0x17d2 <KPD_u8getswitch+0x104>
  {
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
    16f6:	ee 81       	ldd	r30, Y+6	; 0x06
    16f8:	ff 81       	ldd	r31, Y+7	; 0x07
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
    16fe:	1a 82       	std	Y+2, r1	; 0x02
    1700:	63 c0       	rjmp	.+198    	; 0x17c8 <KPD_u8getswitch+0xfa>
	  {
		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_LOW); 
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	fc 01       	movw	r30, r24
    170a:	eb 57       	subi	r30, 0x7B	; 123
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	90 81       	ld	r25, Z
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	69 2f       	mov	r22, r25
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
	  /*loop*/
	  for(u8 local_u8colcounter=0;local_u8colcounter<4;local_u8colcounter++)
    171a:	19 82       	std	Y+1, r1	; 0x01
    171c:	3f c0       	rjmp	.+126    	; 0x179c <KPD_u8getswitch+0xce>
	  {
		DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	fc 01       	movw	r30, r24
    1726:	ef 57       	subi	r30, 0x7F	; 127
    1728:	fe 4f       	sbci	r31, 0xFE	; 254
    172a:	90 81       	ld	r25, Z
    172c:	9e 01       	movw	r18, r28
    172e:	2b 5f       	subi	r18, 0xFB	; 251
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	69 2f       	mov	r22, r25
    1736:	a9 01       	movw	r20, r18
    1738:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8GetPinValue>
        if(local_u8pinvalue==DIO_U8_LOW)       
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	88 23       	and	r24, r24
    1740:	51 f5       	brne	.+84     	; 0x1796 <KPD_u8getswitch+0xc8>
		{
			* copy_pu8returnsw =local_au8keypadvalus[local_u8rowcounter][local_u8colcounter];
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	48 2f       	mov	r20, r24
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	ca 01       	movw	r24, r20
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	fc 01       	movw	r30, r24
    175e:	ef 58       	subi	r30, 0x8F	; 143
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	80 81       	ld	r24, Z
    1764:	ee 81       	ldd	r30, Y+6	; 0x06
    1766:	ff 81       	ldd	r31, Y+7	; 0x07
    1768:	80 83       	st	Z, r24
    176a:	0f c0       	rjmp	.+30     	; 0x178a <KPD_u8getswitch+0xbc>

	   while(local_u8pinvalue==DIO_U8_LOW)
	   {
	   DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	fc 01       	movw	r30, r24
    1774:	ef 57       	subi	r30, 0x7F	; 127
    1776:	fe 4f       	sbci	r31, 0xFE	; 254
    1778:	90 81       	ld	r25, Z
    177a:	9e 01       	movw	r18, r28
    177c:	2b 5f       	subi	r18, 0xFB	; 251
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	69 2f       	mov	r22, r25
    1784:	a9 01       	movw	r20, r18
    1786:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
        if(local_u8pinvalue==DIO_U8_LOW)       
		{
			* copy_pu8returnsw =local_au8keypadvalus[local_u8rowcounter][local_u8colcounter];

	   while(local_u8pinvalue==DIO_U8_LOW)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	88 23       	and	r24, r24
    178e:	71 f3       	breq	.-36     	; 0x176c <KPD_u8getswitch+0x9e>
	   {
	   DIO_u8GetPinValue(DIO_U8_PORTD,local_au8colmspinarr[local_u8colcounter],&local_u8pinvalue);
	   }
	   local_u8flg=1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	8c 83       	std	Y+4, r24	; 0x04
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <KPD_u8getswitch+0xd6>
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
	  {
		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_LOW); 
	  /*loop*/
	  for(u8 local_u8colcounter=0;local_u8colcounter<4;local_u8colcounter++)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	08 f4       	brcc	.+2      	; 0x17a4 <KPD_u8getswitch+0xd6>
    17a2:	bd cf       	rjmp	.-134    	; 0x171e <KPD_u8getswitch+0x50>
	   local_u8flg=1;
        break;	   
	}
	   
	  }
	  		 DIO_u8SetPinValue(DIO_U8_PORTB,local_au8rowspinarr[local_u8rowcounter],DIO_U8_HIGH);
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	eb 57       	subi	r30, 0x7B	; 123
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	90 81       	ld	r25, Z
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	69 2f       	mov	r22, r25
    17b6:	41 e0       	ldi	r20, 0x01	; 1
    17b8:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
             if(local_u8flg==1)
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <KPD_u8getswitch+0x106>
  u8 local_u8pinvalue,local_u8flg=0;
  u8 local_u8returnstate = STD_TYPES_OK;
  if(copy_pu8returnsw!=NULL)
  {
	  * copy_pu8returnsw =KPD_U8_NOT_PRESSED;
	  for(u8 local_u8rowcounter=0;local_u8rowcounter<4;local_u8rowcounter++)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <KPD_u8getswitch+0x102>
    17ce:	99 cf       	rjmp	.-206    	; 0x1702 <KPD_u8getswitch+0x34>
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <KPD_u8getswitch+0x106>
	   }
	  
  }	  
  else
  {
	   local_u8returnstate = STD_TYPES_NOK;
    17d2:	1b 82       	std	Y+3, r1	; 0x03
  
  }
  return local_u8returnstate;
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
	
	
}
    17d6:	27 96       	adiw	r28, 0x07	; 7
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <LCD_voidInit>:
#include "LCD_config.h" 



void LCD_voidInit(void)
{
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	c6 54       	subi	r28, 0x46	; 70
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	fe 01       	movw	r30, r28
    1804:	ed 5b       	subi	r30, 0xBD	; 189
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	ac e0       	ldi	r26, 0x0C	; 12
    180e:	b2 e4       	ldi	r27, 0x42	; 66
    1810:	80 83       	st	Z, r24
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	a2 83       	std	Z+2, r26	; 0x02
    1816:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	8e 01       	movw	r16, r28
    181a:	01 5c       	subi	r16, 0xC1	; 193
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	ed 5b       	subi	r30, 0xBD	; 189
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	f8 01       	movw	r30, r16
    183e:	80 83       	st	Z, r24
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	a2 83       	std	Z+2, r26	; 0x02
    1844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1846:	fe 01       	movw	r30, r28
    1848:	ff 96       	adiw	r30, 0x3f	; 63
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <LCD_voidInit+0x84>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9e af       	std	Y+62, r25	; 0x3e
    1868:	8d af       	std	Y+61, r24	; 0x3d
    186a:	46 c0       	rjmp	.+140    	; 0x18f8 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    186c:	fe 01       	movw	r30, r28
    186e:	ff 96       	adiw	r30, 0x3f	; 63
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	64 f5       	brge	.+88     	; 0x18e0 <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5b       	subi	r30, 0xBD	; 189
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e2       	ldi	r20, 0x20	; 32
    189c:	51 e4       	ldi	r21, 0x41	; 65
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	9e af       	std	Y+62, r25	; 0x3e
    18b4:	8d af       	std	Y+61, r24	; 0x3d
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <LCD_voidInit+0xee>
    18b8:	88 ec       	ldi	r24, 0xC8	; 200
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9c af       	std	Y+60, r25	; 0x3c
    18be:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    18c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <LCD_voidInit+0xdc>
    18c8:	9c af       	std	Y+60, r25	; 0x3c
    18ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	9e af       	std	Y+62, r25	; 0x3e
    18d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	69 f7       	brne	.-38     	; 0x18b8 <LCD_voidInit+0xd0>
    18de:	16 c0       	rjmp	.+44     	; 0x190c <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e0:	fe 01       	movw	r30, r28
    18e2:	ff 96       	adiw	r30, 0x3f	; 63
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e af       	std	Y+62, r25	; 0x3e
    18f6:	8d af       	std	Y+61, r24	; 0x3d
    18f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    18fc:	9a af       	std	Y+58, r25	; 0x3a
    18fe:	89 af       	std	Y+57, r24	; 0x39
    1900:	89 ad       	ldd	r24, Y+57	; 0x39
    1902:	9a ad       	ldd	r25, Y+58	; 0x3a
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <LCD_voidInit+0x11c>
    1908:	9a af       	std	Y+58, r25	; 0x3a
    190a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
#if LCD_U8_MOODE == LCD_U8_8_BIT_MOODE
	LCD_voidSendCmd(0x38);
	_delay_ms(1);
#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(0b0010);
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	0e 94 09 13 	call	0x2612	; 0x2612 <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	62 e0       	ldi	r22, 0x02	; 2
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	bf e3       	ldi	r27, 0x3F	; 63
    1938:	8d ab       	std	Y+53, r24	; 0x35
    193a:	9e ab       	std	Y+54, r25	; 0x36
    193c:	af ab       	std	Y+55, r26	; 0x37
    193e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	6d a9       	ldd	r22, Y+53	; 0x35
    1942:	7e a9       	ldd	r23, Y+54	; 0x36
    1944:	8f a9       	ldd	r24, Y+55	; 0x37
    1946:	98 ad       	ldd	r25, Y+56	; 0x38
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	89 ab       	std	Y+49, r24	; 0x31
    195a:	9a ab       	std	Y+50, r25	; 0x32
    195c:	ab ab       	std	Y+51, r26	; 0x33
    195e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1960:	69 a9       	ldd	r22, Y+49	; 0x31
    1962:	7a a9       	ldd	r23, Y+50	; 0x32
    1964:	8b a9       	ldd	r24, Y+51	; 0x33
    1966:	9c a9       	ldd	r25, Y+52	; 0x34
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <LCD_voidInit+0x19a>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 ab       	std	Y+48, r25	; 0x30
    197e:	8f a7       	std	Y+47, r24	; 0x2f
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <LCD_voidInit+0x218>
	else if (__tmp > 65535)
    1982:	69 a9       	ldd	r22, Y+49	; 0x31
    1984:	7a a9       	ldd	r23, Y+50	; 0x32
    1986:	8b a9       	ldd	r24, Y+51	; 0x33
    1988:	9c a9       	ldd	r25, Y+52	; 0x34
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <LCD_voidInit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	6d a9       	ldd	r22, Y+53	; 0x35
    199c:	7e a9       	ldd	r23, Y+54	; 0x36
    199e:	8f a9       	ldd	r24, Y+55	; 0x37
    19a0:	98 ad       	ldd	r25, Y+56	; 0x38
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	98 ab       	std	Y+48, r25	; 0x30
    19c0:	8f a7       	std	Y+47, r24	; 0x2f
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <LCD_voidInit+0x1fa>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9e a7       	std	Y+46, r25	; 0x2e
    19ca:	8d a7       	std	Y+45, r24	; 0x2d
    19cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_voidInit+0x1e8>
    19d4:	9e a7       	std	Y+46, r25	; 0x2e
    19d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19da:	98 a9       	ldd	r25, Y+48	; 0x30
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e4:	98 a9       	ldd	r25, Y+48	; 0x30
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <LCD_voidInit+0x1dc>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <LCD_voidInit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	69 a9       	ldd	r22, Y+49	; 0x31
    19ee:	7a a9       	ldd	r23, Y+50	; 0x32
    19f0:	8b a9       	ldd	r24, Y+51	; 0x33
    19f2:	9c a9       	ldd	r25, Y+52	; 0x34
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a02:	98 a9       	ldd	r25, Y+48	; 0x30
    1a04:	9c a7       	std	Y+44, r25	; 0x2c
    1a06:	8b a7       	std	Y+43, r24	; 0x2b
    1a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_voidInit+0x224>
    1a10:	9c a7       	std	Y+44, r25	; 0x2c
    1a12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	62 e0       	ldi	r22, 0x02	; 2
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	LCD_voidSendCmd(0b00101000);
    1a1e:	88 e2       	ldi	r24, 0x28	; 40
    1a20:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
#endif
	LCD_voidSendCmd(LCD_CURSOR_ON);
    1a24:	8e e0       	ldi	r24, 0x0E	; 14
    1a26:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e8       	ldi	r26, 0x80	; 128
    1a30:	bf e3       	ldi	r27, 0x3F	; 63
    1a32:	8f a3       	std	Y+39, r24	; 0x27
    1a34:	98 a7       	std	Y+40, r25	; 0x28
    1a36:	a9 a7       	std	Y+41, r26	; 0x29
    1a38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8b a3       	std	Y+35, r24	; 0x23
    1a54:	9c a3       	std	Y+36, r25	; 0x24
    1a56:	ad a3       	std	Y+37, r26	; 0x25
    1a58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a60:	9e a1       	ldd	r25, Y+38	; 0x26
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <LCD_voidInit+0x294>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9a a3       	std	Y+34, r25	; 0x22
    1a78:	89 a3       	std	Y+33, r24	; 0x21
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <LCD_voidInit+0x312>
	else if (__tmp > 65535)
    1a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a80:	8d a1       	ldd	r24, Y+37	; 0x25
    1a82:	9e a1       	ldd	r25, Y+38	; 0x26
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <LCD_voidInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	6f a1       	ldd	r22, Y+39	; 0x27
    1a96:	78 a5       	ldd	r23, Y+40	; 0x28
    1a98:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9a a3       	std	Y+34, r25	; 0x22
    1aba:	89 a3       	std	Y+33, r24	; 0x21
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <LCD_voidInit+0x2f4>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac8:	98 a1       	ldd	r25, Y+32	; 0x20
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_voidInit+0x2e2>
    1ace:	98 a3       	std	Y+32, r25	; 0x20
    1ad0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9a a3       	std	Y+34, r25	; 0x22
    1ada:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ade:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <LCD_voidInit+0x2d6>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <LCD_voidInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aea:	8d a1       	ldd	r24, Y+37	; 0x25
    1aec:	9e a1       	ldd	r25, Y+38	; 0x26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9a a3       	std	Y+34, r25	; 0x22
    1af8:	89 a3       	std	Y+33, r24	; 0x21
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	9a a1       	ldd	r25, Y+34	; 0x22
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
    1b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_voidInit+0x31e>
    1b0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCmd(LCD_CLEAR);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a0 e0       	ldi	r26, 0x00	; 0
    1b1a:	b0 e4       	ldi	r27, 0x40	; 64
    1b1c:	89 8f       	std	Y+25, r24	; 0x19
    1b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b20:	ab 8f       	std	Y+27, r26	; 0x1b
    1b22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	69 8d       	ldd	r22, Y+25	; 0x19
    1b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8d 8b       	std	Y+21, r24	; 0x15
    1b3e:	9e 8b       	std	Y+22, r25	; 0x16
    1b40:	af 8b       	std	Y+23, r26	; 0x17
    1b42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b44:	6d 89       	ldd	r22, Y+21	; 0x15
    1b46:	7e 89       	ldd	r23, Y+22	; 0x16
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <LCD_voidInit+0x37e>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	3f c0       	rjmp	.+126    	; 0x1be4 <LCD_voidInit+0x3fc>
	else if (__tmp > 65535)
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <LCD_voidInit+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <LCD_voidInit+0x3de>
    1ba8:	88 ec       	ldi	r24, 0xC8	; 200
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
    1bae:	89 8b       	std	Y+17, r24	; 0x11
    1bb0:	89 89       	ldd	r24, Y+17	; 0x11
    1bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_voidInit+0x3cc>
    1bb8:	9a 8b       	std	Y+18, r25	; 0x12
    1bba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <LCD_voidInit+0x3c0>
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <LCD_voidInit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9c 8b       	std	Y+20, r25	; 0x14
    1be2:	8b 8b       	std	Y+19, r24	; 0x13
    1be4:	8b 89       	ldd	r24, Y+19	; 0x13
    1be6:	9c 89       	ldd	r25, Y+20	; 0x14
    1be8:	98 8b       	std	Y+16, r25	; 0x10
    1bea:	8f 87       	std	Y+15, r24	; 0x0f
    1bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bee:	98 89       	ldd	r25, Y+16	; 0x10
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_voidInit+0x408>
    1bf4:	98 8b       	std	Y+16, r25	; 0x10
    1bf6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCmd(0x06);
    1bf8:	86 e0       	ldi	r24, 0x06	; 6
    1bfa:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e8       	ldi	r26, 0x80	; 128
    1c04:	bf e3       	ldi	r27, 0x3F	; 63
    1c06:	8b 87       	std	Y+11, r24	; 0x0b
    1c08:	9c 87       	std	Y+12, r25	; 0x0c
    1c0a:	ad 87       	std	Y+13, r26	; 0x0d
    1c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8f 83       	std	Y+7, r24	; 0x07
    1c28:	98 87       	std	Y+8, r25	; 0x08
    1c2a:	a9 87       	std	Y+9, r26	; 0x09
    1c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c30:	78 85       	ldd	r23, Y+8	; 0x08
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <LCD_voidInit+0x468>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <LCD_voidInit+0x4e6>
	else if (__tmp > 65535)
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <LCD_voidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_voidInit+0x4c8>
    1c92:	88 ec       	ldi	r24, 0xC8	; 200
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_voidInit+0x4b6>
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <LCD_voidInit+0x4aa>
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <LCD_voidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_voidInit+0x4f2>
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	

}
    1ce2:	ca 5b       	subi	r28, 0xBA	; 186
    1ce4:	df 4f       	sbci	r29, 0xFF	; 255
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8cmnd)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	6d 97       	sbiw	r28, 0x1d	; 29
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_LOW);
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd>>4);
    1d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d26:	82 95       	swap	r24
    1d28:	8f 70       	andi	r24, 0x0F	; 15
    1d2a:	0e 94 09 13 	call	0x2612	; 0x2612 <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	62 e0       	ldi	r22, 0x02	; 2
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	89 8f       	std	Y+25, r24	; 0x19
    1d42:	9a 8f       	std	Y+26, r25	; 0x1a
    1d44:	ab 8f       	std	Y+27, r26	; 0x1b
    1d46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a ef       	ldi	r20, 0xFA	; 250
    1d56:	54 e4       	ldi	r21, 0x44	; 68
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8d 8b       	std	Y+21, r24	; 0x15
    1d62:	9e 8b       	std	Y+22, r25	; 0x16
    1d64:	af 8b       	std	Y+23, r26	; 0x17
    1d66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d68:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <LCD_voidSendCmd+0x90>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <LCD_voidSendCmd+0x10e>
	else if (__tmp > 65535)
    1d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d90:	98 8d       	ldd	r25, Y+24	; 0x18
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <LCD_voidSendCmd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	69 8d       	ldd	r22, Y+25	; 0x19
    1da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_voidSendCmd+0xf0>
    1dcc:	88 ec       	ldi	r24, 0xC8	; 200
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9a 8b       	std	Y+18, r25	; 0x12
    1dd2:	89 8b       	std	Y+17, r24	; 0x11
    1dd4:	89 89       	ldd	r24, Y+17	; 0x11
    1dd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_voidSendCmd+0xde>
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9c 8b       	std	Y+20, r25	; 0x14
    1de8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <LCD_voidSendCmd+0xd2>
    1df2:	14 c0       	rjmp	.+40     	; 0x1e1c <LCD_voidSendCmd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0c:	98 8b       	std	Y+16, r25	; 0x10
    1e0e:	8f 87       	std	Y+15, r24	; 0x0f
    1e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e12:	98 89       	ldd	r25, Y+16	; 0x10
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_voidSendCmd+0x11a>
    1e18:	98 8b       	std	Y+16, r25	; 0x10
    1e1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	62 e0       	ldi	r22, 0x02	; 2
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(Copy_u8cmnd);
    1e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e28:	0e 94 09 13 	call	0x2612	; 0x2612 <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bf e3       	ldi	r27, 0x3F	; 63
    1e3e:	8b 87       	std	Y+11, r24	; 0x0b
    1e40:	9c 87       	std	Y+12, r25	; 0x0c
    1e42:	ad 87       	std	Y+13, r26	; 0x0d
    1e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a ef       	ldi	r20, 0xFA	; 250
    1e54:	54 e4       	ldi	r21, 0x44	; 68
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	8f 83       	std	Y+7, r24	; 0x07
    1e60:	98 87       	std	Y+8, r25	; 0x08
    1e62:	a9 87       	std	Y+9, r26	; 0x09
    1e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <LCD_voidSendCmd+0x18e>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	3f c0       	rjmp	.+126    	; 0x1f06 <LCD_voidSendCmd+0x20c>
	else if (__tmp > 65535)
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	4c f5       	brge	.+82     	; 0x1ef2 <LCD_voidSendCmd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <LCD_voidSendCmd+0x1ee>
    1eca:	88 ec       	ldi	r24, 0xC8	; 200
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_voidSendCmd+0x1dc>
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	69 f7       	brne	.-38     	; 0x1eca <LCD_voidSendCmd+0x1d0>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <LCD_voidSendCmd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_voidSendCmd+0x218>
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>


#endif

}
    1f24:	6d 96       	adiw	r28, 0x1d	; 29
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <LCD_voidSendChar>:
void LCD_voidSendChar(u8 copy_u8data)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_PORT_CONTROL,E,DIO_U8_LOW);

#elif LCD_U8_MOODE == LCD_U8_4_BIT_MOODE

  	DIO_u8SetPinValue(RS_PORT,RS,DIO_U8_HIGH);
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(RW_PORT,RW,DIO_U8_LOW);
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data>>4);
    1f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f62:	82 95       	swap	r24
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	0e 94 09 13 	call	0x2612	; 0x2612 <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	62 e0       	ldi	r22, 0x02	; 2
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e8       	ldi	r26, 0x80	; 128
    1f7a:	bf e3       	ldi	r27, 0x3F	; 63
    1f7c:	89 8f       	std	Y+25, r24	; 0x19
    1f7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f80:	ab 8f       	std	Y+27, r26	; 0x1b
    1f82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	69 8d       	ldd	r22, Y+25	; 0x19
    1f86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8d 8b       	std	Y+21, r24	; 0x15
    1f9e:	9e 8b       	std	Y+22, r25	; 0x16
    1fa0:	af 8b       	std	Y+23, r26	; 0x17
    1fa2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <LCD_voidSendChar+0x90>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <LCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    1fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fca:	8f 89       	ldd	r24, Y+23	; 0x17
    1fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <LCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9c 8b       	std	Y+20, r25	; 0x14
    2004:	8b 8b       	std	Y+19, r24	; 0x13
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <LCD_voidSendChar+0xf0>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9a 8b       	std	Y+18, r25	; 0x12
    200e:	89 8b       	std	Y+17, r24	; 0x11
    2010:	89 89       	ldd	r24, Y+17	; 0x11
    2012:	9a 89       	ldd	r25, Y+18	; 0x12
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_voidSendChar+0xde>
    2018:	9a 8b       	std	Y+18, r25	; 0x12
    201a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <LCD_voidSendChar+0xd2>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <LCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6d 89       	ldd	r22, Y+21	; 0x15
    2032:	7e 89       	ldd	r23, Y+22	; 0x16
    2034:	8f 89       	ldd	r24, Y+23	; 0x17
    2036:	98 8d       	ldd	r25, Y+24	; 0x18
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	98 8b       	std	Y+16, r25	; 0x10
    204a:	8f 87       	std	Y+15, r24	; 0x0f
    204c:	8f 85       	ldd	r24, Y+15	; 0x0f
    204e:	98 89       	ldd	r25, Y+16	; 0x10
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_voidSendChar+0x11a>
    2054:	98 8b       	std	Y+16, r25	; 0x10
    2056:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	62 e0       	ldi	r22, 0x02	; 2
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

	Private_voidwriteHalfPort(copy_u8data);
    2062:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2064:	0e 94 09 13 	call	0x2612	; 0x2612 <Private_voidwriteHalfPort>

	DIO_u8SetPinValue(E_PORT,E,DIO_U8_HIGH);
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e8       	ldi	r26, 0x80	; 128
    2078:	bf e3       	ldi	r27, 0x3F	; 63
    207a:	8b 87       	std	Y+11, r24	; 0x0b
    207c:	9c 87       	std	Y+12, r25	; 0x0c
    207e:	ad 87       	std	Y+13, r26	; 0x0d
    2080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a ef       	ldi	r20, 0xFA	; 250
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8f 83       	std	Y+7, r24	; 0x07
    209c:	98 87       	std	Y+8, r25	; 0x08
    209e:	a9 87       	std	Y+9, r26	; 0x09
    20a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_voidSendChar+0x18e>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	3f c0       	rjmp	.+126    	; 0x2142 <LCD_voidSendChar+0x20c>
	else if (__tmp > 65535)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	4c f5       	brge	.+82     	; 0x212e <LCD_voidSendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <LCD_voidSendChar+0x1ee>
    2106:	88 ec       	ldi	r24, 0xC8	; 200
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_voidSendChar+0x1dc>
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <LCD_voidSendChar+0x1d0>
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <LCD_voidSendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_voidSendChar+0x218>
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinValue(E_PORT,E,DIO_U8_LOW);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	62 e0       	ldi	r22, 0x02	; 2
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>
#endif
}
    2160:	6d 96       	adiw	r28, 0x1d	; 29
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_VoidSendStr>:


void LCD_VoidSendStr(u8 * pu8_copystr)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <LCD_VoidSendStr+0x6>
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	9b 83       	std	Y+3, r25	; 0x03
    2180:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <LCD_VoidSendStr+0x30>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	fc 01       	movw	r30, r24
    2192:	e2 0f       	add	r30, r18
    2194:	f3 1f       	adc	r31, r19
    2196:	80 81       	ld	r24, Z
    2198:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
void LCD_VoidSendStr(u8 * pu8_copystr)
{
	u8 Local_u8loop;


		for(Local_u8loop=0;pu8_copystr[Local_u8loop] !='\0';Local_u8loop++)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	80 81       	ld	r24, Z
    21b4:	88 23       	and	r24, r24
    21b6:	39 f7       	brne	.-50     	; 0x2186 <LCD_VoidSendStr+0x14>
		{
			LCD_voidSendChar(pu8_copystr[Local_u8loop]);
		}
   }
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <LCD_voidSendNumber>:


void LCD_voidSendNumber(f32 copy_f32data)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	2e 97       	sbiw	r28, 0x0e	; 14
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	6b 87       	std	Y+11, r22	; 0x0b
    21da:	7c 87       	std	Y+12, r23	; 0x0c
    21dc:	8d 87       	std	Y+13, r24	; 0x0d
    21de:	9e 87       	std	Y+14, r25	; 0x0e


  u32 local_u32temp=0,reminder,local_u32copy;
    21e0:	1a 86       	std	Y+10, r1	; 0x0a
    21e2:	19 86       	std	Y+9, r1	; 0x09
  f32 local_f64copy;
  local_u32copy = (u32)copy_f32data;
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
  local_f64copy =  copy_f32data  - local_u32copy;
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	cc 01       	movw	r24, r24
    21fe:	a0 e0       	ldi	r26, 0x00	; 0
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    220a:	9b 01       	movw	r18, r22
    220c:	ac 01       	movw	r20, r24
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	ab 83       	std	Y+3, r26	; 0x03
    2224:	bc 83       	std	Y+4, r27	; 0x04
  if(copy_f32data==0)
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    223a:	88 23       	and	r24, r24
    223c:	21 f4       	brne	.+8      	; 0x2246 <LCD_voidSendNumber+0x82>
  {
	  LCD_voidSendChar('0');
    223e:	80 e3       	ldi	r24, 0x30	; 48
    2240:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
    2244:	e9 c0       	rjmp	.+466    	; 0x2418 <LCD_voidSendNumber+0x254>
  }
  else
  {
   if(local_f64copy == 0)
    2246:	69 81       	ldd	r22, Y+1	; 0x01
    2248:	7a 81       	ldd	r23, Y+2	; 0x02
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    225a:	88 23       	and	r24, r24
    225c:	09 f0       	breq	.+2      	; 0x2260 <LCD_voidSendNumber+0x9c>
    225e:	58 c0       	rjmp	.+176    	; 0x2310 <LCD_voidSendNumber+0x14c>
  {

	   local_u32copy=(local_u32copy*10)+1;
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	9c 01       	movw	r18, r24
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	c9 01       	movw	r24, r18
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	29 c0       	rjmp	.+82     	; 0x22d2 <LCD_voidSendNumber+0x10e>
	  while(local_u32copy!=0)
	  {
	  reminder = local_u32copy %10;
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	2a e0       	ldi	r18, 0x0A	; 10
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	b9 01       	movw	r22, r18
    228a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    228e:	98 87       	std	Y+8, r25	; 0x08
    2290:	8f 83       	std	Y+7, r24	; 0x07
	  local_u32copy /=10;
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	b9 01       	movw	r22, r18
    229c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
	  local_u32temp *=10;
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	9c 01       	movw	r18, r24
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	c9 01       	movw	r24, r18
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	82 0f       	add	r24, r18
    22bc:	93 1f       	adc	r25, r19
    22be:	9a 87       	std	Y+10, r25	; 0x0a
    22c0:	89 87       	std	Y+9, r24	; 0x09
	  local_u32temp =local_u32temp+reminder;
    22c2:	29 85       	ldd	r18, Y+9	; 0x09
    22c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    22c6:	8f 81       	ldd	r24, Y+7	; 0x07
    22c8:	98 85       	ldd	r25, Y+8	; 0x08
    22ca:	82 0f       	add	r24, r18
    22cc:	93 1f       	adc	r25, r19
    22ce:	9a 87       	std	Y+10, r25	; 0x0a
    22d0:	89 87       	std	Y+9, r24	; 0x09
  {
   if(local_f64copy == 0)
  {

	   local_u32copy=(local_u32copy*10)+1;
	  while(local_u32copy!=0)
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	99 f6       	brne	.-90     	; 0x2280 <LCD_voidSendNumber+0xbc>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <LCD_voidSendNumber+0x140>
	  local_u32temp =local_u32temp+reminder;

	  }
	  while(local_u32temp!=1)
	  {
		  LCD_voidSendChar(local_u32temp%10+'0');
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	b9 01       	movw	r22, r18
    22e6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    22ea:	80 5d       	subi	r24, 0xD0	; 208
    22ec:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
		  local_u32temp /=10;
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	b9 01       	movw	r22, r18
    22fa:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    22fe:	cb 01       	movw	r24, r22
    2300:	9a 87       	std	Y+10, r25	; 0x0a
    2302:	89 87       	std	Y+9, r24	; 0x09
	  local_u32copy /=10;
	  local_u32temp *=10;
	  local_u32temp =local_u32temp+reminder;

	  }
	  while(local_u32temp!=1)
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	91 05       	cpc	r25, r1
    230c:	39 f7       	brne	.-50     	; 0x22dc <LCD_voidSendNumber+0x118>
    230e:	84 c0       	rjmp	.+264    	; 0x2418 <LCD_voidSendNumber+0x254>
	  }

  }

  else {
	  copy_f32data *=1000;
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8b 87       	std	Y+11, r24	; 0x0b
    232a:	9c 87       	std	Y+12, r25	; 0x0c
    232c:	ad 87       	std	Y+13, r26	; 0x0d
    232e:	be 87       	std	Y+14, r27	; 0x0e
	  local_u32copy = (u32)copy_f32data;
    2330:	6b 85       	ldd	r22, Y+11	; 0x0b
    2332:	7c 85       	ldd	r23, Y+12	; 0x0c
    2334:	8d 85       	ldd	r24, Y+13	; 0x0d
    2336:	9e 85       	ldd	r25, Y+14	; 0x0e
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
	  local_u32copy +=1;
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
    234e:	29 c0       	rjmp	.+82     	; 0x23a2 <LCD_voidSendNumber+0x1de>
	  while(local_u32copy!=0)
	 	  {
	 	  reminder = local_u32copy %10;
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	2a e0       	ldi	r18, 0x0A	; 10
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	b9 01       	movw	r22, r18
    235a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    235e:	98 87       	std	Y+8, r25	; 0x08
    2360:	8f 83       	std	Y+7, r24	; 0x07
	 	  local_u32copy /=10;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	2a e0       	ldi	r18, 0x0A	; 10
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
	 	  local_u32temp *=10;
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	9c 01       	movw	r18, r24
    237c:	22 0f       	add	r18, r18
    237e:	33 1f       	adc	r19, r19
    2380:	c9 01       	movw	r24, r18
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	82 0f       	add	r24, r18
    238c:	93 1f       	adc	r25, r19
    238e:	9a 87       	std	Y+10, r25	; 0x0a
    2390:	89 87       	std	Y+9, r24	; 0x09
	 	  local_u32temp =local_u32temp+reminder;
    2392:	29 85       	ldd	r18, Y+9	; 0x09
    2394:	3a 85       	ldd	r19, Y+10	; 0x0a
    2396:	8f 81       	ldd	r24, Y+7	; 0x07
    2398:	98 85       	ldd	r25, Y+8	; 0x08
    239a:	82 0f       	add	r24, r18
    239c:	93 1f       	adc	r25, r19
    239e:	9a 87       	std	Y+10, r25	; 0x0a
    23a0:	89 87       	std	Y+9, r24	; 0x09

  else {
	  copy_f32data *=1000;
	  local_u32copy = (u32)copy_f32data;
	  local_u32copy +=1;
	  while(local_u32copy!=0)
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	99 f6       	brne	.-90     	; 0x2350 <LCD_voidSendNumber+0x18c>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <LCD_voidSendNumber+0x210>
	 	  local_u32temp =local_u32temp+reminder;

	 	  }
	 	  while(local_u32temp>199)
	 	  {
	 		  LCD_voidSendChar(local_u32temp%10+'0');
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	2a e0       	ldi	r18, 0x0A	; 10
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	b9 01       	movw	r22, r18
    23b6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    23ba:	80 5d       	subi	r24, 0xD0	; 208
    23bc:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
	 		  local_u32temp /=10;
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	2a e0       	ldi	r18, 0x0A	; 10
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	b9 01       	movw	r22, r18
    23ca:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    23ce:	cb 01       	movw	r24, r22
    23d0:	9a 87       	std	Y+10, r25	; 0x0a
    23d2:	89 87       	std	Y+9, r24	; 0x09
	 	  local_u32copy /=10;
	 	  local_u32temp *=10;
	 	  local_u32temp =local_u32temp+reminder;

	 	  }
	 	  while(local_u32temp>199)
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	88 3c       	cpi	r24, 0xC8	; 200
    23da:	91 05       	cpc	r25, r1
    23dc:	38 f7       	brcc	.-50     	; 0x23ac <LCD_voidSendNumber+0x1e8>
	 	  {
	 		  LCD_voidSendChar(local_u32temp%10+'0');
	 		  local_u32temp /=10;
	 	  }

    	  LCD_voidSendChar('.');
    23de:	8e e2       	ldi	r24, 0x2E	; 46
    23e0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
    23e4:	14 c0       	rjmp	.+40     	; 0x240e <LCD_voidSendNumber+0x24a>
	 	  while(local_u32temp!=1)
	 	  {
	 		  LCD_voidSendChar(local_u32temp%10+'0');
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	2a e0       	ldi	r18, 0x0A	; 10
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	b9 01       	movw	r22, r18
    23f0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    23f4:	80 5d       	subi	r24, 0xD0	; 208
    23f6:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
	 		  local_u32temp /=10;
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	2a e0       	ldi	r18, 0x0A	; 10
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	b9 01       	movw	r22, r18
    2404:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    2408:	cb 01       	movw	r24, r22
    240a:	9a 87       	std	Y+10, r25	; 0x0a
    240c:	89 87       	std	Y+9, r24	; 0x09
	 		  LCD_voidSendChar(local_u32temp%10+'0');
	 		  local_u32temp /=10;
	 	  }

    	  LCD_voidSendChar('.');
	 	  while(local_u32temp!=1)
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	91 05       	cpc	r25, r1
    2416:	39 f7       	brne	.-50     	; 0x23e6 <LCD_voidSendNumber+0x222>
	 	  }

  }

}
}
    2418:	2e 96       	adiw	r28, 0x0e	; 14
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <LCD_voidGotoXY>:
void LCD_voidGotoXY(u8 copy_u8line,u8 copy_u8pos)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <LCD_voidGotoXY+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LCD_voidGotoXY+0x8>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	6a 83       	std	Y+2, r22	; 0x02

	if((copy_u8line==LCD_LINE2) || (copy_u8line==LCD_LINE1) && copy_u8pos < 16 )
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	82 30       	cpi	r24, 0x02	; 2
    243e:	31 f0       	breq	.+12     	; 0x244c <LCD_voidGotoXY+0x22>
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	81 30       	cpi	r24, 0x01	; 1
    2444:	e1 f4       	brne	.+56     	; 0x247e <LCD_voidGotoXY+0x54>
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	80 31       	cpi	r24, 0x10	; 16
    244a:	c8 f4       	brcc	.+50     	; 0x247e <LCD_voidGotoXY+0x54>
	{
		switch(copy_u8line)
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	3c 83       	std	Y+4, r19	; 0x04
    2454:	2b 83       	std	Y+3, r18	; 0x03
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	91 05       	cpc	r25, r1
    245e:	31 f0       	breq	.+12     	; 0x246c <LCD_voidGotoXY+0x42>
    2460:	2b 81       	ldd	r18, Y+3	; 0x03
    2462:	3c 81       	ldd	r19, Y+4	; 0x04
    2464:	22 30       	cpi	r18, 0x02	; 2
    2466:	31 05       	cpc	r19, r1
    2468:	31 f0       	breq	.+12     	; 0x2476 <LCD_voidGotoXY+0x4c>
    246a:	09 c0       	rjmp	.+18     	; 0x247e <LCD_voidGotoXY+0x54>
		{
		case(LCD_LINE1):
		     LCD_voidSendCmd(LCD_CURSOR_LINE1+copy_u8pos);
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	80 58       	subi	r24, 0x80	; 128
    2470:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
    2474:	04 c0       	rjmp	.+8      	; 0x247e <LCD_voidGotoXY+0x54>
		break;

		case(LCD_LINE2):
			LCD_voidSendCmd(LCD_CURSOR_LINE2+copy_u8pos);
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	80 54       	subi	r24, 0x40	; 64
    247a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
		break;
		}
	}
}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <LCD_Clear>:
void LCD_Clear(void)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	2e 97       	sbiw	r28, 0x0e	; 14
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8b 87       	std	Y+11, r24	; 0x0b
    24b0:	9c 87       	std	Y+12, r25	; 0x0c
    24b2:	ad 87       	std	Y+13, r26	; 0x0d
    24b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8f 83       	std	Y+7, r24	; 0x07
    24d0:	98 87       	std	Y+8, r25	; 0x08
    24d2:	a9 87       	std	Y+9, r26	; 0x09
    24d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d6:	6f 81       	ldd	r22, Y+7	; 0x07
    24d8:	78 85       	ldd	r23, Y+8	; 0x08
    24da:	89 85       	ldd	r24, Y+9	; 0x09
    24dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_Clear+0x6c>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6b 85       	ldd	r22, Y+11	; 0x0b
    2512:	7c 85       	ldd	r23, Y+12	; 0x0c
    2514:	8d 85       	ldd	r24, Y+13	; 0x0d
    2516:	9e 85       	ldd	r25, Y+14	; 0x0e
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_Clear+0xcc>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_Clear+0xba>
    254a:	9c 83       	std	Y+4, r25	; 0x04
    254c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_Clear+0xae>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	9a 81       	ldd	r25, Y+2	; 0x02
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_Clear+0xf6>
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    258a:	2e 96       	adiw	r28, 0x0e	; 14
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <LCD_voidsendPatern>:

void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <LCD_voidsendPatern+0x6>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <LCD_voidsendPatern+0x8>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <LCD_voidsendPatern+0xa>
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	9b 83       	std	Y+3, r25	; 0x03
    25ac:	8a 83       	std	Y+2, r24	; 0x02
    25ae:	6c 83       	std	Y+4, r22	; 0x04
    25b0:	4d 83       	std	Y+5, r20	; 0x05
    25b2:	2e 83       	std	Y+6, r18	; 0x06
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
    25b4:	8c 81       	ldd	r24, Y+4	; 0x04
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	08 96       	adiw	r24, 0x08	; 8
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendCmd>
	for(i=0;i<=ENTRY_ARRAY;i++)
    25cc:	19 82       	std	Y+1, r1	; 0x01
    25ce:	0e c0       	rjmp	.+28     	; 0x25ec <LCD_voidsendPatern+0x50>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
void LCD_voidsendPatern(u8 * pu8_copypatern,u8 copy_u8location,u8 copy_u8row,u8 copy_u8col)
{
	u8 i;

	 LCD_voidSendCmd(64+(copy_u8location*8));
	for(i=0;i<=ENTRY_ARRAY;i++)
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	88 30       	cpi	r24, 0x08	; 8
    25f0:	78 f3       	brcs	.-34     	; 0x25d0 <LCD_voidsendPatern+0x34>
	{
		LCD_voidSendChar(pu8_copypatern[i]);
	}
	LCD_voidGotoXY(copy_u8row,copy_u8col);
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	6e 81       	ldd	r22, Y+6	; 0x06
    25f6:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
	LCD_voidSendChar(copy_u8location);
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>


}
    2600:	26 96       	adiw	r28, 0x06	; 6
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <Private_voidwriteHalfPort>:

#if LCD_U8_MOODE == LCD_U8_4_BIT_MOODE
static void Private_voidwriteHalfPort(u8 copy_u8value)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <Private_voidwriteHalfPort+0x6>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	8a 83       	std	Y+2, r24	; 0x02
	u8 get_bit;

        get_bit =GET_BIT(copy_u8value,0);
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	81 70       	andi	r24, 0x01	; 1
    2622:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D4_PORT,LCD_U8_D4_PIN,get_bit);
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	63 e0       	ldi	r22, 0x03	; 3
    2628:	49 81       	ldd	r20, Y+1	; 0x01
    262a:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,1);
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	86 95       	lsr	r24
    2632:	81 70       	andi	r24, 0x01	; 1
    2634:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D5_PORT,LCD_U8_D5_PIN,get_bit);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	64 e0       	ldi	r22, 0x04	; 4
    263a:	49 81       	ldd	r20, Y+1	; 0x01
    263c:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,2);
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	86 95       	lsr	r24
    2644:	86 95       	lsr	r24
    2646:	81 70       	andi	r24, 0x01	; 1
    2648:	89 83       	std	Y+1, r24	; 0x01

		DIO_u8SetPinValue(LCD_U8_D6_PORT,LCD_U8_D6_PIN,get_bit);
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	65 e0       	ldi	r22, 0x05	; 5
    264e:	49 81       	ldd	r20, Y+1	; 0x01
    2650:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

		get_bit = GET_BIT(copy_u8value,3);
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	86 95       	lsr	r24
    265c:	81 70       	andi	r24, 0x01	; 1
    265e:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(LCD_U8_D7_PORT,LCD_U8_D7_PIN,get_bit);
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	66 e0       	ldi	r22, 0x06	; 6
    2664:	49 81       	ldd	r20, Y+1	; 0x01
    2666:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_u8SetPinValue>

}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <TMR_voidtimer0init>:
//
static void (*TMR_pftimer0overflowcallback)(void) =NULL; 
static void (*TMR_pftimer0_CTCcallback)(void) =NULL;

void TMR_voidtimer0init(void)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
        CLE_BIT(TMR_U8_TMR0_TCCR0_REG,3);

	}
	else if(TMR_MODE == TMR_CTC)
	{
		SET_BIT(TMR_U8_TMR0_TCCR0_REG,3);
    267c:	a3 e5       	ldi	r26, 0x53	; 83
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e3 e5       	ldi	r30, 0x53	; 83
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	88 60       	ori	r24, 0x08	; 8
    2688:	8c 93       	st	X, r24
        CLE_BIT(TMR_U8_TMR0_TCCR0_REG,6);
    268a:	a3 e5       	ldi	r26, 0x53	; 83
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e3 e5       	ldi	r30, 0x53	; 83
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8f 7b       	andi	r24, 0xBF	; 191
    2696:	8c 93       	st	X, r24

        TMR_U8_TMR0_OCR0_REG = 99;
    2698:	ec e5       	ldi	r30, 0x5C	; 92
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	83 e6       	ldi	r24, 0x63	; 99
    269e:	80 83       	st	Z, r24
		/*Enable ovf intrreupt */
		SET_BIT(TMR_U8_TMR_TIMSK_REG,TMR_U8_TIMSK_OCIE0);
    26a0:	a9 e5       	ldi	r26, 0x59	; 89
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e9 e5       	ldi	r30, 0x59	; 89
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	82 60       	ori	r24, 0x02	; 2
    26ac:	8c 93       	st	X, r24
	/*
		CLE_BIT(TMR_U8_TMR0_TCCR0_REG,0);
        SET_BIT(TMR_U8_TMR0_TCCR0_REG,1);
		CLE_BIT(TMR_U8_TMR0_TCCR0_REG,2);
	*/
	TMR_U8_TMR0_TCCR0_REG &=~(7<<0);
    26ae:	a3 e5       	ldi	r26, 0x53	; 83
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e3 e5       	ldi	r30, 0x53	; 83
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	88 7f       	andi	r24, 0xF8	; 248
    26ba:	8c 93       	st	X, r24
	TMR_U8_TMR0_TCCR0_REG |=(TMR_U8_PRESCALLER<<0);
    26bc:	a3 e5       	ldi	r26, 0x53	; 83
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e3 e5       	ldi	r30, 0x53	; 83
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	82 60       	ori	r24, 0x02	; 2
    26c8:	8c 93       	st	X, r24
	
}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <TMR_u8tmr0overflowsetcallback>:


u8 TMR_u8tmr0overflowsetcallback(void(*copy_pfcallback(void)))
{ 
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <TMR_u8tmr0overflowsetcallback+0x6>
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	9b 83       	std	Y+3, r25	; 0x03
    26de:	8a 83       	std	Y+2, r24	; 0x02
   u8 local_u8staterror =STD_TYPES_OK;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	89 83       	std	Y+1, r24	; 0x01
   if(copy_pfcallback !=NULL)
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	39 f0       	breq	.+14     	; 0x26fa <TMR_u8tmr0overflowsetcallback+0x2a>
   {
	TMR_pftimer0overflowcallback = copy_pfcallback;
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	90 93 91 01 	sts	0x0191, r25
    26f4:	80 93 90 01 	sts	0x0190, r24
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <TMR_u8tmr0overflowsetcallback+0x2c>
   }
	else
	{
		local_u8staterror =STD_TYPES_NOK;
    26fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8staterror;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <TMR_u8tmr0_CTCsetcallback>:


u8 TMR_u8tmr0_CTCsetcallback(void(*copy_pfcallback(void)))
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	00 d0       	rcall	.+0      	; 0x2710 <TMR_u8tmr0_CTCsetcallback+0x6>
    2710:	0f 92       	push	r0
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	9b 83       	std	Y+3, r25	; 0x03
    2718:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8staterror =STD_TYPES_OK;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	89 83       	std	Y+1, r24	; 0x01
   if(copy_pfcallback !=NULL)
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	39 f0       	breq	.+14     	; 0x2734 <TMR_u8tmr0_CTCsetcallback+0x2a>
   {
	TMR_pftimer0_CTCcallback = copy_pfcallback;
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	90 93 93 01 	sts	0x0193, r25
    272e:	80 93 92 01 	sts	0x0192, r24
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <TMR_u8tmr0_CTCsetcallback+0x2c>
   }
	else
	{
		local_u8staterror =STD_TYPES_NOK;
    2734:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8staterror;
    2736:	89 81       	ldd	r24, Y+1	; 0x01

}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <__vector_11>:


/*  ISR fo */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    2744:	1f 92       	push	r1
    2746:	0f 92       	push	r0
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	0f 92       	push	r0
    274c:	11 24       	eor	r1, r1
    274e:	2f 93       	push	r18
    2750:	3f 93       	push	r19
    2752:	4f 93       	push	r20
    2754:	5f 93       	push	r21
    2756:	6f 93       	push	r22
    2758:	7f 93       	push	r23
    275a:	8f 93       	push	r24
    275c:	9f 93       	push	r25
    275e:	af 93       	push	r26
    2760:	bf 93       	push	r27
    2762:	ef 93       	push	r30
    2764:	ff 93       	push	r31
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16counter;
	local_u16counter++;
    276e:	80 91 94 01 	lds	r24, 0x0194
    2772:	90 91 95 01 	lds	r25, 0x0195
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	90 93 95 01 	sts	0x0195, r25
    277c:	80 93 94 01 	sts	0x0194, r24
	if(local_u16counter == TMR_U16_TMR0_OVERFLOW_COUNTER)
    2780:	80 91 94 01 	lds	r24, 0x0194
    2784:	90 91 95 01 	lds	r25, 0x0195
    2788:	2f e0       	ldi	r18, 0x0F	; 15
    278a:	83 34       	cpi	r24, 0x43	; 67
    278c:	92 07       	cpc	r25, r18
    278e:	99 f4       	brne	.+38     	; 0x27b6 <__vector_11+0x72>
	{
		/*set preload value*/
	   TMR_U8_TMR0_TCNT0_REG =  TMR_U8_TMR0_PRELOAD_VALUE;
    2790:	e2 e5       	ldi	r30, 0x52	; 82
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 ec       	ldi	r24, 0xC0	; 192
    2796:	80 83       	st	Z, r24
	   /*clear vounter*/
	   local_u16counter =0;
    2798:	10 92 95 01 	sts	0x0195, r1
    279c:	10 92 94 01 	sts	0x0194, r1
         if(TMR_pftimer0overflowcallback !=NULL) 
    27a0:	80 91 90 01 	lds	r24, 0x0190
    27a4:	90 91 91 01 	lds	r25, 0x0191
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	29 f0       	breq	.+10     	; 0x27b6 <__vector_11+0x72>
          {
            TMR_pftimer0overflowcallback();
    27ac:	e0 91 90 01 	lds	r30, 0x0190
    27b0:	f0 91 91 01 	lds	r31, 0x0191
    27b4:	09 95       	icall
           }

	  }
	
	
}
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

000027dc <__vector_10>:

void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	0f 92       	push	r0
    27e4:	11 24       	eor	r1, r1
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	ef 93       	push	r30
    27fc:	ff 93       	push	r31
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16counter;
	local_u16counter++;
    2806:	80 91 96 01 	lds	r24, 0x0196
    280a:	90 91 97 01 	lds	r25, 0x0197
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	90 93 97 01 	sts	0x0197, r25
    2814:	80 93 96 01 	sts	0x0196, r24
	if(local_u16counter == 10000)
    2818:	80 91 96 01 	lds	r24, 0x0196
    281c:	90 91 97 01 	lds	r25, 0x0197
    2820:	27 e2       	ldi	r18, 0x27	; 39
    2822:	80 31       	cpi	r24, 0x10	; 16
    2824:	92 07       	cpc	r25, r18
    2826:	79 f4       	brne	.+30     	; 0x2846 <__vector_10+0x6a>
	{
		local_u16counter =0;
    2828:	10 92 97 01 	sts	0x0197, r1
    282c:	10 92 96 01 	sts	0x0196, r1
		if(TMR_pftimer0_CTCcallback !=NULL)
    2830:	80 91 92 01 	lds	r24, 0x0192
    2834:	90 91 93 01 	lds	r25, 0x0193
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	29 f0       	breq	.+10     	; 0x2846 <__vector_10+0x6a>
		{
		TMR_pftimer0_CTCcallback();
    283c:	e0 91 92 01 	lds	r30, 0x0192
    2840:	f0 91 93 01 	lds	r31, 0x0193
    2844:	09 95       	icall
	    }
	}
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	ff 91       	pop	r31
    284c:	ef 91       	pop	r30
    284e:	bf 91       	pop	r27
    2850:	af 91       	pop	r26
    2852:	9f 91       	pop	r25
    2854:	8f 91       	pop	r24
    2856:	7f 91       	pop	r23
    2858:	6f 91       	pop	r22
    285a:	5f 91       	pop	r21
    285c:	4f 91       	pop	r20
    285e:	3f 91       	pop	r19
    2860:	2f 91       	pop	r18
    2862:	0f 90       	pop	r0
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	0f 90       	pop	r0
    2868:	1f 90       	pop	r1
    286a:	18 95       	reti

0000286c <main>:
#include  "KPD_interface.h"

void App_voidset(u8 *arr);
static s8 i,q,w,u,r,a;
int main()
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	63 97       	sbiw	r28, 0x13	; 19
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61

 	DIO_voidInit();
    2880:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <DIO_voidInit>
    LCD_voidInit();
    2884:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <LCD_voidInit>
    u8 arr[6]={0,1,3,4,6,7};
    2888:	ce 01       	movw	r24, r28
    288a:	02 96       	adiw	r24, 0x02	; 2
    288c:	98 8b       	std	Y+16, r25	; 0x10
    288e:	8f 87       	std	Y+15, r24	; 0x0f
    2890:	e9 e8       	ldi	r30, 0x89	; 137
    2892:	f1 e0       	ldi	r31, 0x01	; 1
    2894:	fa 8b       	std	Y+18, r31	; 0x12
    2896:	e9 8b       	std	Y+17, r30	; 0x11
    2898:	f6 e0       	ldi	r31, 0x06	; 6
    289a:	fb 8b       	std	Y+19, r31	; 0x13
    289c:	e9 89       	ldd	r30, Y+17	; 0x11
    289e:	fa 89       	ldd	r31, Y+18	; 0x12
    28a0:	00 80       	ld	r0, Z
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	9a 89       	ldd	r25, Y+18	; 0x12
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	9a 8b       	std	Y+18, r25	; 0x12
    28aa:	89 8b       	std	Y+17, r24	; 0x11
    28ac:	ef 85       	ldd	r30, Y+15	; 0x0f
    28ae:	f8 89       	ldd	r31, Y+16	; 0x10
    28b0:	00 82       	st	Z, r0
    28b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b4:	98 89       	ldd	r25, Y+16	; 0x10
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	98 8b       	std	Y+16, r25	; 0x10
    28ba:	8f 87       	std	Y+15, r24	; 0x0f
    28bc:	9b 89       	ldd	r25, Y+19	; 0x13
    28be:	91 50       	subi	r25, 0x01	; 1
    28c0:	9b 8b       	std	Y+19, r25	; 0x13
    28c2:	eb 89       	ldd	r30, Y+19	; 0x13
    28c4:	ee 23       	and	r30, r30
    28c6:	51 f7       	brne	.-44     	; 0x289c <main+0x30>
    u8 local_u8kpd;
    s8 x=0;
    28c8:	19 82       	std	Y+1, r1	; 0x01
    u8 temparr[6];
	GINT_u8_enable();
    28ca:	0e 94 4b 0b 	call	0x1696	; 0x1696 <GINT_u8_enable>
	//TMR_u8tmr0overflowsetcallback(&App_voidset);
	TMR_u8tmr0_CTCsetcallback(&App_voidset);
    28ce:	84 e0       	ldi	r24, 0x04	; 4
    28d0:	95 e1       	ldi	r25, 0x15	; 21
    28d2:	0e 94 85 13 	call	0x270a	; 0x270a <TMR_u8tmr0_CTCsetcallback>

    LCD_VoidSendStr("00:00:00");
    28d6:	80 e6       	ldi	r24, 0x60	; 96
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_VoidSendStr>
    x=arr[x];
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	33 27       	eor	r19, r19
    28e4:	27 fd       	sbrc	r18, 7
    28e6:	30 95       	com	r19
    28e8:	ce 01       	movw	r24, r28
    28ea:	02 96       	adiw	r24, 0x02	; 2
    28ec:	fc 01       	movw	r30, r24
    28ee:	e2 0f       	add	r30, r18
    28f0:	f3 1f       	adc	r31, r19
    28f2:	80 81       	ld	r24, Z
    28f4:	89 83       	std	Y+1, r24	; 0x01
    LCD_voidGotoXY(1,x);
    28f6:	99 81       	ldd	r25, Y+1	; 0x01
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	69 2f       	mov	r22, r25
    28fc:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
  while(1)
	  {
    KPD_u8getswitch(&local_u8kpd);
    2900:	ce 01       	movw	r24, r28
    2902:	08 96       	adiw	r24, 0x08	; 8
    2904:	0e 94 67 0b 	call	0x16ce	; 0x16ce <KPD_u8getswitch>
    if(local_u8kpd !=KPD_U8_NOT_PRESSED)
    2908:	88 85       	ldd	r24, Y+8	; 0x08
    290a:	8f 3f       	cpi	r24, 0xFF	; 255
    290c:	c9 f3       	breq	.-14     	; 0x2900 <main+0x94>
    {
    	if(local_u8kpd>= '0')
    290e:	88 85       	ldd	r24, Y+8	; 0x08
    2910:	80 33       	cpi	r24, 0x30	; 48
    2912:	30 f1       	brcs	.+76     	; 0x2960 <main+0xf4>
    	{

    		LCD_voidGotoXY(1,arr[x]);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	33 27       	eor	r19, r19
    291a:	27 fd       	sbrc	r18, 7
    291c:	30 95       	com	r19
    291e:	ce 01       	movw	r24, r28
    2920:	02 96       	adiw	r24, 0x02	; 2
    2922:	fc 01       	movw	r30, r24
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	90 81       	ld	r25, Z
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	69 2f       	mov	r22, r25
    292e:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
    	 LCD_voidSendChar(local_u8kpd);
    2932:	88 85       	ldd	r24, Y+8	; 0x08
    2934:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_voidSendChar>
    	 temparr[x]=local_u8kpd;
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	28 2f       	mov	r18, r24
    293c:	33 27       	eor	r19, r19
    293e:	27 fd       	sbrc	r18, 7
    2940:	30 95       	com	r19
    2942:	48 85       	ldd	r20, Y+8	; 0x08
    2944:	ce 01       	movw	r24, r28
    2946:	09 96       	adiw	r24, 0x09	; 9
    2948:	fc 01       	movw	r30, r24
    294a:	e2 0f       	add	r30, r18
    294c:	f3 1f       	adc	r31, r19
    294e:	40 83       	st	Z, r20
 		x++;
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	89 83       	std	Y+1, r24	; 0x01
 		if(x==6)
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	86 30       	cpi	r24, 0x06	; 6
    295a:	91 f6       	brne	.-92     	; 0x2900 <main+0x94>
 		{
 			x=0;
    295c:	19 82       	std	Y+1, r1	; 0x01
    295e:	d0 cf       	rjmp	.-96     	; 0x2900 <main+0x94>
 		}
    	}

    	else if(local_u8kpd=='+')
    2960:	88 85       	ldd	r24, Y+8	; 0x08
    2962:	8b 32       	cpi	r24, 0x2B	; 43
    2964:	b9 f4       	brne	.+46     	; 0x2994 <main+0x128>
    	{
    		x++;
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	8f 5f       	subi	r24, 0xFF	; 255
    296a:	89 83       	std	Y+1, r24	; 0x01
    		if(x==6)
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	86 30       	cpi	r24, 0x06	; 6
    2970:	09 f4       	brne	.+2      	; 0x2974 <main+0x108>
    		{
    			x=0;
    2972:	19 82       	std	Y+1, r1	; 0x01
    		}

    		LCD_voidGotoXY(1,arr[x]);
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	28 2f       	mov	r18, r24
    2978:	33 27       	eor	r19, r19
    297a:	27 fd       	sbrc	r18, 7
    297c:	30 95       	com	r19
    297e:	ce 01       	movw	r24, r28
    2980:	02 96       	adiw	r24, 0x02	; 2
    2982:	fc 01       	movw	r30, r24
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
    2988:	90 81       	ld	r25, Z
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	69 2f       	mov	r22, r25
    298e:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
    2992:	b6 cf       	rjmp	.-148    	; 0x2900 <main+0x94>
    	}
    	else if(local_u8kpd=='-')
    2994:	88 85       	ldd	r24, Y+8	; 0x08
    2996:	8d 32       	cpi	r24, 0x2D	; 45
    2998:	c1 f4       	brne	.+48     	; 0x29ca <main+0x15e>
    	{
    		x--;
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	81 50       	subi	r24, 0x01	; 1
    299e:	89 83       	std	Y+1, r24	; 0x01
    		if(x==-1)
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	8f 3f       	cpi	r24, 0xFF	; 255
    29a4:	11 f4       	brne	.+4      	; 0x29aa <main+0x13e>
    		{
    			x=5;
    29a6:	85 e0       	ldi	r24, 0x05	; 5
    29a8:	89 83       	std	Y+1, r24	; 0x01
    		}

    		LCD_voidGotoXY(1,arr[x]);
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	28 2f       	mov	r18, r24
    29ae:	33 27       	eor	r19, r19
    29b0:	27 fd       	sbrc	r18, 7
    29b2:	30 95       	com	r19
    29b4:	ce 01       	movw	r24, r28
    29b6:	02 96       	adiw	r24, 0x02	; 2
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	90 81       	ld	r25, Z
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	69 2f       	mov	r22, r25
    29c4:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
    29c8:	9b cf       	rjmp	.-202    	; 0x2900 <main+0x94>
    	}
    	else if(local_u8kpd == '%')
    29ca:	88 85       	ldd	r24, Y+8	; 0x08
    29cc:	85 32       	cpi	r24, 0x25	; 37
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <main+0x166>
    29d0:	97 cf       	rjmp	.-210    	; 0x2900 <main+0x94>
    	{
    		i=temparr[5] - '0';
    29d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    29d4:	80 53       	subi	r24, 0x30	; 48
    29d6:	80 93 98 01 	sts	0x0198, r24
    		q=temparr[4] - '0';
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	80 53       	subi	r24, 0x30	; 48
    29de:	80 93 99 01 	sts	0x0199, r24
    		w=temparr[3] - '0';
    29e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    29e4:	80 53       	subi	r24, 0x30	; 48
    29e6:	80 93 9a 01 	sts	0x019A, r24
    		u=temparr[2] - '0';
    29ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    29ec:	80 53       	subi	r24, 0x30	; 48
    29ee:	80 93 9b 01 	sts	0x019B, r24
    		r=temparr[1] - '0';
    29f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f4:	80 53       	subi	r24, 0x30	; 48
    29f6:	80 93 9c 01 	sts	0x019C, r24
    		a=temparr[0] - '0';
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	80 53       	subi	r24, 0x30	; 48
    29fe:	80 93 9d 01 	sts	0x019D, r24
    		TMR_voidtimer0init();
    2a02:	0e 94 3a 13 	call	0x2674	; 0x2674 <TMR_voidtimer0init>
    2a06:	7c cf       	rjmp	.-264    	; 0x2900 <main+0x94>

00002a08 <App_voidset>:


}

void App_voidset(u8 *arr)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <App_voidset+0x6>
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
	  i--;
    2a16:	80 91 98 01 	lds	r24, 0x0198
    2a1a:	81 50       	subi	r24, 0x01	; 1
    2a1c:	80 93 98 01 	sts	0x0198, r24
	  if(i!=-1)
    2a20:	80 91 98 01 	lds	r24, 0x0198
    2a24:	8f 3f       	cpi	r24, 0xFF	; 255
    2a26:	a9 f0       	breq	.+42     	; 0x2a52 <App_voidset+0x4a>
	  {
	  LCD_voidGotoXY(1,7);
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	67 e0       	ldi	r22, 0x07	; 7
    2a2c:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
	  LCD_voidSendNumber(i);
    2a30:	80 91 98 01 	lds	r24, 0x0198
    2a34:	99 27       	eor	r25, r25
    2a36:	87 fd       	sbrc	r24, 7
    2a38:	90 95       	com	r25
    2a3a:	a9 2f       	mov	r26, r25
    2a3c:	b9 2f       	mov	r27, r25
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>
	  }

  if(i==-1)
    2a52:	80 91 98 01 	lds	r24, 0x0198
    2a56:	8f 3f       	cpi	r24, 0xFF	; 255
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <App_voidset+0x54>
    2a5a:	19 c1       	rjmp	.+562    	; 0x2c8e <App_voidset+0x286>
  {
	  q--;
    2a5c:	80 91 99 01 	lds	r24, 0x0199
    2a60:	81 50       	subi	r24, 0x01	; 1
    2a62:	80 93 99 01 	sts	0x0199, r24
	  i=9;
    2a66:	89 e0       	ldi	r24, 0x09	; 9
    2a68:	80 93 98 01 	sts	0x0198, r24
	 LCD_voidGotoXY(1,7);
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	67 e0       	ldi	r22, 0x07	; 7
    2a70:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
	  LCD_voidSendNumber((u8)i);
    2a74:	80 91 98 01 	lds	r24, 0x0198
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 e0       	ldi	r26, 0x00	; 0
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>

	  if(q!=-1)
    2a94:	80 91 99 01 	lds	r24, 0x0199
    2a98:	8f 3f       	cpi	r24, 0xFF	; 255
    2a9a:	a1 f0       	breq	.+40     	; 0x2ac4 <App_voidset+0xbc>
	  {
	  LCD_voidGotoXY(1,6);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	66 e0       	ldi	r22, 0x06	; 6
    2aa0:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
	  LCD_voidSendNumber((u8)q);
    2aa4:	80 91 99 01 	lds	r24, 0x0199
    2aa8:	88 2f       	mov	r24, r24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a0 e0       	ldi	r26, 0x00	; 0
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>
	  }

	  if(q==-1)
    2ac4:	80 91 99 01 	lds	r24, 0x0199
    2ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aca:	09 f0       	breq	.+2      	; 0x2ace <App_voidset+0xc6>
    2acc:	e0 c0       	rjmp	.+448    	; 0x2c8e <App_voidset+0x286>
	  {
		  w--;
    2ace:	80 91 9a 01 	lds	r24, 0x019A
    2ad2:	81 50       	subi	r24, 0x01	; 1
    2ad4:	80 93 9a 01 	sts	0x019A, r24
		  q=5;
    2ad8:	85 e0       	ldi	r24, 0x05	; 5
    2ada:	80 93 99 01 	sts	0x0199, r24
		  LCD_voidGotoXY(1,6);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	66 e0       	ldi	r22, 0x06	; 6
    2ae2:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
		  LCD_voidSendNumber((u8)q);
    2ae6:	80 91 99 01 	lds	r24, 0x0199
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>
		 if(w!=-1)
    2b06:	80 91 9a 01 	lds	r24, 0x019A
    2b0a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b0c:	a1 f0       	breq	.+40     	; 0x2b36 <App_voidset+0x12e>
		 {
		  LCD_voidGotoXY(1,4);
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	64 e0       	ldi	r22, 0x04	; 4
    2b12:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
		  LCD_voidSendNumber((u8)w);
    2b16:	80 91 9a 01 	lds	r24, 0x019A
    2b1a:	88 2f       	mov	r24, r24
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a0 e0       	ldi	r26, 0x00	; 0
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>
		 }
		  if(w==-1)
    2b36:	80 91 9a 01 	lds	r24, 0x019A
    2b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <App_voidset+0x138>
    2b3e:	a7 c0       	rjmp	.+334    	; 0x2c8e <App_voidset+0x286>
		  {
			  u--;
    2b40:	80 91 9b 01 	lds	r24, 0x019B
    2b44:	81 50       	subi	r24, 0x01	; 1
    2b46:	80 93 9b 01 	sts	0x019B, r24
			  w=9;
    2b4a:	89 e0       	ldi	r24, 0x09	; 9
    2b4c:	80 93 9a 01 	sts	0x019A, r24
			  LCD_voidGotoXY(1,4);
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
			  LCD_voidSendNumber((u8)w);
    2b58:	80 91 9a 01 	lds	r24, 0x019A
    2b5c:	88 2f       	mov	r24, r24
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 e0       	ldi	r26, 0x00	; 0
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>
              if(u!=-1)
    2b78:	80 91 9b 01 	lds	r24, 0x019B
    2b7c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b7e:	a1 f0       	breq	.+40     	; 0x2ba8 <App_voidset+0x1a0>
              {
			  LCD_voidGotoXY(1,3);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	63 e0       	ldi	r22, 0x03	; 3
    2b84:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
			  LCD_voidSendNumber((u8)u);
    2b88:	80 91 9b 01 	lds	r24, 0x019B
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>

              }
			  if(u==-1)
    2ba8:	80 91 9b 01 	lds	r24, 0x019B
    2bac:	8f 3f       	cpi	r24, 0xFF	; 255
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <App_voidset+0x1aa>
    2bb0:	6e c0       	rjmp	.+220    	; 0x2c8e <App_voidset+0x286>
			  {
				  r--;
    2bb2:	80 91 9c 01 	lds	r24, 0x019C
    2bb6:	81 50       	subi	r24, 0x01	; 1
    2bb8:	80 93 9c 01 	sts	0x019C, r24
				  u=5;
    2bbc:	85 e0       	ldi	r24, 0x05	; 5
    2bbe:	80 93 9b 01 	sts	0x019B, r24
				  LCD_voidGotoXY(1,3);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	63 e0       	ldi	r22, 0x03	; 3
    2bc6:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
				  LCD_voidSendNumber((u8)u);
    2bca:	80 91 9b 01 	lds	r24, 0x019B
    2bce:	88 2f       	mov	r24, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>
                  if(r!=-1)
    2bea:	80 91 9c 01 	lds	r24, 0x019C
    2bee:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf0:	a1 f0       	breq	.+40     	; 0x2c1a <App_voidset+0x212>
                  {
				  LCD_voidGotoXY(1,1);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
				  LCD_voidSendNumber((u8)r);
    2bfa:	80 91 9c 01 	lds	r24, 0x019C
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	a0 e0       	ldi	r26, 0x00	; 0
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>

                  }
				  if(r==-1)
    2c1a:	80 91 9c 01 	lds	r24, 0x019C
    2c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c20:	b1 f5       	brne	.+108    	; 0x2c8e <App_voidset+0x286>
				  {
					  a--;
    2c22:	80 91 9d 01 	lds	r24, 0x019D
    2c26:	81 50       	subi	r24, 0x01	; 1
    2c28:	80 93 9d 01 	sts	0x019D, r24
					  r=9;
    2c2c:	89 e0       	ldi	r24, 0x09	; 9
    2c2e:	80 93 9c 01 	sts	0x019C, r24
					  LCD_voidGotoXY(1,1);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
					  LCD_voidSendNumber((u8)r);
    2c3a:	80 91 9c 01 	lds	r24, 0x019C
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a0 e0       	ldi	r26, 0x00	; 0
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>

					  LCD_voidGotoXY(1,0);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_voidGotoXY>
					  LCD_voidSendNumber((u8)a);
    2c62:	80 91 9d 01 	lds	r24, 0x019D
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_voidSendNumber>

					  if(a==-1)
    2c82:	80 91 9d 01 	lds	r24, 0x019D
    2c86:	8f 3f       	cpi	r24, 0xFF	; 255
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <App_voidset+0x286>
					  {
						  a=0;
    2c8a:	10 92 9d 01 	sts	0x019D, r1
	  }
  }



}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <__udivmodhi4>:
    2c98:	aa 1b       	sub	r26, r26
    2c9a:	bb 1b       	sub	r27, r27
    2c9c:	51 e1       	ldi	r21, 0x11	; 17
    2c9e:	07 c0       	rjmp	.+14     	; 0x2cae <__udivmodhi4_ep>

00002ca0 <__udivmodhi4_loop>:
    2ca0:	aa 1f       	adc	r26, r26
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	a6 17       	cp	r26, r22
    2ca6:	b7 07       	cpc	r27, r23
    2ca8:	10 f0       	brcs	.+4      	; 0x2cae <__udivmodhi4_ep>
    2caa:	a6 1b       	sub	r26, r22
    2cac:	b7 0b       	sbc	r27, r23

00002cae <__udivmodhi4_ep>:
    2cae:	88 1f       	adc	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	5a 95       	dec	r21
    2cb4:	a9 f7       	brne	.-22     	; 0x2ca0 <__udivmodhi4_loop>
    2cb6:	80 95       	com	r24
    2cb8:	90 95       	com	r25
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	08 95       	ret

00002cc0 <__prologue_saves__>:
    2cc0:	2f 92       	push	r2
    2cc2:	3f 92       	push	r3
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	ca 1b       	sub	r28, r26
    2cea:	db 0b       	sbc	r29, r27
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	09 94       	ijmp

00002cf8 <__epilogue_restores__>:
    2cf8:	2a 88       	ldd	r2, Y+18	; 0x12
    2cfa:	39 88       	ldd	r3, Y+17	; 0x11
    2cfc:	48 88       	ldd	r4, Y+16	; 0x10
    2cfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0e:	df 80       	ldd	r13, Y+7	; 0x07
    2d10:	ee 80       	ldd	r14, Y+6	; 0x06
    2d12:	fd 80       	ldd	r15, Y+5	; 0x05
    2d14:	0c 81       	ldd	r16, Y+4	; 0x04
    2d16:	1b 81       	ldd	r17, Y+3	; 0x03
    2d18:	aa 81       	ldd	r26, Y+2	; 0x02
    2d1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d1c:	ce 0f       	add	r28, r30
    2d1e:	d1 1d       	adc	r29, r1
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	ed 01       	movw	r28, r26
    2d2c:	08 95       	ret

00002d2e <_exit>:
    2d2e:	f8 94       	cli

00002d30 <__stop_program>:
    2d30:	ff cf       	rjmp	.-2      	; 0x2d30 <__stop_program>
