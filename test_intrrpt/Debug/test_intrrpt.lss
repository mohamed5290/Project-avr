
test_intrrpt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000eea  2**0
                  ALLOC
  2 .stab         000010d4  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000643  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_1>
   8:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__vector_2>
   c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 06 07 	call	0xe0c	; 0xe0c <main>
  74:	0c 94 39 07 	jmp	0xe72	; 0xe72 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DiO_private.h"

void DIO_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DIO_U8_DDRA_REG=conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 83       	st	Z, r24
	               		 DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION );

    DIO_U8_DDRB_REG=conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
				         DIO_u8_PB4_DIRECTION,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION );

    DIO_U8_DDRC_REG=conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,
  92:	e4 e3       	ldi	r30, 0x34	; 52
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
				         DIO_u8_PC4_DIRECTION,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION );

    DIO_U8_DDRD_REG=conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,
  98:	e1 e3       	ldi	r30, 0x31	; 49
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
				         DIO_u8_PD4_DIRECTION,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION );



    DIO_U8_PORTA_REG=conc(DIO_u8_PA7_INITTIAL_VALUE,DIO_u8_PA6_INITTIAL_VALUE,DIO_u8_PA5_INITTIAL_VALUE,
  9e:	eb e3       	ldi	r30, 0x3B	; 59
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
    		              DIO_u8_PA4_INITTIAL_VALUE,DIO_u8_PA3_INITTIAL_VALUE,DIO_u8_PA2_INITTIAL_VALUE,DIO_u8_PA1_INITTIAL_VALUE,DIO_u8_PA0_INITTIAL_VALUE);

    DIO_U8_PORTB_REG=conc(DIO_u8_PB7_INITTIAL_VALUE,DIO_u8_PB6_INITTIAL_VALUE,DIO_u8_PB5_INITTIAL_VALUE,
  a4:	e8 e3       	ldi	r30, 0x38	; 56
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
    		              DIO_u8_PB4_INITTIAL_VALUE,DIO_u8_PB3_INITTIAL_VALUE,DIO_u8_PB2_INITTIAL_VALUE,DIO_u8_PB1_INITTIAL_VALUE,DIO_u8_PB0_INITTIAL_VALUE);

	DIO_U8_PORTC_REG=conc(DIO_u8_PC7_INITTIAL_VALUE,DIO_u8_PC6_INITTIAL_VALUE,DIO_u8_PC5_INITTIAL_VALUE,
  aa:	e5 e3       	ldi	r30, 0x35	; 53
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
				          DIO_u8_PC4_INITTIAL_VALUE,DIO_u8_PC3_INITTIAL_VALUE,DIO_u8_PC2_INITTIAL_VALUE,DIO_u8_PC1_INITTIAL_VALUE,DIO_u8_PC0_INITTIAL_VALUE);

    DIO_U8_PORTD_REG=conc(DIO_u8_PD7_INITTIAL_VALUE,DIO_u8_PD6_INITTIAL_VALUE,DIO_u8_PD5_INITTIAL_VALUE,
  b0:	e2 e3       	ldi	r30, 0x32	; 50
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	80 83       	st	Z, r24
    		              DIO_u8_PD4_INITTIAL_VALUE,DIO_u8_PD3_INITTIAL_VALUE,DIO_u8_PD2_INITTIAL_VALUE,DIO_u8_PD1_INITTIAL_VALUE,DIO_u8_PD0_INITTIAL_VALUE);


}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_u8SetPinDirction>:


u8 DIO_u8SetPinDirction(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinDirction )
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_u8SetPinDirction+0x6>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_u8SetPinDirction+0x8>
  c6:	00 d0       	rcall	.+0      	; 0xc8 <DIO_u8SetPinDirction+0xa>
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	8a 83       	std	Y+2, r24	; 0x02
  ce:	6b 83       	std	Y+3, r22	; 0x03
  d0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinDirction<=DIO_U8_OUTPUT))
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	08 f0       	brcs	.+2      	; 0xde <DIO_u8SetPinDirction+0x20>
  dc:	da c0       	rjmp	.+436    	; 0x292 <DIO_u8SetPinDirction+0x1d4>
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	08 f0       	brcs	.+2      	; 0xe6 <DIO_u8SetPinDirction+0x28>
  e4:	d6 c0       	rjmp	.+428    	; 0x292 <DIO_u8SetPinDirction+0x1d4>
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	08 f0       	brcs	.+2      	; 0xee <DIO_u8SetPinDirction+0x30>
  ec:	d2 c0       	rjmp	.+420    	; 0x292 <DIO_u8SetPinDirction+0x1d4>
	{
		switch(copy_u8PortId)
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	3e 83       	std	Y+6, r19	; 0x06
  f6:	2d 83       	std	Y+5, r18	; 0x05
  f8:	8d 81       	ldd	r24, Y+5	; 0x05
  fa:	9e 81       	ldd	r25, Y+6	; 0x06
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	09 f4       	brne	.+2      	; 0x104 <DIO_u8SetPinDirction+0x46>
 102:	43 c0       	rjmp	.+134    	; 0x18a <DIO_u8SetPinDirction+0xcc>
 104:	2d 81       	ldd	r18, Y+5	; 0x05
 106:	3e 81       	ldd	r19, Y+6	; 0x06
 108:	22 30       	cpi	r18, 0x02	; 2
 10a:	31 05       	cpc	r19, r1
 10c:	2c f4       	brge	.+10     	; 0x118 <DIO_u8SetPinDirction+0x5a>
 10e:	8d 81       	ldd	r24, Y+5	; 0x05
 110:	9e 81       	ldd	r25, Y+6	; 0x06
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	71 f0       	breq	.+28     	; 0x132 <DIO_u8SetPinDirction+0x74>
 116:	be c0       	rjmp	.+380    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
 118:	2d 81       	ldd	r18, Y+5	; 0x05
 11a:	3e 81       	ldd	r19, Y+6	; 0x06
 11c:	22 30       	cpi	r18, 0x02	; 2
 11e:	31 05       	cpc	r19, r1
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_u8SetPinDirction+0x66>
 122:	5f c0       	rjmp	.+190    	; 0x1e2 <DIO_u8SetPinDirction+0x124>
 124:	8d 81       	ldd	r24, Y+5	; 0x05
 126:	9e 81       	ldd	r25, Y+6	; 0x06
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	91 05       	cpc	r25, r1
 12c:	09 f4       	brne	.+2      	; 0x130 <DIO_u8SetPinDirction+0x72>
 12e:	85 c0       	rjmp	.+266    	; 0x23a <DIO_u8SetPinDirction+0x17c>
 130:	b1 c0       	rjmp	.+354    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
		{
			case DIO_U8_PORTA:
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
 132:	8c 81       	ldd	r24, Y+4	; 0x04
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	a1 f4       	brne	.+40     	; 0x160 <DIO_u8SetPinDirction+0xa2>
			       {
			            SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
 138:	aa e3       	ldi	r26, 0x3A	; 58
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	ea e3       	ldi	r30, 0x3A	; 58
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	48 2f       	mov	r20, r24
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 2e       	mov	r0, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_u8SetPinDirction+0x98>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_u8SetPinDirction+0x94>
 15a:	84 2b       	or	r24, r20
 15c:	8c 93       	st	X, r24
 15e:	9a c0       	rjmp	.+308    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
 160:	aa e3       	ldi	r26, 0x3A	; 58
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	ea e3       	ldi	r30, 0x3A	; 58
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_u8SetPinDirction+0xc0>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_u8SetPinDirction+0xbc>
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	8c 93       	st	X, r24
 188:	85 c0       	rjmp	.+266    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTB :
			       if(copy_u8PinDirction==DIO_U8_OUTPUT)
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	a1 f4       	brne	.+40     	; 0x1b8 <DIO_u8SetPinDirction+0xfa>
			       {
			            SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
 190:	a7 e3       	ldi	r26, 0x37	; 55
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e7 e3       	ldi	r30, 0x37	; 55
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_u8SetPinDirction+0xf0>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_u8SetPinDirction+0xec>
 1b2:	84 2b       	or	r24, r20
 1b4:	8c 93       	st	X, r24
 1b6:	6e c0       	rjmp	.+220    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
			       }
			       else
				   {
			            CLE_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
 1b8:	a7 e3       	ldi	r26, 0x37	; 55
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e7 e3       	ldi	r30, 0x37	; 55
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 2e       	mov	r0, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_u8SetPinDirction+0x118>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_u8SetPinDirction+0x114>
 1da:	80 95       	com	r24
 1dc:	84 23       	and	r24, r20
 1de:	8c 93       	st	X, r24
 1e0:	59 c0       	rjmp	.+178    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
				   }
			break;
			case DIO_U8_PORTC:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
 1e2:	8c 81       	ldd	r24, Y+4	; 0x04
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	a1 f4       	brne	.+40     	; 0x210 <DIO_u8SetPinDirction+0x152>
			        {
			            SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
 1e8:	a4 e3       	ldi	r26, 0x34	; 52
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e4 e3       	ldi	r30, 0x34	; 52
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_u8SetPinDirction+0x148>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_u8SetPinDirction+0x144>
 20a:	84 2b       	or	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	42 c0       	rjmp	.+132    	; 0x294 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
			        {
						CLE_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
 210:	a4 e3       	ldi	r26, 0x34	; 52
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	e4 e3       	ldi	r30, 0x34	; 52
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_u8SetPinDirction+0x170>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_u8SetPinDirction+0x16c>
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	8c 93       	st	X, r24
 238:	2d c0       	rjmp	.+90     	; 0x294 <DIO_u8SetPinDirction+0x1d6>
					}
			break;
			case DIO_U8_PORTD:
			        if(copy_u8PinDirction==DIO_U8_OUTPUT)
 23a:	8c 81       	ldd	r24, Y+4	; 0x04
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	a1 f4       	brne	.+40     	; 0x268 <DIO_u8SetPinDirction+0x1aa>
			        {
			            SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
 240:	a1 e3       	ldi	r26, 0x31	; 49
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e1 e3       	ldi	r30, 0x31	; 49
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_u8SetPinDirction+0x1a0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_u8SetPinDirction+0x19c>
 262:	84 2b       	or	r24, r20
 264:	8c 93       	st	X, r24
 266:	16 c0       	rjmp	.+44     	; 0x294 <DIO_u8SetPinDirction+0x1d6>
			        }
			        else
					{
                 		CLE_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
 268:	a1 e3       	ldi	r26, 0x31	; 49
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e1 e3       	ldi	r30, 0x31	; 49
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	48 2f       	mov	r20, r24
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 2e       	mov	r0, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinDirction+0x1c8>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8SetPinDirction+0x1c4>
 28a:	80 95       	com	r24
 28c:	84 23       	and	r24, r20
 28e:	8c 93       	st	X, r24
 290:	01 c0       	rjmp	.+2      	; 0x294 <DIO_u8SetPinDirction+0x1d6>
			break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK; 
 292:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
 294:	89 81       	ldd	r24, Y+1	; 0x01
}
 296:	26 96       	adiw	r28, 0x06	; 6
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

000002a8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)
{
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_u8SetPinValue+0x6>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_u8SetPinValue+0x8>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <DIO_u8SetPinValue+0xa>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	6b 83       	std	Y+3, r22	; 0x03
 2ba:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErorrState = STD_TYPES_OK;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7) && (copy_u8PinValue<=DIO_U8_OUTPUT))
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <DIO_u8SetPinValue+0x20>
 2c6:	da c0       	rjmp	.+436    	; 0x47c <DIO_u8SetPinValue+0x1d4>
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <DIO_u8SetPinValue+0x28>
 2ce:	d6 c0       	rjmp	.+428    	; 0x47c <DIO_u8SetPinValue+0x1d4>
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <DIO_u8SetPinValue+0x30>
 2d6:	d2 c0       	rjmp	.+420    	; 0x47c <DIO_u8SetPinValue+0x1d4>
	{
	  switch(copy_u8PortId)
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	3e 83       	std	Y+6, r19	; 0x06
 2e0:	2d 83       	std	Y+5, r18	; 0x05
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_u8SetPinValue+0x46>
 2ec:	43 c0       	rjmp	.+134    	; 0x374 <DIO_u8SetPinValue+0xcc>
 2ee:	2d 81       	ldd	r18, Y+5	; 0x05
 2f0:	3e 81       	ldd	r19, Y+6	; 0x06
 2f2:	22 30       	cpi	r18, 0x02	; 2
 2f4:	31 05       	cpc	r19, r1
 2f6:	2c f4       	brge	.+10     	; 0x302 <DIO_u8SetPinValue+0x5a>
 2f8:	8d 81       	ldd	r24, Y+5	; 0x05
 2fa:	9e 81       	ldd	r25, Y+6	; 0x06
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	71 f0       	breq	.+28     	; 0x31c <DIO_u8SetPinValue+0x74>
 300:	be c0       	rjmp	.+380    	; 0x47e <DIO_u8SetPinValue+0x1d6>
 302:	2d 81       	ldd	r18, Y+5	; 0x05
 304:	3e 81       	ldd	r19, Y+6	; 0x06
 306:	22 30       	cpi	r18, 0x02	; 2
 308:	31 05       	cpc	r19, r1
 30a:	09 f4       	brne	.+2      	; 0x30e <DIO_u8SetPinValue+0x66>
 30c:	5f c0       	rjmp	.+190    	; 0x3cc <DIO_u8SetPinValue+0x124>
 30e:	8d 81       	ldd	r24, Y+5	; 0x05
 310:	9e 81       	ldd	r25, Y+6	; 0x06
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	91 05       	cpc	r25, r1
 316:	09 f4       	brne	.+2      	; 0x31a <DIO_u8SetPinValue+0x72>
 318:	85 c0       	rjmp	.+266    	; 0x424 <DIO_u8SetPinValue+0x17c>
 31a:	b1 c0       	rjmp	.+354    	; 0x47e <DIO_u8SetPinValue+0x1d6>
	  {
		  case DIO_U8_PORTA:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	a1 f4       	brne	.+40     	; 0x34a <DIO_u8SetPinValue+0xa2>
	       	   {
			       SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
 322:	ab e3       	ldi	r26, 0x3B	; 59
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	eb e3       	ldi	r30, 0x3B	; 59
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_u8SetPinValue+0x98>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_u8SetPinValue+0x94>
 344:	84 2b       	or	r24, r20
 346:	8c 93       	st	X, r24
 348:	9a c0       	rjmp	.+308    	; 0x47e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
 34a:	ab e3       	ldi	r26, 0x3B	; 59
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	eb e3       	ldi	r30, 0x3B	; 59
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8b 81       	ldd	r24, Y+3	; 0x03
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_u8SetPinValue+0xc0>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_u8SetPinValue+0xbc>
 36c:	80 95       	com	r24
 36e:	84 23       	and	r24, r20
 370:	8c 93       	st	X, r24
 372:	85 c0       	rjmp	.+266    	; 0x47e <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTB:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	a1 f4       	brne	.+40     	; 0x3a2 <DIO_u8SetPinValue+0xfa>
	       	   {
			       SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
 37a:	a8 e3       	ldi	r26, 0x38	; 56
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e8 e3       	ldi	r30, 0x38	; 56
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 2e       	mov	r0, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_u8SetPinValue+0xf0>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_u8SetPinValue+0xec>
 39c:	84 2b       	or	r24, r20
 39e:	8c 93       	st	X, r24
 3a0:	6e c0       	rjmp	.+220    	; 0x47e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
 3a2:	a8 e3       	ldi	r26, 0x38	; 56
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	e8 e3       	ldi	r30, 0x38	; 56
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8SetPinValue+0x118>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8SetPinValue+0x114>
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	59 c0       	rjmp	.+178    	; 0x47e <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTC:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	a1 f4       	brne	.+40     	; 0x3fa <DIO_u8SetPinValue+0x152>
	       	   {
			       SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
 3d2:	a5 e3       	ldi	r26, 0x35	; 53
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e5 e3       	ldi	r30, 0x35	; 53
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_u8SetPinValue+0x148>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_u8SetPinValue+0x144>
 3f4:	84 2b       	or	r24, r20
 3f6:	8c 93       	st	X, r24
 3f8:	42 c0       	rjmp	.+132    	; 0x47e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
 3fa:	a5 e3       	ldi	r26, 0x35	; 53
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e5 e3       	ldi	r30, 0x35	; 53
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	48 2f       	mov	r20, r24
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 2e       	mov	r0, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_u8SetPinValue+0x170>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_u8SetPinValue+0x16c>
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	8c 93       	st	X, r24
 422:	2d c0       	rjmp	.+90     	; 0x47e <DIO_u8SetPinValue+0x1d6>
			   }
		  break;
		  case DIO_U8_PORTD:
		       if(copy_u8PinValue==DIO_U8_OUTPUT)
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	a1 f4       	brne	.+40     	; 0x452 <DIO_u8SetPinValue+0x1aa>
	       	   {
			       SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
 42a:	a2 e3       	ldi	r26, 0x32	; 50
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e2 e3       	ldi	r30, 0x32	; 50
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_u8SetPinValue+0x1a0>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_u8SetPinValue+0x19c>
 44c:	84 2b       	or	r24, r20
 44e:	8c 93       	st	X, r24
 450:	16 c0       	rjmp	.+44     	; 0x47e <DIO_u8SetPinValue+0x1d6>
		       }
		       else
			   {
				   CLE_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
 452:	a2 e3       	ldi	r26, 0x32	; 50
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	e2 e3       	ldi	r30, 0x32	; 50
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	48 2f       	mov	r20, r24
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 2e       	mov	r0, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_u8SetPinValue+0x1c8>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_u8SetPinValue+0x1c4>
 474:	80 95       	com	r24
 476:	84 23       	and	r24, r20
 478:	8c 93       	st	X, r24
 47a:	01 c0       	rjmp	.+2      	; 0x47e <DIO_u8SetPinValue+0x1d6>
		  
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK; 
 47c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
 47e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 480:	26 96       	adiw	r28, 0x06	; 6
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	cf 91       	pop	r28
 48e:	df 91       	pop	r29
 490:	08 95       	ret

00000492 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue )
{
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	27 97       	sbiw	r28, 0x07	; 7
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	8a 83       	std	Y+2, r24	; 0x02
 4a8:	6b 83       	std	Y+3, r22	; 0x03
 4aa:	5d 83       	std	Y+5, r21	; 0x05
 4ac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState = STD_TYPES_OK;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<= DIO_U8_PORTD) && (copy_u8PinId <=DIO_U8_PIN7))
 4b2:	8a 81       	ldd	r24, Y+2	; 0x02
 4b4:	84 30       	cpi	r24, 0x04	; 4
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <DIO_u8GetPinValue+0x28>
 4b8:	75 c0       	rjmp	.+234    	; 0x5a4 <DIO_u8GetPinValue+0x112>
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	88 30       	cpi	r24, 0x08	; 8
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <DIO_u8GetPinValue+0x30>
 4c0:	71 c0       	rjmp	.+226    	; 0x5a4 <DIO_u8GetPinValue+0x112>
	{
	 switch(copy_u8PortId)
 4c2:	8a 81       	ldd	r24, Y+2	; 0x02
 4c4:	28 2f       	mov	r18, r24
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	3f 83       	std	Y+7, r19	; 0x07
 4ca:	2e 83       	std	Y+6, r18	; 0x06
 4cc:	4e 81       	ldd	r20, Y+6	; 0x06
 4ce:	5f 81       	ldd	r21, Y+7	; 0x07
 4d0:	41 30       	cpi	r20, 0x01	; 1
 4d2:	51 05       	cpc	r21, r1
 4d4:	59 f1       	breq	.+86     	; 0x52c <DIO_u8GetPinValue+0x9a>
 4d6:	8e 81       	ldd	r24, Y+6	; 0x06
 4d8:	9f 81       	ldd	r25, Y+7	; 0x07
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	91 05       	cpc	r25, r1
 4de:	34 f4       	brge	.+12     	; 0x4ec <DIO_u8GetPinValue+0x5a>
 4e0:	2e 81       	ldd	r18, Y+6	; 0x06
 4e2:	3f 81       	ldd	r19, Y+7	; 0x07
 4e4:	21 15       	cp	r18, r1
 4e6:	31 05       	cpc	r19, r1
 4e8:	69 f0       	breq	.+26     	; 0x504 <DIO_u8GetPinValue+0x72>
 4ea:	5d c0       	rjmp	.+186    	; 0x5a6 <DIO_u8GetPinValue+0x114>
 4ec:	4e 81       	ldd	r20, Y+6	; 0x06
 4ee:	5f 81       	ldd	r21, Y+7	; 0x07
 4f0:	42 30       	cpi	r20, 0x02	; 2
 4f2:	51 05       	cpc	r21, r1
 4f4:	79 f1       	breq	.+94     	; 0x554 <DIO_u8GetPinValue+0xc2>
 4f6:	8e 81       	ldd	r24, Y+6	; 0x06
 4f8:	9f 81       	ldd	r25, Y+7	; 0x07
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	91 05       	cpc	r25, r1
 4fe:	09 f4       	brne	.+2      	; 0x502 <DIO_u8GetPinValue+0x70>
 500:	3d c0       	rjmp	.+122    	; 0x57c <DIO_u8GetPinValue+0xea>
 502:	51 c0       	rjmp	.+162    	; 0x5a6 <DIO_u8GetPinValue+0x114>
	  {
		 case DIO_U8_PORTA:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
 504:	e9 e3       	ldi	r30, 0x39	; 57
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	a9 01       	movw	r20, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_u8GetPinValue+0x8a>
 518:	55 95       	asr	r21
 51a:	47 95       	ror	r20
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_u8GetPinValue+0x86>
 520:	ca 01       	movw	r24, r20
 522:	81 70       	andi	r24, 0x01	; 1
 524:	ec 81       	ldd	r30, Y+4	; 0x04
 526:	fd 81       	ldd	r31, Y+5	; 0x05
 528:	80 83       	st	Z, r24
 52a:	3d c0       	rjmp	.+122    	; 0x5a6 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTB:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
 52c:	e6 e3       	ldi	r30, 0x36	; 54
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	a9 01       	movw	r20, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8GetPinValue+0xb2>
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8GetPinValue+0xae>
 548:	ca 01       	movw	r24, r20
 54a:	81 70       	andi	r24, 0x01	; 1
 54c:	ec 81       	ldd	r30, Y+4	; 0x04
 54e:	fd 81       	ldd	r31, Y+5	; 0x05
 550:	80 83       	st	Z, r24
 552:	29 c0       	rjmp	.+82     	; 0x5a6 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTC:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
 554:	e3 e3       	ldi	r30, 0x33	; 51
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	28 2f       	mov	r18, r24
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	88 2f       	mov	r24, r24
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	a9 01       	movw	r20, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_u8GetPinValue+0xda>
 568:	55 95       	asr	r21
 56a:	47 95       	ror	r20
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_u8GetPinValue+0xd6>
 570:	ca 01       	movw	r24, r20
 572:	81 70       	andi	r24, 0x01	; 1
 574:	ec 81       	ldd	r30, Y+4	; 0x04
 576:	fd 81       	ldd	r31, Y+5	; 0x05
 578:	80 83       	st	Z, r24
 57a:	15 c0       	rjmp	.+42     	; 0x5a6 <DIO_u8GetPinValue+0x114>
		
		 break;
		 case DIO_U8_PORTD:
		 
			  *copy_pu8PinValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
 57c:	e0 e3       	ldi	r30, 0x30	; 48
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	88 2f       	mov	r24, r24
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	a9 01       	movw	r20, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_u8GetPinValue+0x102>
 590:	55 95       	asr	r21
 592:	47 95       	ror	r20
 594:	8a 95       	dec	r24
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_u8GetPinValue+0xfe>
 598:	ca 01       	movw	r24, r20
 59a:	81 70       	andi	r24, 0x01	; 1
 59c:	ec 81       	ldd	r30, Y+4	; 0x04
 59e:	fd 81       	ldd	r31, Y+5	; 0x05
 5a0:	80 83       	st	Z, r24
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <DIO_u8GetPinValue+0x114>
		 break;
	  }
	}
	else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
 5a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5a8:	27 96       	adiw	r28, 0x07	; 7
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	cf 91       	pop	r28
 5b6:	df 91       	pop	r29
 5b8:	08 95       	ret

000005ba <DIO_u8SetPortDirction>:

u8 DIO_u8SetPortDirction(u8 copy_u8PortId,u8 copy_u8PortDirction )
{
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2d 97       	sbiw	r28, 0x0d	; 13
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	8a 83       	std	Y+2, r24	; 0x02
 5d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortDirction<=DIO_U8_OUTPUT))
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	84 30       	cpi	r24, 0x04	; 4
 5da:	08 f0       	brcs	.+2      	; 0x5de <DIO_u8SetPortDirction+0x24>
 5dc:	6b c0       	rjmp	.+214    	; 0x6b4 <DIO_u8SetPortDirction+0xfa>
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	82 30       	cpi	r24, 0x02	; 2
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <DIO_u8SetPortDirction+0x2c>
 5e4:	67 c0       	rjmp	.+206    	; 0x6b4 <DIO_u8SetPortDirction+0xfa>
	{
		switch(copy_u8PortId)
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	3d 87       	std	Y+13, r19	; 0x0d
 5ee:	2c 87       	std	Y+12, r18	; 0x0c
 5f0:	8c 85       	ldd	r24, Y+12	; 0x0c
 5f2:	9d 85       	ldd	r25, Y+13	; 0x0d
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	91 05       	cpc	r25, r1
 5f8:	39 f1       	breq	.+78     	; 0x648 <DIO_u8SetPortDirction+0x8e>
 5fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 5fc:	3d 85       	ldd	r19, Y+13	; 0x0d
 5fe:	22 30       	cpi	r18, 0x02	; 2
 600:	31 05       	cpc	r19, r1
 602:	2c f4       	brge	.+10     	; 0x60e <DIO_u8SetPortDirction+0x54>
 604:	8c 85       	ldd	r24, Y+12	; 0x0c
 606:	9d 85       	ldd	r25, Y+13	; 0x0d
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	61 f0       	breq	.+24     	; 0x624 <DIO_u8SetPortDirction+0x6a>
 60c:	54 c0       	rjmp	.+168    	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
 60e:	2c 85       	ldd	r18, Y+12	; 0x0c
 610:	3d 85       	ldd	r19, Y+13	; 0x0d
 612:	22 30       	cpi	r18, 0x02	; 2
 614:	31 05       	cpc	r19, r1
 616:	51 f1       	breq	.+84     	; 0x66c <DIO_u8SetPortDirction+0xb2>
 618:	8c 85       	ldd	r24, Y+12	; 0x0c
 61a:	9d 85       	ldd	r25, Y+13	; 0x0d
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	91 05       	cpc	r25, r1
 620:	b9 f1       	breq	.+110    	; 0x690 <DIO_u8SetPortDirction+0xd6>
 622:	49 c0       	rjmp	.+146    	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
 624:	8b 81       	ldd	r24, Y+3	; 0x03
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	41 f4       	brne	.+16     	; 0x63a <DIO_u8SetPortDirction+0x80>
			     { 
			     SET_PORT(DIO_U8_DDRA_REG);	
 62a:	ea e3       	ldi	r30, 0x3A	; 58
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	90 81       	ld	r25, Z
 630:	ea e3       	ldi	r30, 0x3A	; 58
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	80 83       	st	Z, r24
 638:	3e c0       	rjmp	.+124    	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRA_REG);
 63a:	ea e3       	ldi	r30, 0x3A	; 58
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	20 81       	ld	r18, Z
 640:	ea e3       	ldi	r30, 0x3A	; 58
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	10 82       	st	Z, r1
 646:	37 c0       	rjmp	.+110    	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	41 f4       	brne	.+16     	; 0x65e <DIO_u8SetPortDirction+0xa4>
			     { 
			     SET_PORT(DIO_U8_DDRB_REG);	
 64e:	e7 e3       	ldi	r30, 0x37	; 55
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	30 81       	ld	r19, Z
 654:	e7 e3       	ldi	r30, 0x37	; 55
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	80 83       	st	Z, r24
 65c:	2c c0       	rjmp	.+88     	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRB_REG);
 65e:	e7 e3       	ldi	r30, 0x37	; 55
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	e7 e3       	ldi	r30, 0x37	; 55
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	10 82       	st	Z, r1
 66a:	25 c0       	rjmp	.+74     	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	41 f4       	brne	.+16     	; 0x682 <DIO_u8SetPortDirction+0xc8>
			     { 
			     SET_PORT(DIO_U8_DDRC_REG);	
 672:	e4 e3       	ldi	r30, 0x34	; 52
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	90 81       	ld	r25, Z
 678:	e4 e3       	ldi	r30, 0x34	; 52
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	80 83       	st	Z, r24
 680:	1a c0       	rjmp	.+52     	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRC_REG);
 682:	e4 e3       	ldi	r30, 0x34	; 52
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	20 81       	ld	r18, Z
 688:	e4 e3       	ldi	r30, 0x34	; 52
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	10 82       	st	Z, r1
 68e:	13 c0       	rjmp	.+38     	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortDirction==DIO_U8_OUTPUT)
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	41 f4       	brne	.+16     	; 0x6a6 <DIO_u8SetPortDirction+0xec>
			     { 
			     SET_PORT(DIO_U8_DDRD_REG);	
 696:	e1 e3       	ldi	r30, 0x31	; 49
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	30 81       	ld	r19, Z
 69c:	e1 e3       	ldi	r30, 0x31	; 49
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	80 83       	st	Z, r24
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_DDRD_REG);
 6a6:	e1 e3       	ldi	r30, 0x31	; 49
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	e1 e3       	ldi	r30, 0x31	; 49
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	10 82       	st	Z, r1
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <DIO_u8SetPortDirction+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
 6b4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;	
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b8:	2d 96       	adiw	r28, 0x0d	; 13
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	cf 91       	pop	r28
 6c6:	df 91       	pop	r29
 6c8:	08 95       	ret

000006ca <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue)
{
 6ca:	df 93       	push	r29
 6cc:	cf 93       	push	r28
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	2d 97       	sbiw	r28, 0x0d	; 13
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	8a 83       	std	Y+2, r24	; 0x02
 6e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD) && (copy_u8PortValue<=DIO_U8_OUTPUT))
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	84 30       	cpi	r24, 0x04	; 4
 6ea:	08 f0       	brcs	.+2      	; 0x6ee <DIO_u8SetPortValue+0x24>
 6ec:	6b c0       	rjmp	.+214    	; 0x7c4 <DIO_u8SetPortValue+0xfa>
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	82 30       	cpi	r24, 0x02	; 2
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <DIO_u8SetPortValue+0x2c>
 6f4:	67 c0       	rjmp	.+206    	; 0x7c4 <DIO_u8SetPortValue+0xfa>
	{
		switch(copy_u8PortId)
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	3d 87       	std	Y+13, r19	; 0x0d
 6fe:	2c 87       	std	Y+12, r18	; 0x0c
 700:	8c 85       	ldd	r24, Y+12	; 0x0c
 702:	9d 85       	ldd	r25, Y+13	; 0x0d
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	91 05       	cpc	r25, r1
 708:	39 f1       	breq	.+78     	; 0x758 <DIO_u8SetPortValue+0x8e>
 70a:	2c 85       	ldd	r18, Y+12	; 0x0c
 70c:	3d 85       	ldd	r19, Y+13	; 0x0d
 70e:	22 30       	cpi	r18, 0x02	; 2
 710:	31 05       	cpc	r19, r1
 712:	2c f4       	brge	.+10     	; 0x71e <DIO_u8SetPortValue+0x54>
 714:	8c 85       	ldd	r24, Y+12	; 0x0c
 716:	9d 85       	ldd	r25, Y+13	; 0x0d
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	61 f0       	breq	.+24     	; 0x734 <DIO_u8SetPortValue+0x6a>
 71c:	54 c0       	rjmp	.+168    	; 0x7c6 <DIO_u8SetPortValue+0xfc>
 71e:	2c 85       	ldd	r18, Y+12	; 0x0c
 720:	3d 85       	ldd	r19, Y+13	; 0x0d
 722:	22 30       	cpi	r18, 0x02	; 2
 724:	31 05       	cpc	r19, r1
 726:	51 f1       	breq	.+84     	; 0x77c <DIO_u8SetPortValue+0xb2>
 728:	8c 85       	ldd	r24, Y+12	; 0x0c
 72a:	9d 85       	ldd	r25, Y+13	; 0x0d
 72c:	83 30       	cpi	r24, 0x03	; 3
 72e:	91 05       	cpc	r25, r1
 730:	b9 f1       	breq	.+110    	; 0x7a0 <DIO_u8SetPortValue+0xd6>
 732:	49 c0       	rjmp	.+146    	; 0x7c6 <DIO_u8SetPortValue+0xfc>
		{
			case DIO_U8_PORTA:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
 734:	8b 81       	ldd	r24, Y+3	; 0x03
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	41 f4       	brne	.+16     	; 0x74a <DIO_u8SetPortValue+0x80>
			     {
			     SET_PORT(DIO_U8_PORTA_REG);
 73a:	eb e3       	ldi	r30, 0x3B	; 59
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	90 81       	ld	r25, Z
 740:	eb e3       	ldi	r30, 0x3B	; 59
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	80 83       	st	Z, r24
 748:	3e c0       	rjmp	.+124    	; 0x7c6 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTA_REG);
 74a:	eb e3       	ldi	r30, 0x3B	; 59
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	20 81       	ld	r18, Z
 750:	eb e3       	ldi	r30, 0x3B	; 59
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	10 82       	st	Z, r1
 756:	37 c0       	rjmp	.+110    	; 0x7c6 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTB:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
 758:	8b 81       	ldd	r24, Y+3	; 0x03
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	41 f4       	brne	.+16     	; 0x76e <DIO_u8SetPortValue+0xa4>
			     { 
			     SET_PORT(DIO_U8_PORTB_REG);
 75e:	e8 e3       	ldi	r30, 0x38	; 56
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	30 81       	ld	r19, Z
 764:	e8 e3       	ldi	r30, 0x38	; 56
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	8f ef       	ldi	r24, 0xFF	; 255
 76a:	80 83       	st	Z, r24
 76c:	2c c0       	rjmp	.+88     	; 0x7c6 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTB_REG);
 76e:	e8 e3       	ldi	r30, 0x38	; 56
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	e8 e3       	ldi	r30, 0x38	; 56
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	10 82       	st	Z, r1
 77a:	25 c0       	rjmp	.+74     	; 0x7c6 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTC:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	41 f4       	brne	.+16     	; 0x792 <DIO_u8SetPortValue+0xc8>
			     { 
			     SET_PORT(DIO_U8_PORTC_REG);
 782:	e5 e3       	ldi	r30, 0x35	; 53
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	90 81       	ld	r25, Z
 788:	e5 e3       	ldi	r30, 0x35	; 53
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	80 83       	st	Z, r24
 790:	1a c0       	rjmp	.+52     	; 0x7c6 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTC_REG);
 792:	e5 e3       	ldi	r30, 0x35	; 53
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	20 81       	ld	r18, Z
 798:	e5 e3       	ldi	r30, 0x35	; 53
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	10 82       	st	Z, r1
 79e:	13 c0       	rjmp	.+38     	; 0x7c6 <DIO_u8SetPortValue+0xfc>
	       		 }
     		break;
			case DIO_U8_PORTD:
			     if(copy_u8PortValue==DIO_U8_OUTPUT)
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	41 f4       	brne	.+16     	; 0x7b6 <DIO_u8SetPortValue+0xec>
			     { 
			     SET_PORT(DIO_U8_PORTD_REG);
 7a6:	e2 e3       	ldi	r30, 0x32	; 50
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	30 81       	ld	r19, Z
 7ac:	e2 e3       	ldi	r30, 0x32	; 50
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	80 83       	st	Z, r24
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <DIO_u8SetPortValue+0xfc>
			     }
			     else
			     {
			      CLE_PORT(DIO_U8_PORTD_REG);
 7b6:	e2 e3       	ldi	r30, 0x32	; 50
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	e2 e3       	ldi	r30, 0x32	; 50
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	10 82       	st	Z, r1
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <DIO_u8SetPortValue+0xfc>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
 7c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
}
 7c8:	2d 96       	adiw	r28, 0x0d	; 13
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	cf 91       	pop	r28
 7d6:	df 91       	pop	r29
 7d8:	08 95       	ret

000007da <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 copy_u8PortId, u8 *copy_pu8PortValue)
{
 7da:	df 93       	push	r29
 7dc:	cf 93       	push	r28
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <DIO_u8GetPortValue+0x6>
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <DIO_u8GetPortValue+0x8>
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <DIO_u8GetPortValue+0xa>
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	8a 83       	std	Y+2, r24	; 0x02
 7ea:	7c 83       	std	Y+4, r23	; 0x04
 7ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState = STD_TYPES_OK; 	
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_U8_PORTD)
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	84 30       	cpi	r24, 0x04	; 4
 7f6:	d8 f5       	brcc	.+118    	; 0x86e <__stack+0xf>
	{
		switch(copy_u8PortId)
 7f8:	8a 81       	ldd	r24, Y+2	; 0x02
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	3e 83       	std	Y+6, r19	; 0x06
 800:	2d 83       	std	Y+5, r18	; 0x05
 802:	8d 81       	ldd	r24, Y+5	; 0x05
 804:	9e 81       	ldd	r25, Y+6	; 0x06
 806:	81 30       	cpi	r24, 0x01	; 1
 808:	91 05       	cpc	r25, r1
 80a:	e1 f0       	breq	.+56     	; 0x844 <DIO_u8GetPortValue+0x6a>
 80c:	2d 81       	ldd	r18, Y+5	; 0x05
 80e:	3e 81       	ldd	r19, Y+6	; 0x06
 810:	22 30       	cpi	r18, 0x02	; 2
 812:	31 05       	cpc	r19, r1
 814:	2c f4       	brge	.+10     	; 0x820 <DIO_u8GetPortValue+0x46>
 816:	8d 81       	ldd	r24, Y+5	; 0x05
 818:	9e 81       	ldd	r25, Y+6	; 0x06
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	61 f0       	breq	.+24     	; 0x836 <DIO_u8GetPortValue+0x5c>
 81e:	28 c0       	rjmp	.+80     	; 0x870 <__stack+0x11>
 820:	2d 81       	ldd	r18, Y+5	; 0x05
 822:	3e 81       	ldd	r19, Y+6	; 0x06
 824:	22 30       	cpi	r18, 0x02	; 2
 826:	31 05       	cpc	r19, r1
 828:	a1 f0       	breq	.+40     	; 0x852 <DIO_u8GetPortValue+0x78>
 82a:	8d 81       	ldd	r24, Y+5	; 0x05
 82c:	9e 81       	ldd	r25, Y+6	; 0x06
 82e:	83 30       	cpi	r24, 0x03	; 3
 830:	91 05       	cpc	r25, r1
 832:	b1 f0       	breq	.+44     	; 0x860 <__stack+0x1>
 834:	1d c0       	rjmp	.+58     	; 0x870 <__stack+0x11>
		{
			case DIO_U8_PORTA:
			   
			   *copy_pu8PortValue = GET_PORT(DIO_U8_PORTA_REG);
 836:	eb e3       	ldi	r30, 0x3B	; 59
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	eb 81       	ldd	r30, Y+3	; 0x03
 83e:	fc 81       	ldd	r31, Y+4	; 0x04
 840:	80 83       	st	Z, r24
 842:	16 c0       	rjmp	.+44     	; 0x870 <__stack+0x11>
			    
     		break;
			case DIO_U8_PORTB:
			    
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTB_REG);
 844:	e8 e3       	ldi	r30, 0x38	; 56
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	eb 81       	ldd	r30, Y+3	; 0x03
 84c:	fc 81       	ldd	r31, Y+4	; 0x04
 84e:	80 83       	st	Z, r24
 850:	0f c0       	rjmp	.+30     	; 0x870 <__stack+0x11>
			
     		break;
			case DIO_U8_PORTC:
			     
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTC_REG);
 852:	e5 e3       	ldi	r30, 0x35	; 53
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	eb 81       	ldd	r30, Y+3	; 0x03
 85a:	fc 81       	ldd	r31, Y+4	; 0x04
 85c:	80 83       	st	Z, r24
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__stack+0x11>
			   
     		break;
			case DIO_U8_PORTD:
			 
				*copy_pu8PortValue = GET_PORT(DIO_U8_PORTD_REG);
 860:	e2 e3       	ldi	r30, 0x32	; 50
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	eb 81       	ldd	r30, Y+3	; 0x03
 868:	fc 81       	ldd	r31, Y+4	; 0x04
 86a:	80 83       	st	Z, r24
 86c:	01 c0       	rjmp	.+2      	; 0x870 <__stack+0x11>
     		break;
		}
	}
    else
	{
	Local_u8ErorrState =STD_TYPES_NOK;	
 86e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErorrState;
 870:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 872:	26 96       	adiw	r28, 0x06	; 6
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <DIO_u8AnalogPort>:
u8 DIO_u8AnalogPort(u8 copy_u8PortId,u8 copy_u8PortValue)
{
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	00 d0       	rcall	.+0      	; 0x88a <DIO_u8AnalogPort+0x6>
 88a:	00 d0       	rcall	.+0      	; 0x88c <DIO_u8AnalogPort+0x8>
 88c:	0f 92       	push	r0
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	8a 83       	std	Y+2, r24	; 0x02
 894:	6b 83       	std	Y+3, r22	; 0x03
    u8	Local_u8ErorrState =STD_TYPES_OK;
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_U8_PORTD)  &&  (copy_u8PortValue<= 0xff))
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	84 30       	cpi	r24, 0x04	; 4
 89e:	98 f5       	brcc	.+102    	; 0x906 <DIO_u8AnalogPort+0x82>
	{
		switch(copy_u8PortId)
 8a0:	8a 81       	ldd	r24, Y+2	; 0x02
 8a2:	28 2f       	mov	r18, r24
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	3d 83       	std	Y+5, r19	; 0x05
 8a8:	2c 83       	std	Y+4, r18	; 0x04
 8aa:	8c 81       	ldd	r24, Y+4	; 0x04
 8ac:	9d 81       	ldd	r25, Y+5	; 0x05
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	91 05       	cpc	r25, r1
 8b2:	d1 f0       	breq	.+52     	; 0x8e8 <DIO_u8AnalogPort+0x64>
 8b4:	2c 81       	ldd	r18, Y+4	; 0x04
 8b6:	3d 81       	ldd	r19, Y+5	; 0x05
 8b8:	22 30       	cpi	r18, 0x02	; 2
 8ba:	31 05       	cpc	r19, r1
 8bc:	2c f4       	brge	.+10     	; 0x8c8 <DIO_u8AnalogPort+0x44>
 8be:	8c 81       	ldd	r24, Y+4	; 0x04
 8c0:	9d 81       	ldd	r25, Y+5	; 0x05
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	61 f0       	breq	.+24     	; 0x8de <DIO_u8AnalogPort+0x5a>
 8c6:	20 c0       	rjmp	.+64     	; 0x908 <DIO_u8AnalogPort+0x84>
 8c8:	2c 81       	ldd	r18, Y+4	; 0x04
 8ca:	3d 81       	ldd	r19, Y+5	; 0x05
 8cc:	22 30       	cpi	r18, 0x02	; 2
 8ce:	31 05       	cpc	r19, r1
 8d0:	81 f0       	breq	.+32     	; 0x8f2 <DIO_u8AnalogPort+0x6e>
 8d2:	8c 81       	ldd	r24, Y+4	; 0x04
 8d4:	9d 81       	ldd	r25, Y+5	; 0x05
 8d6:	83 30       	cpi	r24, 0x03	; 3
 8d8:	91 05       	cpc	r25, r1
 8da:	81 f0       	breq	.+32     	; 0x8fc <DIO_u8AnalogPort+0x78>
 8dc:	15 c0       	rjmp	.+42     	; 0x908 <DIO_u8AnalogPort+0x84>
		{
		case DIO_U8_PORTA:

			DIO_U8_PORTA_REG = copy_u8PortValue;
 8de:	eb e3       	ldi	r30, 0x3B	; 59
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	80 83       	st	Z, r24
 8e6:	10 c0       	rjmp	.+32     	; 0x908 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTB:

			 DIO_U8_PORTB_REG = copy_u8PortValue;
 8e8:	e8 e3       	ldi	r30, 0x38	; 56
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	8b 81       	ldd	r24, Y+3	; 0x03
 8ee:	80 83       	st	Z, r24
 8f0:	0b c0       	rjmp	.+22     	; 0x908 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTC:

			DIO_U8_PORTC_REG = copy_u8PortValue;
 8f2:	e5 e3       	ldi	r30, 0x35	; 53
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	80 83       	st	Z, r24
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <DIO_u8AnalogPort+0x84>
		break;
		case DIO_U8_PORTD:

			 DIO_U8_PORTD_REG = copy_u8PortValue;
 8fc:	e2 e3       	ldi	r30, 0x32	; 50
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	80 83       	st	Z, r24
 904:	01 c0       	rjmp	.+2      	; 0x908 <DIO_u8AnalogPort+0x84>
		break;
		}
	}
	else
	{
		Local_u8ErorrState =STD_TYPES_NOK;
 906:	19 82       	std	Y+1, r1	; 0x01
	}
		return Local_u8ErorrState;
 908:	89 81       	ldd	r24, Y+1	; 0x01
}
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	08 95       	ret

0000091a <EXTI_u8enable>:

static void (*EXTI_Aptrtofun[3])(void)={NULL,NULL,NULL};


u8 EXTI_u8enable(u8 num_u8ofintrrpt,u8 copy_u8edge)
{
 91a:	df 93       	push	r29
 91c:	cf 93       	push	r28
 91e:	00 d0       	rcall	.+0      	; 0x920 <EXTI_u8enable+0x6>
 920:	0f 92       	push	r0
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	6a 83       	std	Y+2, r22	; 0x02

  
  if(num_u8ofintrrpt==EXTI_U8_INT0)
 92a:	89 81       	ldd	r24, Y+1	; 0x01
 92c:	86 30       	cpi	r24, 0x06	; 6
 92e:	09 f0       	breq	.+2      	; 0x932 <EXTI_u8enable+0x18>
 930:	95 c0       	rjmp	.+298    	; 0xa5c <EXTI_u8enable+0x142>
  {
   if(copy_u8edge==EXTI_U8_LOW_LEVWL)
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	11 f5       	brne	.+68     	; 0x97c <EXTI_u8enable+0x62>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
 938:	a5 e5       	ldi	r26, 0x55	; 85
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e5 e5       	ldi	r30, 0x55	; 85
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	8e 7f       	andi	r24, 0xFE	; 254
 944:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
 946:	a5 e5       	ldi	r26, 0x55	; 85
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e5 e5       	ldi	r30, 0x55	; 85
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	8d 7f       	andi	r24, 0xFD	; 253
 952:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 954:	ab e5       	ldi	r26, 0x5B	; 91
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	eb e5       	ldi	r30, 0x5B	; 91
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	48 2f       	mov	r20, r24
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	02 2e       	mov	r0, r18
 96c:	02 c0       	rjmp	.+4      	; 0x972 <EXTI_u8enable+0x58>
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	0a 94       	dec	r0
 974:	e2 f7       	brpl	.-8      	; 0x96e <EXTI_u8enable+0x54>
 976:	84 2b       	or	r24, r20
 978:	8c 93       	st	X, r24
 97a:	47 c1       	rjmp	.+654    	; 0xc0a <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_ANY_LOGICAL_CHANGE)
 97c:	8a 81       	ldd	r24, Y+2	; 0x02
 97e:	82 30       	cpi	r24, 0x02	; 2
 980:	11 f5       	brne	.+68     	; 0x9c6 <EXTI_u8enable+0xac>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
 982:	a5 e5       	ldi	r26, 0x55	; 85
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	e5 e5       	ldi	r30, 0x55	; 85
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	81 60       	ori	r24, 0x01	; 1
 98e:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
 990:	a5 e5       	ldi	r26, 0x55	; 85
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	e5 e5       	ldi	r30, 0x55	; 85
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	8d 7f       	andi	r24, 0xFD	; 253
 99c:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 99e:	ab e5       	ldi	r26, 0x5B	; 91
 9a0:	b0 e0       	ldi	r27, 0x00	; 0
 9a2:	eb e5       	ldi	r30, 0x5B	; 91
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	48 2f       	mov	r20, r24
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	28 2f       	mov	r18, r24
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 2e       	mov	r0, r18
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <EXTI_u8enable+0xa2>
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	0a 94       	dec	r0
 9be:	e2 f7       	brpl	.-8      	; 0x9b8 <EXTI_u8enable+0x9e>
 9c0:	84 2b       	or	r24, r20
 9c2:	8c 93       	st	X, r24
 9c4:	22 c1       	rjmp	.+580    	; 0xc0a <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_FALLING_EDGE)
 9c6:	8a 81       	ldd	r24, Y+2	; 0x02
 9c8:	83 30       	cpi	r24, 0x03	; 3
 9ca:	11 f5       	brne	.+68     	; 0xa10 <EXTI_u8enable+0xf6>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
 9cc:	a5 e5       	ldi	r26, 0x55	; 85
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	e5 e5       	ldi	r30, 0x55	; 85
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	8e 7f       	andi	r24, 0xFE	; 254
 9d8:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
 9da:	a5 e5       	ldi	r26, 0x55	; 85
 9dc:	b0 e0       	ldi	r27, 0x00	; 0
 9de:	e5 e5       	ldi	r30, 0x55	; 85
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	82 60       	ori	r24, 0x02	; 2
 9e6:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 9e8:	ab e5       	ldi	r26, 0x5B	; 91
 9ea:	b0 e0       	ldi	r27, 0x00	; 0
 9ec:	eb e5       	ldi	r30, 0x5B	; 91
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	80 81       	ld	r24, Z
 9f2:	48 2f       	mov	r20, r24
 9f4:	89 81       	ldd	r24, Y+1	; 0x01
 9f6:	28 2f       	mov	r18, r24
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	02 2e       	mov	r0, r18
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <EXTI_u8enable+0xec>
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	0a 94       	dec	r0
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <EXTI_u8enable+0xe8>
 a0a:	84 2b       	or	r24, r20
 a0c:	8c 93       	st	X, r24
 a0e:	fd c0       	rjmp	.+506    	; 0xc0a <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_RISING_EDGE)
 a10:	8a 81       	ldd	r24, Y+2	; 0x02
 a12:	84 30       	cpi	r24, 0x04	; 4
 a14:	09 f0       	breq	.+2      	; 0xa18 <EXTI_u8enable+0xfe>
 a16:	f9 c0       	rjmp	.+498    	; 0xc0a <EXTI_u8enable+0x2f0>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC00);
 a18:	a5 e5       	ldi	r26, 0x55	; 85
 a1a:	b0 e0       	ldi	r27, 0x00	; 0
 a1c:	e5 e5       	ldi	r30, 0x55	; 85
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	80 81       	ld	r24, Z
 a22:	81 60       	ori	r24, 0x01	; 1
 a24:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC01);
 a26:	a5 e5       	ldi	r26, 0x55	; 85
 a28:	b0 e0       	ldi	r27, 0x00	; 0
 a2a:	e5 e5       	ldi	r30, 0x55	; 85
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	80 81       	ld	r24, Z
 a30:	82 60       	ori	r24, 0x02	; 2
 a32:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 a34:	ab e5       	ldi	r26, 0x5B	; 91
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	eb e5       	ldi	r30, 0x5B	; 91
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	80 81       	ld	r24, Z
 a3e:	48 2f       	mov	r20, r24
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	28 2f       	mov	r18, r24
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	02 2e       	mov	r0, r18
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <EXTI_u8enable+0x138>
 a4e:	88 0f       	add	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	0a 94       	dec	r0
 a54:	e2 f7       	brpl	.-8      	; 0xa4e <EXTI_u8enable+0x134>
 a56:	84 2b       	or	r24, r20
 a58:	8c 93       	st	X, r24
 a5a:	d7 c0       	rjmp	.+430    	; 0xc0a <EXTI_u8enable+0x2f0>
   }   
   }
   else if(num_u8ofintrrpt==EXTI_U8_INT1)
 a5c:	89 81       	ldd	r24, Y+1	; 0x01
 a5e:	87 30       	cpi	r24, 0x07	; 7
 a60:	09 f0       	breq	.+2      	; 0xa64 <EXTI_u8enable+0x14a>
 a62:	95 c0       	rjmp	.+298    	; 0xb8e <EXTI_u8enable+0x274>
   {
	 if(copy_u8edge==EXTI_U8_LOW_LEVWL)
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	11 f5       	brne	.+68     	; 0xaae <EXTI_u8enable+0x194>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
 a6a:	a5 e5       	ldi	r26, 0x55	; 85
 a6c:	b0 e0       	ldi	r27, 0x00	; 0
 a6e:	e5 e5       	ldi	r30, 0x55	; 85
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	80 81       	ld	r24, Z
 a74:	8b 7f       	andi	r24, 0xFB	; 251
 a76:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
 a78:	a5 e5       	ldi	r26, 0x55	; 85
 a7a:	b0 e0       	ldi	r27, 0x00	; 0
 a7c:	e5 e5       	ldi	r30, 0x55	; 85
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	87 7f       	andi	r24, 0xF7	; 247
 a84:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 a86:	ab e5       	ldi	r26, 0x5B	; 91
 a88:	b0 e0       	ldi	r27, 0x00	; 0
 a8a:	eb e5       	ldi	r30, 0x5B	; 91
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
 a90:	48 2f       	mov	r20, r24
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	28 2f       	mov	r18, r24
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	02 2e       	mov	r0, r18
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <EXTI_u8enable+0x18a>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	0a 94       	dec	r0
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <EXTI_u8enable+0x186>
 aa8:	84 2b       	or	r24, r20
 aaa:	8c 93       	st	X, r24
 aac:	ae c0       	rjmp	.+348    	; 0xc0a <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_ANY_LOGICAL_CHANGE)
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
 ab0:	82 30       	cpi	r24, 0x02	; 2
 ab2:	11 f5       	brne	.+68     	; 0xaf8 <EXTI_u8enable+0x1de>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
 ab4:	a5 e5       	ldi	r26, 0x55	; 85
 ab6:	b0 e0       	ldi	r27, 0x00	; 0
 ab8:	e5 e5       	ldi	r30, 0x55	; 85
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	84 60       	ori	r24, 0x04	; 4
 ac0:	8c 93       	st	X, r24
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
 ac2:	a5 e5       	ldi	r26, 0x55	; 85
 ac4:	b0 e0       	ldi	r27, 0x00	; 0
 ac6:	e5 e5       	ldi	r30, 0x55	; 85
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	80 81       	ld	r24, Z
 acc:	87 7f       	andi	r24, 0xF7	; 247
 ace:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 ad0:	ab e5       	ldi	r26, 0x5B	; 91
 ad2:	b0 e0       	ldi	r27, 0x00	; 0
 ad4:	eb e5       	ldi	r30, 0x5B	; 91
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	80 81       	ld	r24, Z
 ada:	48 2f       	mov	r20, r24
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	28 2f       	mov	r18, r24
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	02 2e       	mov	r0, r18
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <EXTI_u8enable+0x1d4>
 aea:	88 0f       	add	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	0a 94       	dec	r0
 af0:	e2 f7       	brpl	.-8      	; 0xaea <EXTI_u8enable+0x1d0>
 af2:	84 2b       	or	r24, r20
 af4:	8c 93       	st	X, r24
 af6:	89 c0       	rjmp	.+274    	; 0xc0a <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_FALLING_EDGE)
 af8:	8a 81       	ldd	r24, Y+2	; 0x02
 afa:	83 30       	cpi	r24, 0x03	; 3
 afc:	11 f5       	brne	.+68     	; 0xb42 <EXTI_u8enable+0x228>
   {
	  CLE_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
 afe:	a5 e5       	ldi	r26, 0x55	; 85
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	e5 e5       	ldi	r30, 0x55	; 85
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	8b 7f       	andi	r24, 0xFB	; 251
 b0a:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
 b0c:	a5 e5       	ldi	r26, 0x55	; 85
 b0e:	b0 e0       	ldi	r27, 0x00	; 0
 b10:	e5 e5       	ldi	r30, 0x55	; 85
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	80 81       	ld	r24, Z
 b16:	88 60       	ori	r24, 0x08	; 8
 b18:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 b1a:	ab e5       	ldi	r26, 0x5B	; 91
 b1c:	b0 e0       	ldi	r27, 0x00	; 0
 b1e:	eb e5       	ldi	r30, 0x5B	; 91
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	48 2f       	mov	r20, r24
 b26:	89 81       	ldd	r24, Y+1	; 0x01
 b28:	28 2f       	mov	r18, r24
 b2a:	30 e0       	ldi	r19, 0x00	; 0
 b2c:	81 e0       	ldi	r24, 0x01	; 1
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	02 2e       	mov	r0, r18
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <EXTI_u8enable+0x21e>
 b34:	88 0f       	add	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	0a 94       	dec	r0
 b3a:	e2 f7       	brpl	.-8      	; 0xb34 <EXTI_u8enable+0x21a>
 b3c:	84 2b       	or	r24, r20
 b3e:	8c 93       	st	X, r24
 b40:	64 c0       	rjmp	.+200    	; 0xc0a <EXTI_u8enable+0x2f0>
   }
   else if(copy_u8edge==EXTI_U8_RISING_EDGE)
 b42:	8a 81       	ldd	r24, Y+2	; 0x02
 b44:	84 30       	cpi	r24, 0x04	; 4
 b46:	09 f0       	breq	.+2      	; 0xb4a <EXTI_u8enable+0x230>
 b48:	60 c0       	rjmp	.+192    	; 0xc0a <EXTI_u8enable+0x2f0>
   {
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC10);
 b4a:	a5 e5       	ldi	r26, 0x55	; 85
 b4c:	b0 e0       	ldi	r27, 0x00	; 0
 b4e:	e5 e5       	ldi	r30, 0x55	; 85
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	80 81       	ld	r24, Z
 b54:	84 60       	ori	r24, 0x04	; 4
 b56:	8c 93       	st	X, r24
	  SET_BIT(EXTI_U8_MCUCR_REG,EXTI_U8_ISC11);
 b58:	a5 e5       	ldi	r26, 0x55	; 85
 b5a:	b0 e0       	ldi	r27, 0x00	; 0
 b5c:	e5 e5       	ldi	r30, 0x55	; 85
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	80 81       	ld	r24, Z
 b62:	88 60       	ori	r24, 0x08	; 8
 b64:	8c 93       	st	X, r24
      SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 b66:	ab e5       	ldi	r26, 0x5B	; 91
 b68:	b0 e0       	ldi	r27, 0x00	; 0
 b6a:	eb e5       	ldi	r30, 0x5B	; 91
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	48 2f       	mov	r20, r24
 b72:	89 81       	ldd	r24, Y+1	; 0x01
 b74:	28 2f       	mov	r18, r24
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	02 2e       	mov	r0, r18
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <EXTI_u8enable+0x26a>
 b80:	88 0f       	add	r24, r24
 b82:	99 1f       	adc	r25, r25
 b84:	0a 94       	dec	r0
 b86:	e2 f7       	brpl	.-8      	; 0xb80 <EXTI_u8enable+0x266>
 b88:	84 2b       	or	r24, r20
 b8a:	8c 93       	st	X, r24
 b8c:	3e c0       	rjmp	.+124    	; 0xc0a <EXTI_u8enable+0x2f0>
   }      
   }
   else if(num_u8ofintrrpt==EXTI_U8_INT2)
 b8e:	89 81       	ldd	r24, Y+1	; 0x01
 b90:	85 30       	cpi	r24, 0x05	; 5
 b92:	d9 f5       	brne	.+118    	; 0xc0a <EXTI_u8enable+0x2f0>
   {
	   if(copy_u8edge==EXTI_U8_FALLING_EDGE)
 b94:	8a 81       	ldd	r24, Y+2	; 0x02
 b96:	83 30       	cpi	r24, 0x03	; 3
 b98:	d9 f4       	brne	.+54     	; 0xbd0 <EXTI_u8enable+0x2b6>
	   {
		   CLE_BIT(EXTI_U8_MCUCSR_REG,EXTI_U8_ISC2);
 b9a:	a4 e5       	ldi	r26, 0x54	; 84
 b9c:	b0 e0       	ldi	r27, 0x00	; 0
 b9e:	e4 e5       	ldi	r30, 0x54	; 84
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	8f 7b       	andi	r24, 0xBF	; 191
 ba6:	8c 93       	st	X, r24
           SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 ba8:	ab e5       	ldi	r26, 0x5B	; 91
 baa:	b0 e0       	ldi	r27, 0x00	; 0
 bac:	eb e5       	ldi	r30, 0x5B	; 91
 bae:	f0 e0       	ldi	r31, 0x00	; 0
 bb0:	80 81       	ld	r24, Z
 bb2:	48 2f       	mov	r20, r24
 bb4:	89 81       	ldd	r24, Y+1	; 0x01
 bb6:	28 2f       	mov	r18, r24
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	02 2e       	mov	r0, r18
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <EXTI_u8enable+0x2ac>
 bc2:	88 0f       	add	r24, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	0a 94       	dec	r0
 bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <EXTI_u8enable+0x2a8>
 bca:	84 2b       	or	r24, r20
 bcc:	8c 93       	st	X, r24
 bce:	1d c0       	rjmp	.+58     	; 0xc0a <EXTI_u8enable+0x2f0>
	   }
	   else if(copy_u8edge==EXTI_U8_RISING_EDGE)
 bd0:	8a 81       	ldd	r24, Y+2	; 0x02
 bd2:	84 30       	cpi	r24, 0x04	; 4
 bd4:	d1 f4       	brne	.+52     	; 0xc0a <EXTI_u8enable+0x2f0>
	   {
		   SET_BIT(EXTI_U8_MCUCSR_REG,EXTI_U8_ISC2);
 bd6:	a4 e5       	ldi	r26, 0x54	; 84
 bd8:	b0 e0       	ldi	r27, 0x00	; 0
 bda:	e4 e5       	ldi	r30, 0x54	; 84
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	80 64       	ori	r24, 0x40	; 64
 be2:	8c 93       	st	X, r24
	       SET_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt)	;
 be4:	ab e5       	ldi	r26, 0x5B	; 91
 be6:	b0 e0       	ldi	r27, 0x00	; 0
 be8:	eb e5       	ldi	r30, 0x5B	; 91
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	80 81       	ld	r24, Z
 bee:	48 2f       	mov	r20, r24
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	28 2f       	mov	r18, r24
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	02 2e       	mov	r0, r18
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <EXTI_u8enable+0x2e8>
 bfe:	88 0f       	add	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	0a 94       	dec	r0
 c04:	e2 f7       	brpl	.-8      	; 0xbfe <EXTI_u8enable+0x2e4>
 c06:	84 2b       	or	r24, r20
 c08:	8c 93       	st	X, r24
	   }
   }
}
 c0a:	0f 90       	pop	r0
 c0c:	0f 90       	pop	r0
 c0e:	0f 90       	pop	r0
 c10:	cf 91       	pop	r28
 c12:	df 91       	pop	r29
 c14:	08 95       	ret

00000c16 <EXTI_u8disable>:


void EXTI_u8disable(u8 num_u8ofintrrpt)
{
 c16:	df 93       	push	r29
 c18:	cf 93       	push	r28
 c1a:	0f 92       	push	r0
 c1c:	cd b7       	in	r28, 0x3d	; 61
 c1e:	de b7       	in	r29, 0x3e	; 62
 c20:	89 83       	std	Y+1, r24	; 0x01

	 CLE_BIT(EXTI_U8_GICR_REG,num_u8ofintrrpt);
 c22:	ab e5       	ldi	r26, 0x5B	; 91
 c24:	b0 e0       	ldi	r27, 0x00	; 0
 c26:	eb e5       	ldi	r30, 0x5B	; 91
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	80 81       	ld	r24, Z
 c2c:	48 2f       	mov	r20, r24
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	28 2f       	mov	r18, r24
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	81 e0       	ldi	r24, 0x01	; 1
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	02 2e       	mov	r0, r18
 c3a:	02 c0       	rjmp	.+4      	; 0xc40 <EXTI_u8disable+0x2a>
 c3c:	88 0f       	add	r24, r24
 c3e:	99 1f       	adc	r25, r25
 c40:	0a 94       	dec	r0
 c42:	e2 f7       	brpl	.-8      	; 0xc3c <EXTI_u8disable+0x26>
 c44:	80 95       	com	r24
 c46:	84 23       	and	r24, r20
 c48:	8c 93       	st	X, r24
}
 c4a:	0f 90       	pop	r0
 c4c:	cf 91       	pop	r28
 c4e:	df 91       	pop	r29
 c50:	08 95       	ret

00000c52 <EXTI_u8EXTIsetcallback>:

u8 EXTI_u8EXTIsetcallback(u8 num_u8ofintrrpt,void(*copy_pfcallback)(void))
{
 c52:	df 93       	push	r29
 c54:	cf 93       	push	r28
 c56:	00 d0       	rcall	.+0      	; 0xc58 <EXTI_u8EXTIsetcallback+0x6>
 c58:	00 d0       	rcall	.+0      	; 0xc5a <EXTI_u8EXTIsetcallback+0x8>
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
 c5e:	8a 83       	std	Y+2, r24	; 0x02
 c60:	7c 83       	std	Y+4, r23	; 0x04
 c62:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errorstat =STD_TYPS_OK;
 c64:	81 e0       	ldi	r24, 0x01	; 1
 c66:	89 83       	std	Y+1, r24	; 0x01
	if((num_u8ofintrrpt<=EXTI_U8_INT2_call) && (copy_pfcallback !=NULL))
 c68:	8a 81       	ldd	r24, Y+2	; 0x02
 c6a:	83 30       	cpi	r24, 0x03	; 3
 c6c:	88 f4       	brcc	.+34     	; 0xc90 <EXTI_u8EXTIsetcallback+0x3e>
 c6e:	8b 81       	ldd	r24, Y+3	; 0x03
 c70:	9c 81       	ldd	r25, Y+4	; 0x04
 c72:	00 97       	sbiw	r24, 0x00	; 0
 c74:	69 f0       	breq	.+26     	; 0xc90 <EXTI_u8EXTIsetcallback+0x3e>
		{
	EXTI_Aptrtofun[num_u8ofintrrpt] = copy_pfcallback;
 c76:	8a 81       	ldd	r24, Y+2	; 0x02
 c78:	88 2f       	mov	r24, r24
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	88 0f       	add	r24, r24
 c7e:	99 1f       	adc	r25, r25
 c80:	fc 01       	movw	r30, r24
 c82:	e0 5a       	subi	r30, 0xA0	; 160
 c84:	ff 4f       	sbci	r31, 0xFF	; 255
 c86:	8b 81       	ldd	r24, Y+3	; 0x03
 c88:	9c 81       	ldd	r25, Y+4	; 0x04
 c8a:	91 83       	std	Z+1, r25	; 0x01
 c8c:	80 83       	st	Z, r24
 c8e:	01 c0       	rjmp	.+2      	; 0xc92 <EXTI_u8EXTIsetcallback+0x40>
}
else
   {
	   local_u8errorstat =STD_TYPS_NOK;
 c90:	19 82       	std	Y+1, r1	; 0x01
   }
     return  local_u8errorstat;
 c92:	89 81       	ldd	r24, Y+1	; 0x01
}
 c94:	0f 90       	pop	r0
 c96:	0f 90       	pop	r0
 c98:	0f 90       	pop	r0
 c9a:	0f 90       	pop	r0
 c9c:	cf 91       	pop	r28
 c9e:	df 91       	pop	r29
 ca0:	08 95       	ret

00000ca2 <__vector_1>:

void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
 ca2:	1f 92       	push	r1
 ca4:	0f 92       	push	r0
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	0f 92       	push	r0
 caa:	11 24       	eor	r1, r1
 cac:	2f 93       	push	r18
 cae:	3f 93       	push	r19
 cb0:	4f 93       	push	r20
 cb2:	5f 93       	push	r21
 cb4:	6f 93       	push	r22
 cb6:	7f 93       	push	r23
 cb8:	8f 93       	push	r24
 cba:	9f 93       	push	r25
 cbc:	af 93       	push	r26
 cbe:	bf 93       	push	r27
 cc0:	ef 93       	push	r30
 cc2:	ff 93       	push	r31
 cc4:	df 93       	push	r29
 cc6:	cf 93       	push	r28
 cc8:	cd b7       	in	r28, 0x3d	; 61
 cca:	de b7       	in	r29, 0x3e	; 62
  if(EXTI_Aptrtofun[EXTI_U8_INT0_call] !=NULL)
 ccc:	80 91 60 00 	lds	r24, 0x0060
 cd0:	90 91 61 00 	lds	r25, 0x0061
 cd4:	00 97       	sbiw	r24, 0x00	; 0
 cd6:	29 f0       	breq	.+10     	; 0xce2 <__vector_1+0x40>
  {
  EXTI_Aptrtofun[EXTI_U8_INT0_call]();
 cd8:	e0 91 60 00 	lds	r30, 0x0060
 cdc:	f0 91 61 00 	lds	r31, 0x0061
 ce0:	09 95       	icall
  }
}
 ce2:	cf 91       	pop	r28
 ce4:	df 91       	pop	r29
 ce6:	ff 91       	pop	r31
 ce8:	ef 91       	pop	r30
 cea:	bf 91       	pop	r27
 cec:	af 91       	pop	r26
 cee:	9f 91       	pop	r25
 cf0:	8f 91       	pop	r24
 cf2:	7f 91       	pop	r23
 cf4:	6f 91       	pop	r22
 cf6:	5f 91       	pop	r21
 cf8:	4f 91       	pop	r20
 cfa:	3f 91       	pop	r19
 cfc:	2f 91       	pop	r18
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	0f 90       	pop	r0
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti

00000d08 <__vector_2>:
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
 d08:	1f 92       	push	r1
 d0a:	0f 92       	push	r0
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	0f 92       	push	r0
 d10:	11 24       	eor	r1, r1
 d12:	2f 93       	push	r18
 d14:	3f 93       	push	r19
 d16:	4f 93       	push	r20
 d18:	5f 93       	push	r21
 d1a:	6f 93       	push	r22
 d1c:	7f 93       	push	r23
 d1e:	8f 93       	push	r24
 d20:	9f 93       	push	r25
 d22:	af 93       	push	r26
 d24:	bf 93       	push	r27
 d26:	ef 93       	push	r30
 d28:	ff 93       	push	r31
 d2a:	df 93       	push	r29
 d2c:	cf 93       	push	r28
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62

  if(EXTI_Aptrtofun[EXTI_U8_INT1_call] !=NULL)
 d32:	80 91 62 00 	lds	r24, 0x0062
 d36:	90 91 63 00 	lds	r25, 0x0063
 d3a:	00 97       	sbiw	r24, 0x00	; 0
 d3c:	29 f0       	breq	.+10     	; 0xd48 <__vector_2+0x40>
  {
  EXTI_Aptrtofun[EXTI_U8_INT1_call]();
 d3e:	e0 91 62 00 	lds	r30, 0x0062
 d42:	f0 91 63 00 	lds	r31, 0x0063
 d46:	09 95       	icall
  }
}
 d48:	cf 91       	pop	r28
 d4a:	df 91       	pop	r29
 d4c:	ff 91       	pop	r31
 d4e:	ef 91       	pop	r30
 d50:	bf 91       	pop	r27
 d52:	af 91       	pop	r26
 d54:	9f 91       	pop	r25
 d56:	8f 91       	pop	r24
 d58:	7f 91       	pop	r23
 d5a:	6f 91       	pop	r22
 d5c:	5f 91       	pop	r21
 d5e:	4f 91       	pop	r20
 d60:	3f 91       	pop	r19
 d62:	2f 91       	pop	r18
 d64:	0f 90       	pop	r0
 d66:	0f be       	out	0x3f, r0	; 63
 d68:	0f 90       	pop	r0
 d6a:	1f 90       	pop	r1
 d6c:	18 95       	reti

00000d6e <__vector_3>:
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
 d6e:	1f 92       	push	r1
 d70:	0f 92       	push	r0
 d72:	0f b6       	in	r0, 0x3f	; 63
 d74:	0f 92       	push	r0
 d76:	11 24       	eor	r1, r1
 d78:	2f 93       	push	r18
 d7a:	3f 93       	push	r19
 d7c:	4f 93       	push	r20
 d7e:	5f 93       	push	r21
 d80:	6f 93       	push	r22
 d82:	7f 93       	push	r23
 d84:	8f 93       	push	r24
 d86:	9f 93       	push	r25
 d88:	af 93       	push	r26
 d8a:	bf 93       	push	r27
 d8c:	ef 93       	push	r30
 d8e:	ff 93       	push	r31
 d90:	df 93       	push	r29
 d92:	cf 93       	push	r28
 d94:	cd b7       	in	r28, 0x3d	; 61
 d96:	de b7       	in	r29, 0x3e	; 62
	
  if(EXTI_Aptrtofun[EXTI_U8_INT2_call] !=NULL)
 d98:	80 91 64 00 	lds	r24, 0x0064
 d9c:	90 91 65 00 	lds	r25, 0x0065
 da0:	00 97       	sbiw	r24, 0x00	; 0
 da2:	29 f0       	breq	.+10     	; 0xdae <__vector_3+0x40>
  {
  EXTI_Aptrtofun[EXTI_U8_INT2_call]();
 da4:	e0 91 64 00 	lds	r30, 0x0064
 da8:	f0 91 65 00 	lds	r31, 0x0065
 dac:	09 95       	icall
  }

}
 dae:	cf 91       	pop	r28
 db0:	df 91       	pop	r29
 db2:	ff 91       	pop	r31
 db4:	ef 91       	pop	r30
 db6:	bf 91       	pop	r27
 db8:	af 91       	pop	r26
 dba:	9f 91       	pop	r25
 dbc:	8f 91       	pop	r24
 dbe:	7f 91       	pop	r23
 dc0:	6f 91       	pop	r22
 dc2:	5f 91       	pop	r21
 dc4:	4f 91       	pop	r20
 dc6:	3f 91       	pop	r19
 dc8:	2f 91       	pop	r18
 dca:	0f 90       	pop	r0
 dcc:	0f be       	out	0x3f, r0	; 63
 dce:	0f 90       	pop	r0
 dd0:	1f 90       	pop	r1
 dd2:	18 95       	reti

00000dd4 <GINT_u8_enable>:
#include  "GINT_interface.h"
#include  "GINT_private.h"


void GINT_u8_enable(void)
{
 dd4:	df 93       	push	r29
 dd6:	cf 93       	push	r28
 dd8:	cd b7       	in	r28, 0x3d	; 61
 dda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_U8_STAT_REG,GINT_U8_PIN7);
 ddc:	af e5       	ldi	r26, 0x5F	; 95
 dde:	b0 e0       	ldi	r27, 0x00	; 0
 de0:	ef e5       	ldi	r30, 0x5F	; 95
 de2:	f0 e0       	ldi	r31, 0x00	; 0
 de4:	80 81       	ld	r24, Z
 de6:	80 68       	ori	r24, 0x80	; 128
 de8:	8c 93       	st	X, r24
}
 dea:	cf 91       	pop	r28
 dec:	df 91       	pop	r29
 dee:	08 95       	ret

00000df0 <GINT_u8_desble>:

void GINT_u8_desble(void)
{
 df0:	df 93       	push	r29
 df2:	cf 93       	push	r28
 df4:	cd b7       	in	r28, 0x3d	; 61
 df6:	de b7       	in	r29, 0x3e	; 62
	CLE_BIT(GINT_U8_STAT_REG,GINT_U8_PIN7);
 df8:	af e5       	ldi	r26, 0x5F	; 95
 dfa:	b0 e0       	ldi	r27, 0x00	; 0
 dfc:	ef e5       	ldi	r30, 0x5F	; 95
 dfe:	f0 e0       	ldi	r31, 0x00	; 0
 e00:	80 81       	ld	r24, Z
 e02:	8f 77       	andi	r24, 0x7F	; 127
 e04:	8c 93       	st	X, r24
}
 e06:	cf 91       	pop	r28
 e08:	df 91       	pop	r29
 e0a:	08 95       	ret

00000e0c <main>:
#include  "DIO_interface.h"
#include  "DIO_private.h"
void App_void_set(void);

int main()
{
 e0c:	df 93       	push	r29
 e0e:	cf 93       	push	r28
 e10:	cd b7       	in	r28, 0x3d	; 61
 e12:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 e14:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInit>
	EXTI_u8EXTIsetcallback(EXTI_U8_INT0_call,&App_void_set);
 e18:	2a e1       	ldi	r18, 0x1A	; 26
 e1a:	37 e0       	ldi	r19, 0x07	; 7
 e1c:	80 e0       	ldi	r24, 0x00	; 0
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	b9 01       	movw	r22, r18
 e22:	0e 94 29 06 	call	0xc52	; 0xc52 <EXTI_u8EXTIsetcallback>
	EXTI_u8enable(EXTI_U8_INT0,EXTI_U8_ANY_LOGICAL_CHANGE);
 e26:	86 e0       	ldi	r24, 0x06	; 6
 e28:	62 e0       	ldi	r22, 0x02	; 2
 e2a:	0e 94 8d 04 	call	0x91a	; 0x91a <EXTI_u8enable>

	GINT_u8_enable();
 e2e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <GINT_u8_enable>
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <main+0x26>

00000e34 <App_void_set>:
/*
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
*/
void App_void_set(void)
{
 e34:	df 93       	push	r29
 e36:	cf 93       	push	r28
 e38:	cd b7       	in	r28, 0x3d	; 61
 e3a:	de b7       	in	r29, 0x3e	; 62
	static u8 local_u8flag=0;
	if(local_u8flag==0)
 e3c:	80 91 66 00 	lds	r24, 0x0066
 e40:	88 23       	and	r24, r24
 e42:	49 f4       	brne	.+18     	; 0xe56 <App_void_set+0x22>
	{
		DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);
 e44:	80 e0       	ldi	r24, 0x00	; 0
 e46:	60 e0       	ldi	r22, 0x00	; 0
 e48:	40 e0       	ldi	r20, 0x00	; 0
 e4a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_u8SetPinValue>
		local_u8flag=1;
 e4e:	81 e0       	ldi	r24, 0x01	; 1
 e50:	80 93 66 00 	sts	0x0066, r24
 e54:	0b c0       	rjmp	.+22     	; 0xe6c <App_void_set+0x38>
	}
	else if(local_u8flag==1)
 e56:	80 91 66 00 	lds	r24, 0x0066
 e5a:	81 30       	cpi	r24, 0x01	; 1
 e5c:	39 f4       	brne	.+14     	; 0xe6c <App_void_set+0x38>
	{DIO_u8SetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_HIGH);
 e5e:	80 e0       	ldi	r24, 0x00	; 0
 e60:	60 e0       	ldi	r22, 0x00	; 0
 e62:	41 e0       	ldi	r20, 0x01	; 1
 e64:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_u8SetPinValue>
	local_u8flag=0;
 e68:	10 92 66 00 	sts	0x0066, r1
}
}
 e6c:	cf 91       	pop	r28
 e6e:	df 91       	pop	r29
 e70:	08 95       	ret

00000e72 <_exit>:
 e72:	f8 94       	cli

00000e74 <__stop_program>:
 e74:	ff cf       	rjmp	.-2      	; 0xe74 <__stop_program>
